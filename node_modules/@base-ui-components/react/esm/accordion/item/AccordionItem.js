'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useForkRef } from '../../utils/useForkRef.js';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { useEventCallback } from '../../utils/useEventCallback.js';
import { useBaseUiId } from '../../utils/useBaseUiId.js';
import { useCollapsibleRoot } from '../../collapsible/root/useCollapsibleRoot.js';
import { CollapsibleRootContext } from '../../collapsible/root/CollapsibleRootContext.js';
import { useCompositeListItem } from '../../composite/list/useCompositeListItem.js';
import { useAccordionRootContext } from '../root/AccordionRootContext.js';
import { AccordionItemContext } from './AccordionItemContext.js';
import { accordionStyleHookMapping } from './styleHooks.js';

/**
 * Groups an accordion header with the corresponding panel.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Accordion](https://base-ui.com/react/components/accordion)
 */
import { jsx as _jsx } from "react/jsx-runtime";
const AccordionItem = /*#__PURE__*/React.forwardRef(function AccordionItem(props, forwardedRef) {
  const {
    className,
    disabled: disabledProp = false,
    onOpenChange: onOpenChangeProp,
    render,
    value: valueProp,
    ...other
  } = props;
  const {
    ref: listItemRef,
    index
  } = useCompositeListItem();
  const mergedRef = useForkRef(forwardedRef, listItemRef);
  const {
    disabled: contextDisabled,
    handleValueChange,
    state: rootState,
    value: openValues
  } = useAccordionRootContext();
  const value = valueProp ?? index;
  const disabled = disabledProp || contextDisabled;
  const isOpen = React.useMemo(() => {
    if (!openValues) {
      return false;
    }
    for (let i = 0; i < openValues.length; i += 1) {
      if (openValues[i] === value) {
        return true;
      }
    }
    return false;
  }, [openValues, value]);
  const onOpenChange = useEventCallback(nextOpen => {
    handleValueChange(value, nextOpen);
    onOpenChangeProp?.(nextOpen);
  });
  const collapsible = useCollapsibleRoot({
    open: isOpen,
    onOpenChange,
    disabled
  });
  const collapsibleState = React.useMemo(() => ({
    open: collapsible.open,
    disabled: collapsible.disabled,
    hidden: !collapsible.mounted,
    transitionStatus: collapsible.transitionStatus
  }), [collapsible.open, collapsible.disabled, collapsible.mounted, collapsible.transitionStatus]);
  const collapsibleContext = React.useMemo(() => ({
    ...collapsible,
    state: collapsibleState
  }), [collapsible, collapsibleState]);
  const state = React.useMemo(() => ({
    ...rootState,
    index,
    disabled,
    open: isOpen,
    transitionStatus: collapsible.transitionStatus
  }), [collapsible.transitionStatus, disabled, index, isOpen, rootState]);
  const [triggerId, setTriggerId] = React.useState(useBaseUiId());
  const accordionItemContext = React.useMemo(() => ({
    open: isOpen,
    state,
    setTriggerId,
    triggerId
  }), [isOpen, state, setTriggerId, triggerId]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'div',
    className,
    state,
    ref: mergedRef,
    extraProps: other,
    customStyleHookMapping: accordionStyleHookMapping
  });
  return /*#__PURE__*/_jsx(CollapsibleRootContext.Provider, {
    value: collapsibleContext,
    children: /*#__PURE__*/_jsx(AccordionItemContext.Provider, {
      value: accordionItemContext,
      children: renderElement()
    })
  });
});
export { AccordionItem };
process.env.NODE_ENV !== "production" ? AccordionItem.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Whether the component should ignore user interaction.
   * @default false
   */
  disabled: PropTypes.bool,
  /**
   * Event handler called when the panel is opened or closed.
   */
  onOpenChange: PropTypes.func,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),
  /**
   * @ignore
   */
  value: PropTypes.any
} : void 0;