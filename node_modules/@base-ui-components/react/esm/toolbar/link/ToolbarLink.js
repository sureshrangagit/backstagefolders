'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { useButton } from '../../use-button/index.js';
import { CompositeItem } from '../../composite/item/CompositeItem.js';
import { useToolbarRootContext } from '../root/ToolbarRootContext.js';
import { jsx as _jsx } from "react/jsx-runtime";
const TOOLBAR_LINK_METADATA = {
  focusableWhenDisabled: true
};
/**
 * A link component.
 * Renders an `<a>` element.
 *
 * Documentation: [Base UI Toolbar](https://base-ui.com/react/components/toolbar)
 */
const ToolbarLink = /*#__PURE__*/React.forwardRef(function ToolbarLink(props, forwardedRef) {
  const {
    className,
    render,
    ...otherProps
  } = props;
  const {
    orientation
  } = useToolbarRootContext();
  const {
    getButtonProps
  } = useButton({
    buttonRef: forwardedRef,
    elementName: 'a'
  });
  const state = React.useMemo(() => ({
    orientation
  }), [orientation]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getButtonProps,
    render: render ?? 'a',
    state,
    className,
    extraProps: otherProps
  });
  return /*#__PURE__*/_jsx(CompositeItem, {
    metadata: TOOLBAR_LINK_METADATA,
    render: renderElement()
  });
});
export { ToolbarLink };
process.env.NODE_ENV !== "production" ? ToolbarLink.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;