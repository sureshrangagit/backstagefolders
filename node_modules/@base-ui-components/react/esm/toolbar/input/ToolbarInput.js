'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { CompositeItem } from '../../composite/item/CompositeItem.js';
import { useToolbarRootContext } from '../root/ToolbarRootContext.js';
import { useToolbarGroupContext } from '../group/ToolbarGroupContext.js';
import { useToolbarInput } from './useToolbarInput.js';
/**
 * A native input element that integrates with Toolbar keyboard navigation.
 * Renders an `<input>` element.
 *
 * Documentation: [Base UI Toolbar](https://base-ui.com/react/components/toolbar)
 */
import { jsx as _jsx } from "react/jsx-runtime";
const ToolbarInput = /*#__PURE__*/React.forwardRef(function ToolbarInput(props, forwardedRef) {
  const {
    className,
    focusableWhenDisabled = true,
    render,
    disabled: disabledProp = false,
    ...otherProps
  } = props;
  const {
    disabled: toolbarDisabled,
    orientation
  } = useToolbarRootContext();
  const groupContext = useToolbarGroupContext(true);
  const itemMetadata = React.useMemo(() => ({
    focusableWhenDisabled
  }), [focusableWhenDisabled]);
  const disabled = toolbarDisabled || (groupContext?.disabled ?? false) || disabledProp;
  const {
    getInputProps
  } = useToolbarInput({
    ref: forwardedRef,
    disabled,
    focusableWhenDisabled
  });
  const state = React.useMemo(() => ({
    disabled,
    orientation,
    focusable: focusableWhenDisabled
  }), [disabled, focusableWhenDisabled, orientation]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getInputProps,
    render: render ?? 'input',
    state,
    className,
    extraProps: otherProps
  });
  return /*#__PURE__*/_jsx(CompositeItem, {
    metadata: itemMetadata,
    render: renderElement()
  });
});
export { ToolbarInput };
process.env.NODE_ENV !== "production" ? ToolbarInput.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * When `true` the item is disabled.
   * @default false
   */
  disabled: PropTypes.bool,
  /**
   * When `true` the item remains focuseable when disabled.
   * @default true
   */
  focusableWhenDisabled: PropTypes.bool,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;