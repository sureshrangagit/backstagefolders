'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { useForkRef } from '../../utils/useForkRef.js';
import { useCompositeRootContext } from '../root/CompositeRootContext.js';
import { useCompositeItem } from './useCompositeItem.js';
import { refType } from '../../utils/proptypes.js';
/**
 * @ignore - internal component.
 */
function CompositeItem(props) {
  const {
    render,
    className,
    itemRef,
    metadata,
    ...otherProps
  } = props;
  const {
    highlightedIndex
  } = useCompositeRootContext();
  const {
    getItemProps,
    ref,
    index
  } = useCompositeItem({
    metadata
  });
  const state = React.useMemo(() => ({
    highlighted: index === highlightedIndex
  }), [index, highlightedIndex]);
  const mergedRef = useForkRef(itemRef, ref);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getItemProps,
    ref: mergedRef,
    render: render ?? 'div',
    state,
    className,
    extraProps: otherProps
  });
  return renderElement();
}
export { CompositeItem };
process.env.NODE_ENV !== "production" ? CompositeItem.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * @ignore
   */
  itemRef: refType,
  /**
   * @ignore
   */
  metadata: PropTypes.any,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;