'use client';

import * as React from 'react';
import { mergeProps } from '../merge-props/index.js';
import { NOOP } from '../utils/noop.js';
import { useControlled } from '../utils/useControlled.js';
import { useEventCallback } from '../utils/useEventCallback.js';
import { useButton } from '../use-button/useButton.js';
export function useToggle(parameters) {
  const {
    buttonRef: externalRef,
    defaultPressed,
    disabled,
    onPressedChange: onPressedChangeProp = NOOP,
    pressed: pressedProp,
    setGroupValue,
    value
  } = parameters;
  const [pressed, setPressedState] = useControlled({
    controlled: pressedProp,
    default: defaultPressed,
    name: 'Toggle',
    state: 'pressed'
  });
  const onPressedChange = useEventCallback((nextPressed, event) => {
    setGroupValue(value, nextPressed, event);
    onPressedChangeProp(nextPressed, event);
  });
  const {
    getButtonProps,
    buttonRef
  } = useButton({
    disabled,
    buttonRef: externalRef,
    type: 'button'
  });
  const getRootProps = React.useCallback((externalProps = {}) => {
    return mergeProps({
      'aria-pressed': pressed,
      onClick(event) {
        const nextPressed = !pressed;
        setPressedState(nextPressed);
        onPressedChange(nextPressed, event.nativeEvent);
      },
      ref: buttonRef
    }, externalProps, getButtonProps);
  }, [getButtonProps, buttonRef, onPressedChange, pressed, setPressedState]);
  return React.useMemo(() => ({
    getRootProps,
    disabled,
    pressed
  }), [getRootProps, disabled, pressed]);
}