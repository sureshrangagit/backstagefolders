'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { ScrollAreaRootContext } from './ScrollAreaRootContext.js';
import { useScrollAreaRoot } from './useScrollAreaRoot.js';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const state = {};

/**
 * Groups all parts of the scroll area.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Scroll Area](https://base-ui.com/react/components/scroll-area)
 */
const ScrollAreaRoot = /*#__PURE__*/React.forwardRef(function ScrollAreaRoot(props, forwardedRef) {
  const {
    render,
    className,
    ...otherProps
  } = props;
  const scrollAreaRoot = useScrollAreaRoot();
  const {
    rootId
  } = scrollAreaRoot;
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: scrollAreaRoot.getRootProps,
    render: render ?? 'div',
    ref: forwardedRef,
    className,
    state,
    extraProps: otherProps
  });
  const contextValue = React.useMemo(() => scrollAreaRoot, [scrollAreaRoot]);
  const viewportId = `[data-id="${rootId}-viewport"]`;
  const html = React.useMemo(() => ({
    __html: `${viewportId}{scrollbar-width:none}${viewportId}::-webkit-scrollbar{display:none}`
  }), [viewportId]);
  return /*#__PURE__*/_jsxs(ScrollAreaRootContext.Provider, {
    value: contextValue,
    children: [rootId && /*#__PURE__*/_jsx("style", {
      // eslint-disable-next-line react/no-danger
      dangerouslySetInnerHTML: html
    }), renderElement()]
  });
});
process.env.NODE_ENV !== "production" ? ScrollAreaRoot.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;
export { ScrollAreaRoot };