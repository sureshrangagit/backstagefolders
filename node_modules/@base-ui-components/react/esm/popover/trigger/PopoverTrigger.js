'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { usePopoverRootContext } from '../root/PopoverRootContext.js';
import { useButton } from '../../use-button/useButton.js';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { useForkRef } from '../../utils/useForkRef.js';
import { triggerOpenStateMapping, pressableTriggerOpenStateMapping } from '../../utils/popupStateMapping.js';
/**
 * A button that opens the popover.
 * Renders a `<button>` element.
 *
 * Documentation: [Base UI Popover](https://base-ui.com/react/components/popover)
 */
const PopoverTrigger = /*#__PURE__*/React.forwardRef(function PopoverTrigger(props, forwardedRef) {
  const {
    render,
    className,
    disabled = false,
    ...otherProps
  } = props;
  const {
    mounted,
    setTriggerElement,
    getRootTriggerProps,
    openReason
  } = usePopoverRootContext();
  const state = React.useMemo(() => ({
    disabled,
    open: mounted
  }), [disabled, mounted]);
  const {
    getButtonProps,
    buttonRef
  } = useButton({
    disabled,
    buttonRef: forwardedRef
  });
  const mergedRef = useForkRef(buttonRef, setTriggerElement);
  const customStyleHookMapping = React.useMemo(() => ({
    open(value) {
      if (value && openReason === 'click') {
        return pressableTriggerOpenStateMapping.open(value);
      }
      return triggerOpenStateMapping.open(value);
    }
  }), [openReason]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: externalProps => getButtonProps(getRootTriggerProps(externalProps)),
    render: render ?? 'button',
    className,
    state,
    ref: mergedRef,
    extraProps: otherProps,
    customStyleHookMapping
  });
  return renderElement();
});
process.env.NODE_ENV !== "production" ? PopoverTrigger.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * @ignore
   */
  disabled: PropTypes.bool,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;
export { PopoverTrigger };