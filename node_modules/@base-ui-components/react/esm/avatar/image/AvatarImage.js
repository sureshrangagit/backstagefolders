'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { useEventCallback } from '../../utils/useEventCallback.js';
import { useEnhancedEffect } from '../../utils/useEnhancedEffect.js';
import { useAvatarRootContext } from '../root/AvatarRootContext.js';
import { avatarStyleHookMapping } from '../root/styleHooks.js';
import { useImageLoadingStatus } from './useImageLoadingStatus.js';

/**
 * The image to be displayed in the avatar.
 * Renders an `<img>` element.
 *
 * Documentation: [Base UI Avatar](https://base-ui.com/react/components/avatar)
 */
const AvatarImage = /*#__PURE__*/React.forwardRef(function AvatarImage(props, forwardedRef) {
  const {
    className,
    render,
    onLoadingStatusChange: onLoadingStatusChangeProp,
    referrerPolicy,
    crossOrigin,
    ...otherProps
  } = props;
  const context = useAvatarRootContext();
  const imageLoadingStatus = useImageLoadingStatus(props.src, {
    referrerPolicy,
    crossOrigin
  });
  const handleLoadingStatusChange = useEventCallback(status => {
    onLoadingStatusChangeProp?.(status);
    context.setImageLoadingStatus(status);
  });
  useEnhancedEffect(() => {
    if (imageLoadingStatus !== 'idle') {
      handleLoadingStatusChange(imageLoadingStatus);
    }
  }, [imageLoadingStatus, handleLoadingStatusChange]);
  const state = React.useMemo(() => ({
    imageLoadingStatus
  }), [imageLoadingStatus]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'img',
    state,
    className,
    ref: forwardedRef,
    extraProps: otherProps,
    customStyleHookMapping: avatarStyleHookMapping
  });
  return imageLoadingStatus === 'loaded' ? renderElement() : null;
});
export { AvatarImage };
process.env.NODE_ENV !== "production" ? AvatarImage.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * @ignore
   */
  crossOrigin: PropTypes.oneOf(['', 'anonymous', 'use-credentials']),
  /**
   * Callback fired when the loading status changes.
   */
  onLoadingStatusChange: PropTypes.func,
  /**
   * @ignore
   */
  referrerPolicy: PropTypes.oneOf(['', 'no-referrer-when-downgrade', 'no-referrer', 'origin-when-cross-origin', 'origin', 'same-origin', 'strict-origin-when-cross-origin', 'strict-origin', 'unsafe-url']),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),
  /**
   * @ignore
   */
  src: PropTypes.string
} : void 0;