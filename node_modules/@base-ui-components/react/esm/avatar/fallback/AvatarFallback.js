'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { useAvatarRootContext } from '../root/AvatarRootContext.js';
import { avatarStyleHookMapping } from '../root/styleHooks.js';

/**
 * Rendered when the image fails to load or when no image is provided.
 * Renders a `<span>` element.
 *
 * Documentation: [Base UI Avatar](https://base-ui.com/react/components/avatar)
 */
const AvatarFallback = /*#__PURE__*/React.forwardRef(function AvatarFallback(props, forwardedRef) {
  const {
    className,
    render,
    delay,
    ...otherProps
  } = props;
  const {
    imageLoadingStatus
  } = useAvatarRootContext();
  const [delayPassed, setDelayPassed] = React.useState(delay === undefined);
  React.useEffect(() => {
    let timerId;
    if (delay !== undefined) {
      timerId = window.setTimeout(() => setDelayPassed(true), delay);
    }
    return () => {
      window.clearTimeout(timerId);
    };
  }, [delay]);
  const state = React.useMemo(() => ({
    imageLoadingStatus
  }), [imageLoadingStatus]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'span',
    state,
    className,
    ref: forwardedRef,
    extraProps: otherProps,
    customStyleHookMapping: avatarStyleHookMapping
  });
  const shouldRender = imageLoadingStatus !== 'loaded' && delayPassed;
  return shouldRender ? renderElement() : null;
});
export { AvatarFallback };
process.env.NODE_ENV !== "production" ? AvatarFallback.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * How long to wait before showing the fallback. Specified in milliseconds.
   */
  delay: PropTypes.number,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;