import * as React from 'react';
import type { ScrubHandle } from './useScrub.js';
import type { EventWithOptionalKeyState } from '../utils/types.js';
export declare function useNumberFieldRoot(params: useNumberFieldRoot.Parameters): useNumberFieldRoot.ReturnValue;
export type InputMode = 'numeric' | 'decimal' | 'text';
export declare namespace useNumberFieldRoot {
    interface Parameters {
        /**
         * The id of the input element.
         */
        id?: string;
        /**
         * The minimum value of the input element.
         */
        min?: number;
        /**
         * The maximum value of the input element.
         */
        max?: number;
        /**
         * The small step value of the input element when incrementing while the meta key is held. Snaps
         * to multiples of this value.
         * @default 0.1
         */
        smallStep?: number;
        /**
         * Amount to increment and decrement with the buttons and arrow keys,
         * or to scrub with pointer movement in the scrub area.
         * @default 1
         */
        step?: number;
        /**
         * The large step value of the input element when incrementing while the shift key is held. Snaps
         * to multiples of this value.
         * @default 10
         */
        largeStep?: number;
        /**
         * Whether the user must enter a value before submitting a form.
         * @default false
         */
        required?: boolean;
        /**
         * Whether the component should ignore user interaction.
         * @default false
         */
        disabled?: boolean;
        /**
         * Whether the field is forcefully marked as invalid.
         * @default false
         */
        invalid?: boolean;
        /**
         * Whether to focus the element on page load.
         * @default false
         */
        autoFocus?: boolean;
        /**
         * Whether the user should be unable to change the field value.
         * @default false
         */
        readOnly?: boolean;
        /**
         * Identifies the field when a form is submitted.
         */
        name?: string;
        /**
         * The raw numeric value of the field.
         */
        value?: number | null;
        /**
         * The uncontrolled value of the field when itâ€™s initially rendered.
         *
         * To render a controlled number field, use the `value` prop instead.
         */
        defaultValue?: number;
        /**
         * Whether to allow the user to scrub the input value with the mouse wheel while focused and
         * hovering over the input.
         * @default false
         */
        allowWheelScrub?: boolean;
        /**
         * Options to format the input value.
         */
        format?: Intl.NumberFormatOptions;
        /**
         * Callback fired when the number value changes.
         * @param {number | null} value The new value.
         * @param {Event} event The event that triggered the change.
         */
        onValueChange?: (value: number | null, event?: Event) => void;
        /**
         * The locale of the input element.
         * Defaults to the user's runtime locale.
         */
        locale?: Intl.LocalesArgument;
    }
    interface ReturnValue {
        getScrubAreaProps: (externalProps?: React.ComponentPropsWithRef<'span'>) => React.ComponentPropsWithRef<'span'>;
        inputValue: string;
        value: number | null;
        isScrubbing: boolean;
        isTouchInput: boolean;
        isPointerLockDenied: boolean;
        scrubHandleRef: React.RefObject<ScrubHandle | null>;
        scrubAreaRef: React.RefObject<HTMLSpanElement | null>;
        scrubAreaCursorRef: React.RefObject<HTMLSpanElement | null>;
        startAutoChange: (isIncrement: boolean, event?: React.MouseEvent | Event) => void;
        stopAutoChange: () => void;
        minWithDefault: number;
        maxWithDefault: number;
        disabled: boolean;
        readOnly: boolean;
        id: string | undefined;
        setValue: (unvalidatedValue: number | null, event?: Event) => void;
        getStepAmount: (event?: EventWithOptionalKeyState) => number | undefined;
        incrementValue: (amount: number, dir: 1 | -1, currentValue?: number | null, event?: Event) => void;
        inputRef: React.RefObject<HTMLInputElement | null>;
        mergedRef: ((instance: HTMLInputElement | null) => void) | null;
        allowInputSyncRef: React.RefObject<boolean | null>;
        formatOptionsRef: React.RefObject<Intl.NumberFormatOptions | undefined>;
        valueRef: React.RefObject<number | null>;
        isPressedRef: React.RefObject<boolean | null>;
        intentionalTouchCheckTimeoutRef: React.RefObject<number | null>;
        movesAfterTouchRef: React.RefObject<number | null>;
        name: string | undefined;
        required: boolean;
        invalid: boolean;
        autoFocus: boolean;
        inputMode: InputMode;
        getAllowedNonNumericKeys: () => (string | undefined)[];
        min: number | undefined;
        max: number | undefined;
        setInputValue: React.Dispatch<React.SetStateAction<string>>;
        locale: Intl.LocalesArgument;
    }
}
