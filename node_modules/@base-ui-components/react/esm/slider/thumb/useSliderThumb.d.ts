import * as React from 'react';
import { GenericHTMLProps } from '../../utils/types.js';
import type { useSliderRoot } from '../root/useSliderRoot.js';
export interface ThumbMetadata {
    inputId: string | undefined;
}
export declare function useSliderThumb(parameters: useSliderThumb.Parameters): useSliderThumb.ReturnValue;
export declare namespace useSliderThumb {
    interface Parameters extends Pick<useSliderRoot.ReturnValue, 'active' | 'aria-labelledby' | 'handleInputChange' | 'largeStep' | 'max' | 'min' | 'minStepsBetweenValues' | 'name' | 'orientation' | 'percentageValues' | 'step' | 'values'> {
        /**
         * The label for the input element.
         */
        'aria-label': string;
        /**
         * A string value that provides a user-friendly name for the current value of the slider.
         */
        'aria-valuetext': string;
        /**
         * Options to format the input value.
         * @default null
         */
        format: Intl.NumberFormatOptions | null;
        /**
         * Accepts a function which returns a string value that provides a user-friendly name for the input associated with the thumb
         * @param {number} index The index of the input
         * @returns {string}
         * @type {((index: number) => string) | null}
         */
        getAriaLabel?: ((index: number) => string) | null;
        /**
         * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
         * This is important for screen reader users.
         * @param {string} formattedValue The thumb's formatted value.
         * @param {number} value The thumb's numerical value.
         * @param {number} index The thumb's index.
         * @returns {string}
         * @type {((formattedValue: string, value: number, index: number) => string) | null}
         */
        getAriaValueText: ((formattedValue: string, value: number, index: number) => string) | null;
        id: string;
        inputId: string;
        disabled: boolean;
        onBlur: React.FocusEventHandler;
        onFocus: React.FocusEventHandler;
        onKeyDown: React.KeyboardEventHandler;
        rootRef?: React.Ref<Element>;
        /**
         * Optional tab index attribute for the thumb components.
         * @default null
         */
        tabIndex: number | null;
    }
    interface ReturnValue {
        getRootProps: (externalProps?: GenericHTMLProps) => GenericHTMLProps;
        getThumbInputProps: (externalProps?: React.ComponentPropsWithRef<'input'>) => React.ComponentPropsWithRef<'input'>;
        index: number;
        disabled: boolean;
    }
}
