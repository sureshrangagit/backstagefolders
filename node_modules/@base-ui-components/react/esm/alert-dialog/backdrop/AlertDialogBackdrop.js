'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useAlertDialogRootContext } from '../root/AlertDialogRootContext.js';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { popupStateMapping as baseMapping } from '../../utils/popupStateMapping.js';
import { transitionStatusMapping } from '../../utils/styleHookMapping.js';
import { useForkRef } from '../../utils/useForkRef.js';
const customStyleHookMapping = {
  ...baseMapping,
  ...transitionStatusMapping
};

/**
 * An overlay displayed beneath the popup.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Alert Dialog](https://base-ui.com/react/components/alert-dialog)
 */
const AlertDialogBackdrop = /*#__PURE__*/React.forwardRef(function AlertDialogBackdrop(props, forwardedRef) {
  const {
    render,
    className,
    ...other
  } = props;
  const {
    open,
    nested,
    mounted,
    transitionStatus,
    backdropRef
  } = useAlertDialogRootContext();
  const state = React.useMemo(() => ({
    open,
    transitionStatus
  }), [open, transitionStatus]);
  const mergedRef = useForkRef(backdropRef, forwardedRef);
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'div',
    className,
    state,
    ref: mergedRef,
    extraProps: {
      role: 'presentation',
      hidden: !mounted,
      ...other
    },
    customStyleHookMapping
  });

  // no need to render nested backdrops
  const shouldRender = !nested;
  if (!shouldRender) {
    return null;
  }
  return renderElement();
});
process.env.NODE_ENV !== "production" ? AlertDialogBackdrop.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;
export { AlertDialogBackdrop };