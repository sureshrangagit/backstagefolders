'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { FloatingFocusManager } from '@floating-ui/react';
import { useDialogPopup } from '../../dialog/popup/useDialogPopup.js';
import { useAlertDialogRootContext } from '../root/AlertDialogRootContext.js';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { refType } from '../../utils/proptypes.js';
import { popupStateMapping as baseMapping } from '../../utils/popupStateMapping.js';
import { useForkRef } from '../../utils/useForkRef.js';
import { transitionStatusMapping } from '../../utils/styleHookMapping.js';
import { AlertDialogPopupDataAttributes } from './AlertDialogPopupDataAttributes.js';
import { InternalBackdrop } from '../../utils/InternalBackdrop.js';
import { useAlertDialogPortalContext } from '../portal/AlertDialogPortalContext.js';
import { useOpenChangeComplete } from '../../utils/useOpenChangeComplete.js';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const customStyleHookMapping = {
  ...baseMapping,
  ...transitionStatusMapping,
  hasNestedDialogs(value) {
    return value ? {
      [AlertDialogPopupDataAttributes.hasNestedDialogs]: ''
    } : null;
  }
};

/**
 * A container for the alert dialog contents.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Alert Dialog](https://base-ui.com/react/components/alert-dialog)
 */
const AlertDialogPopup = /*#__PURE__*/React.forwardRef(function AlertDialogPopup(props, forwardedRef) {
  const {
    className,
    id,
    render,
    initialFocus,
    finalFocus,
    ...other
  } = props;
  const {
    descriptionElementId,
    floatingRootContext,
    getPopupProps,
    mounted,
    nested,
    nestedOpenDialogCount,
    setOpen,
    open,
    openMethod,
    popupRef,
    setPopupElement,
    titleElementId,
    transitionStatus,
    modal,
    onOpenChangeComplete,
    internalBackdropRef
  } = useAlertDialogRootContext();
  useAlertDialogPortalContext();
  useOpenChangeComplete({
    open,
    ref: popupRef,
    onComplete() {
      if (open) {
        onOpenChangeComplete?.(true);
      }
    }
  });
  const mergedRef = useForkRef(forwardedRef, popupRef);
  const {
    getRootProps,
    resolvedInitialFocus
  } = useDialogPopup({
    descriptionElementId,
    getPopupProps,
    id,
    initialFocus,
    modal: true,
    mounted,
    setOpen,
    openMethod,
    ref: mergedRef,
    setPopupElement,
    titleElementId
  });
  const hasNestedDialogs = nestedOpenDialogCount > 0;
  const state = React.useMemo(() => ({
    open,
    nested,
    transitionStatus,
    hasNestedDialogs
  }), [open, nested, transitionStatus, hasNestedDialogs]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'div',
    className,
    state,
    propGetter: getRootProps,
    extraProps: {
      ...other,
      style: {
        ...other.style,
        '--nested-dialogs': nestedOpenDialogCount
      },
      role: 'alertdialog'
    },
    customStyleHookMapping
  });
  return /*#__PURE__*/_jsxs(React.Fragment, {
    children: [mounted && modal && /*#__PURE__*/_jsx(InternalBackdrop, {
      ref: internalBackdropRef
    }), /*#__PURE__*/_jsx(FloatingFocusManager, {
      context: floatingRootContext,
      disabled: !mounted,
      initialFocus: resolvedInitialFocus,
      returnFocus: finalFocus,
      children: renderElement()
    })]
  });
});
process.env.NODE_ENV !== "production" ? AlertDialogPopup.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Determines the element to focus when the dialog is closed.
   * By default, focus returns to the trigger.
   */
  finalFocus: refType,
  /**
   * @ignore
   */
  id: PropTypes.string,
  /**
   * Determines the element to focus when the dialog is opened.
   * By default, the first focusable element is focused.
   */
  initialFocus: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.func, refType]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),
  /**
   * @ignore
   */
  style: PropTypes.object
} : void 0;
export { AlertDialogPopup };