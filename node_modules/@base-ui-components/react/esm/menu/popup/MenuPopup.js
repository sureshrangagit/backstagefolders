'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { FloatingFocusManager, useFloatingTree } from '@floating-ui/react';
import { useMenuPopup } from './useMenuPopup.js';
import { useMenuRootContext } from '../root/MenuRootContext.js';
import { useMenuPositionerContext } from '../positioner/MenuPositionerContext.js';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { useForkRef } from '../../utils/useForkRef.js';
import { popupStateMapping as baseMapping } from '../../utils/popupStateMapping.js';
import { mergeProps } from '../../merge-props/index.js';
import { transitionStatusMapping } from '../../utils/styleHookMapping.js';
import { useOpenChangeComplete } from '../../utils/useOpenChangeComplete.js';
import { jsx as _jsx } from "react/jsx-runtime";
const customStyleHookMapping = {
  ...baseMapping,
  ...transitionStatusMapping
};
const DISABLED_TRANSITIONS_STYLE = {
  style: {
    transition: 'none'
  }
};
const EMPTY_OBJ = {};

/**
 * A container for the menu items.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Menu](https://base-ui.com/react/components/menu)
 */
const MenuPopup = /*#__PURE__*/React.forwardRef(function MenuPopup(props, forwardedRef) {
  const {
    render,
    className,
    ...other
  } = props;
  const {
    open,
    setOpen,
    popupRef,
    transitionStatus,
    nested,
    popupProps,
    modal,
    mounted,
    instantType,
    onOpenChangeComplete
  } = useMenuRootContext();
  const {
    side,
    align,
    floatingContext
  } = useMenuPositionerContext();
  useOpenChangeComplete({
    open,
    ref: popupRef,
    onComplete() {
      if (open) {
        onOpenChangeComplete?.(true);
      }
    }
  });
  const {
    events: menuEvents
  } = useFloatingTree();
  useMenuPopup({
    setOpen,
    menuEvents
  });
  const mergedRef = useForkRef(forwardedRef, popupRef);
  const state = React.useMemo(() => ({
    transitionStatus,
    side,
    align,
    open,
    nested,
    instant: instantType
  }), [transitionStatus, side, align, open, nested, instantType]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render || 'div',
    className,
    state,
    extraProps: mergeProps(transitionStatus === 'starting' ? DISABLED_TRANSITIONS_STYLE : EMPTY_OBJ, popupProps, other),
    customStyleHookMapping,
    ref: mergedRef
  });
  return /*#__PURE__*/_jsx(FloatingFocusManager, {
    context: floatingContext,
    modal: false,
    disabled: !mounted,
    visuallyHiddenDismiss: modal ? 'Dismiss popup' : undefined,
    children: renderElement()
  });
});
process.env.NODE_ENV !== "production" ? MenuPopup.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * @ignore
   */
  id: PropTypes.string,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;
export { MenuPopup };