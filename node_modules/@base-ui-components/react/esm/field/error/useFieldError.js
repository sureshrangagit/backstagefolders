'use client';

import * as React from 'react';
import { mergeProps } from '../../merge-props/index.js';
import { useBaseUiId } from '../../utils/useBaseUiId.js';
import { useEnhancedEffect } from '../../utils/useEnhancedEffect.js';
import { useFieldRootContext } from '../root/FieldRootContext.js';
export function useFieldError(params) {
  const {
    id: idProp,
    rendered,
    formError
  } = params;
  const {
    setMessageIds,
    validityData
  } = useFieldRootContext();
  const id = useBaseUiId(idProp);
  useEnhancedEffect(() => {
    if (!rendered || !id) {
      return undefined;
    }
    setMessageIds(v => v.concat(id));
    return () => {
      setMessageIds(v => v.filter(item => item !== id));
    };
  }, [rendered, id, setMessageIds]);
  const getErrorProps = React.useCallback((externalProps = {}) => mergeProps({
    id,
    children: formError || (validityData.errors.length > 1 ? /*#__PURE__*/React.createElement('ul', {}, validityData.errors.map(message => /*#__PURE__*/React.createElement('li', {
      key: message
    }, message))) : validityData.error)
  }, externalProps), [id, formError, validityData]);
  return React.useMemo(() => ({
    getErrorProps
  }), [getErrorProps]);
}