'use client';

import * as React from 'react';
import { useForkRef } from '../../utils/useForkRef.js';
import { mergeProps } from '../../merge-props/index.js';
export function useDialogPopup(parameters) {
  const {
    descriptionElementId,
    getPopupProps,
    initialFocus,
    modal,
    mounted,
    openMethod,
    ref,
    setPopupElement,
    titleElementId
  } = parameters;
  const popupRef = React.useRef(null);
  const handleRef = useForkRef(ref, popupRef, setPopupElement);

  // Default initial focus logic:
  // If opened by touch, focus the popup element to prevent the virtual keyboard from opening
  // (this is required for Android specifically as iOS handles this automatically).
  const defaultInitialFocus = React.useCallback(interactionType => {
    if (interactionType === 'touch') {
      return popupRef;
    }
    return 0;
  }, []);
  const resolvedInitialFocus = React.useMemo(() => {
    if (initialFocus == null) {
      return defaultInitialFocus(openMethod ?? '');
    }
    if (typeof initialFocus === 'function') {
      return initialFocus(openMethod ?? '');
    }
    return initialFocus;
  }, [defaultInitialFocus, initialFocus, openMethod]);
  const getRootProps = externalProps => mergeProps({
    'aria-labelledby': titleElementId ?? undefined,
    'aria-describedby': descriptionElementId ?? undefined,
    'aria-modal': mounted && modal ? true : undefined,
    role: 'dialog',
    tabIndex: -1,
    ...getPopupProps(),
    ref: handleRef,
    hidden: !mounted
  }, externalProps);
  return {
    getRootProps,
    resolvedInitialFocus
  };
}