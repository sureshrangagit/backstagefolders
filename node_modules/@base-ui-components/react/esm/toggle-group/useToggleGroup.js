'use client';

import * as React from 'react';
import { mergeProps } from '../merge-props/index.js';
import { useControlled } from '../utils/useControlled.js';
import { useEventCallback } from '../utils/useEventCallback.js';
export function useToggleGroup(parameters) {
  const {
    value,
    defaultValue,
    disabled,
    onValueChange,
    toggleMultiple
  } = parameters;
  const [groupValue, setValueState] = useControlled({
    controlled: value,
    default: defaultValue,
    name: 'ToggleGroup',
    state: 'value'
  });
  const setGroupValue = useEventCallback((newValue, nextPressed, event) => {
    let newGroupValue;
    if (toggleMultiple) {
      newGroupValue = groupValue.slice();
      if (nextPressed) {
        newGroupValue.push(newValue);
      } else {
        newGroupValue.splice(groupValue.indexOf(newValue), 1);
      }
    } else {
      newGroupValue = nextPressed ? [newValue] : [];
    }
    if (Array.isArray(newGroupValue)) {
      setValueState(newGroupValue);
      onValueChange?.(newGroupValue, event);
    }
  });
  const getRootProps = React.useCallback((externalProps = {}) => mergeProps({
    role: 'group'
  }, externalProps), []);
  return React.useMemo(() => ({
    getRootProps,
    disabled,
    setGroupValue,
    value: groupValue
  }), [getRootProps, disabled, groupValue, setGroupValue]);
}