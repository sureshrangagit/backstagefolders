'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { usePreviewCardRootContext } from '../root/PreviewCardContext.js';
import { popupStateMapping as baseMapping } from '../../utils/popupStateMapping.js';
import { transitionStatusMapping } from '../../utils/styleHookMapping.js';
import { mergeProps } from '../../merge-props/index.js';
const customStyleHookMapping = {
  ...baseMapping,
  ...transitionStatusMapping
};

/**
 * An overlay displayed beneath the popup.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Preview Card](https://base-ui.com/react/components/preview-card)
 */
const PreviewCardBackdrop = /*#__PURE__*/React.forwardRef(function PreviewCardBackdrop(props, forwardedRef) {
  const {
    render,
    className,
    ...other
  } = props;
  const {
    open,
    mounted,
    transitionStatus
  } = usePreviewCardRootContext();
  const state = React.useMemo(() => ({
    open,
    transitionStatus
  }), [open, transitionStatus]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'div',
    className,
    state,
    ref: forwardedRef,
    extraProps: mergeProps({
      role: 'presentation',
      hidden: !mounted,
      style: {
        pointerEvents: 'none'
      }
    }, other),
    customStyleHookMapping
  });
  return renderElement();
});
process.env.NODE_ENV !== "production" ? PreviewCardBackdrop.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;
export { PreviewCardBackdrop };