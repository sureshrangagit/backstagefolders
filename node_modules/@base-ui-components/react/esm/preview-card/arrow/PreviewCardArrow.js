'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import { useComponentRenderer } from '../../utils/useComponentRenderer.js';
import { usePreviewCardPositionerContext } from '../positioner/PreviewCardPositionerContext.js';
import { useForkRef } from '../../utils/useForkRef.js';
import { usePreviewCardRootContext } from '../root/PreviewCardContext.js';
import { popupStateMapping } from '../../utils/popupStateMapping.js';
import { mergeProps } from '../../merge-props/index.js';

/**
 * Displays an element positioned against the preview card anchor.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Preview Card](https://base-ui.com/react/components/preview-card)
 */
const PreviewCardArrow = /*#__PURE__*/React.forwardRef(function PreviewCardArrow(props, forwardedRef) {
  const {
    render,
    className,
    ...otherProps
  } = props;
  const {
    open
  } = usePreviewCardRootContext();
  const {
    arrowRef,
    side,
    align,
    arrowUncentered,
    arrowStyles
  } = usePreviewCardPositionerContext();
  const getArrowProps = React.useCallback((externalProps = {}) => mergeProps({
    style: arrowStyles,
    'aria-hidden': true
  }, externalProps), [arrowStyles]);
  const state = React.useMemo(() => ({
    open,
    side,
    align,
    uncentered: arrowUncentered
  }), [open, side, align, arrowUncentered]);
  const mergedRef = useForkRef(arrowRef, forwardedRef);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getArrowProps,
    render: render ?? 'div',
    className,
    state,
    ref: mergedRef,
    extraProps: otherProps,
    customStyleHookMapping: popupStateMapping
  });
  return renderElement();
});
process.env.NODE_ENV !== "production" ? PreviewCardArrow.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: PropTypes.oneOfType([PropTypes.element, PropTypes.func])
} : void 0;
export { PreviewCardArrow };