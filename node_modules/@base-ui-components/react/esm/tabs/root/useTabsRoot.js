'use client';

import * as React from 'react';
import { useControlled } from '../../utils/useControlled.js';
function useTabsRoot(parameters) {
  const {
    value: valueProp,
    defaultValue,
    onValueChange: onValueChangeProp
  } = parameters;
  const tabPanelRefs = React.useRef([]);
  const [value, setValue] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: 'Tabs',
    state: 'value'
  });
  const [tabPanelMap, setTabPanelMap] = React.useState(() => new Map());
  const [tabMap, setTabMap] = React.useState(() => new Map());
  const [tabActivationDirection, setTabActivationDirection] = React.useState('none');
  const onValueChange = React.useCallback((newValue, activationDirection, event) => {
    setValue(newValue);
    setTabActivationDirection(activationDirection);
    onValueChangeProp?.(newValue, event);
  }, [onValueChangeProp, setValue]);

  // get the `id` attribute of <Tabs.Panel> to set as the value of `aria-controls` on <Tabs.Tab>
  const getTabPanelIdByTabValueOrIndex = React.useCallback((tabValue, index) => {
    if (tabValue === undefined && index < 0) {
      return undefined;
    }
    for (const tabPanelMetadata of tabPanelMap.values()) {
      // find by tabValue
      if (tabValue !== undefined && tabPanelMetadata && tabValue === tabPanelMetadata?.value) {
        return tabPanelMetadata.id;
      }

      // find by index
      if (tabValue === undefined && tabPanelMetadata?.index && tabPanelMetadata?.index === index) {
        return tabPanelMetadata.id;
      }
    }
    return undefined;
  }, [tabPanelMap]);

  // get the `id` attribute of <Tabs.Tab> to set as the value of `aria-labelledby` on <Tabs.Panel>
  const getTabIdByPanelValueOrIndex = React.useCallback((tabPanelValue, index) => {
    if (tabPanelValue === undefined && index < 0) {
      return undefined;
    }
    for (const tabMetadata of tabMap.values()) {
      // find by tabPanelValue
      if (tabPanelValue !== undefined && index > -1 && tabPanelValue === (tabMetadata?.value ?? tabMetadata?.index ?? undefined)) {
        return tabMetadata?.id;
      }

      // find by index
      if (tabPanelValue === undefined && index > -1 && index === (tabMetadata?.value ?? tabMetadata?.index ?? undefined)) {
        return tabMetadata?.id;
      }
    }
    return undefined;
  }, [tabMap]);

  // used in `useActivationDirectionDetector` for setting data-activation-direction
  const getTabElementBySelectedValue = React.useCallback(selectedValue => {
    if (selectedValue === undefined) {
      return null;
    }
    for (const [tabElement, tabMetadata] of tabMap.entries()) {
      if (tabMetadata != null && selectedValue === (tabMetadata.value ?? tabMetadata.index)) {
        return tabElement;
      }
    }
    return null;
  }, [tabMap]);
  return {
    getTabElementBySelectedValue,
    getTabIdByPanelValueOrIndex,
    getTabPanelIdByTabValueOrIndex,
    onValueChange,
    setTabMap,
    setTabPanelMap,
    tabActivationDirection,
    tabMap,
    tabPanelRefs,
    value
  };
}
export { useTabsRoot };