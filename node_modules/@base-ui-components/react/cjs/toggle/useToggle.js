"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useToggle = useToggle;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../merge-props");
var _noop = require("../utils/noop");
var _useControlled = require("../utils/useControlled");
var _useEventCallback = require("../utils/useEventCallback");
var _useButton = require("../use-button/useButton");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useToggle(parameters) {
  const {
    buttonRef: externalRef,
    defaultPressed,
    disabled,
    onPressedChange: onPressedChangeProp = _noop.NOOP,
    pressed: pressedProp,
    setGroupValue,
    value
  } = parameters;
  const [pressed, setPressedState] = (0, _useControlled.useControlled)({
    controlled: pressedProp,
    default: defaultPressed,
    name: 'Toggle',
    state: 'pressed'
  });
  const onPressedChange = (0, _useEventCallback.useEventCallback)((nextPressed, event) => {
    setGroupValue(value, nextPressed, event);
    onPressedChangeProp(nextPressed, event);
  });
  const {
    getButtonProps,
    buttonRef
  } = (0, _useButton.useButton)({
    disabled,
    buttonRef: externalRef,
    type: 'button'
  });
  const getRootProps = React.useCallback((externalProps = {}) => {
    return (0, _mergeProps.mergeProps)({
      'aria-pressed': pressed,
      onClick(event) {
        const nextPressed = !pressed;
        setPressedState(nextPressed);
        onPressedChange(nextPressed, event.nativeEvent);
      },
      ref: buttonRef
    }, externalProps, getButtonProps);
  }, [getButtonProps, buttonRef, onPressedChange, pressed, setPressedState]);
  return React.useMemo(() => ({
    getRootProps,
    disabled,
    pressed
  }), [getRootProps, disabled, pressed]);
}