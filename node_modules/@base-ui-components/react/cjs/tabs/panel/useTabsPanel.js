"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTabsPanel = useTabsPanel;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../../merge-props");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _useForkRef = require("../../utils/useForkRef");
var _useCompositeListItem = require("../../composite/list/useCompositeListItem");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useTabsPanel(parameters) {
  const {
    getTabIdByPanelValueOrIndex,
    rootRef: externalRef,
    selectedValue,
    value: valueParam
  } = parameters;
  const id = (0, _useBaseUiId.useBaseUiId)();
  const metadata = React.useMemo(() => ({
    id,
    value: valueParam
  }), [id, valueParam]);
  const {
    ref: listItemRef,
    index
  } = (0, _useCompositeListItem.useCompositeListItem)({
    metadata
  });
  const tabPanelValue = valueParam ?? index;
  const panelRef = React.useRef(null);
  const handleRef = (0, _useForkRef.useForkRef)(panelRef, listItemRef, externalRef);
  const hidden = tabPanelValue !== selectedValue;
  const correspondingTabId = React.useMemo(() => {
    return getTabIdByPanelValueOrIndex(valueParam, index);
  }, [getTabIdByPanelValueOrIndex, index, valueParam]);
  const getRootProps = React.useCallback((externalProps = {}) => {
    return (0, _mergeProps.mergeProps)({
      'aria-labelledby': correspondingTabId,
      hidden,
      id: id ?? undefined,
      role: 'tabpanel',
      tabIndex: hidden ? -1 : 0,
      ref: handleRef,
      ['data-index']: index
    }, externalProps);
  }, [correspondingTabId, handleRef, hidden, id, index]);
  return {
    hidden,
    getRootProps,
    rootRef: handleRef
  };
}