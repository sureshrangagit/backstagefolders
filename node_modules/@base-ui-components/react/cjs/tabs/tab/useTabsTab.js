"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTabsTab = useTabsTab;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../../merge-props");
var _owner = require("../../utils/owner");
var _useEnhancedEffect = require("../../utils/useEnhancedEffect");
var _useForkRef = require("../../utils/useForkRef");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _useButton = require("../../use-button");
var _useCompositeItem = require("../../composite/item/useCompositeItem");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useTabsTab(parameters) {
  const {
    activateOnFocus,
    disabled = false,
    getTabPanelIdByTabValueOrIndex,
    highlightedTabIndex,
    id: idParam,
    onTabActivation,
    rootRef: externalRef,
    selectedTabValue,
    setHighlightedTabIndex,
    value: valueParam
  } = parameters;
  const id = (0, _useBaseUiId.useBaseUiId)(idParam);
  const tabMetadata = React.useMemo(() => ({
    disabled,
    id,
    value: valueParam
  }), [disabled, id, valueParam]);
  const {
    getItemProps,
    ref: compositeItemRef,
    index
    // hook is used instead of the CompositeItem component
    // because the index is needed for Tab internals
  } = (0, _useCompositeItem.useCompositeItem)({
    metadata: tabMetadata
  });
  const tabValue = valueParam ?? index;

  // the `selected` state isn't set on the server (it relies on effects to be calculated),
  // so we fall back to checking the `value` param with the selectedTabValue from the TabsContext
  const selected = React.useMemo(() => {
    if (valueParam === undefined) {
      return index < 0 ? false : index === selectedTabValue;
    }
    return valueParam === selectedTabValue;
  }, [index, selectedTabValue, valueParam]);
  const isSelectionSyncedWithHighlightRef = React.useRef(false);
  (0, _useEnhancedEffect.useEnhancedEffect)(() => {
    if (isSelectionSyncedWithHighlightRef.current === true) {
      return;
    }
    if (activateOnFocus && selected && index > -1 && highlightedTabIndex !== index) {
      setHighlightedTabIndex(index);
      isSelectionSyncedWithHighlightRef.current = true;
    }
  }, [activateOnFocus, highlightedTabIndex, index, selected, setHighlightedTabIndex]);
  const {
    getButtonProps,
    buttonRef
  } = (0, _useButton.useButton)({
    disabled,
    focusableWhenDisabled: true,
    type: 'button'
  });
  const handleRef = (0, _useForkRef.useForkRef)(compositeItemRef, buttonRef, externalRef);
  const tabPanelId = index > -1 ? getTabPanelIdByTabValueOrIndex(valueParam, index) : undefined;
  const isPressingRef = React.useRef(false);
  const isMainButtonRef = React.useRef(false);
  const getRootProps = React.useCallback((externalProps = {}) => {
    return (0, _mergeProps.mergeProps)({
      role: 'tab',
      'aria-controls': tabPanelId,
      'aria-selected': selected,
      id,
      ref: handleRef,
      onClick(event) {
        if (selected || disabled) {
          return;
        }
        onTabActivation(tabValue, event.nativeEvent);
      },
      onFocus(event) {
        if (selected) {
          return;
        }
        if (index > 1 && index !== highlightedTabIndex) {
          setHighlightedTabIndex(index);
        }
        if (disabled) {
          return;
        }
        if (activateOnFocus && !isPressingRef.current ||
        // keyboard focus
        isPressingRef.current && isMainButtonRef.current // focus caused by pointerdown
        ) {
          onTabActivation(tabValue, event.nativeEvent);
        }
      },
      onPointerDown(event) {
        if (selected || disabled) {
          return;
        }
        isPressingRef.current = true;
        function handlePointerUp() {
          isPressingRef.current = false;
          isMainButtonRef.current = false;
        }
        if (!event.button || event.button === 0) {
          isMainButtonRef.current = true;
          const doc = (0, _owner.ownerDocument)(event.currentTarget);
          doc.addEventListener('pointerup', handlePointerUp, {
            once: true
          });
        }
      }
    }, externalProps, getButtonProps, getItemProps);
  }, [activateOnFocus, getButtonProps, getItemProps, handleRef, id, onTabActivation, selected, tabPanelId, tabValue, disabled, index, setHighlightedTabIndex, highlightedTabIndex]);
  return {
    getRootProps,
    index,
    rootRef: handleRef,
    selected
  };
}