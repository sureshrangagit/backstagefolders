"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useToggleGroup = useToggleGroup;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../merge-props");
var _useControlled = require("../utils/useControlled");
var _useEventCallback = require("../utils/useEventCallback");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useToggleGroup(parameters) {
  const {
    value,
    defaultValue,
    disabled,
    onValueChange,
    toggleMultiple
  } = parameters;
  const [groupValue, setValueState] = (0, _useControlled.useControlled)({
    controlled: value,
    default: defaultValue,
    name: 'ToggleGroup',
    state: 'value'
  });
  const setGroupValue = (0, _useEventCallback.useEventCallback)((newValue, nextPressed, event) => {
    let newGroupValue;
    if (toggleMultiple) {
      newGroupValue = groupValue.slice();
      if (nextPressed) {
        newGroupValue.push(newValue);
      } else {
        newGroupValue.splice(groupValue.indexOf(newValue), 1);
      }
    } else {
      newGroupValue = nextPressed ? [newValue] : [];
    }
    if (Array.isArray(newGroupValue)) {
      setValueState(newGroupValue);
      onValueChange?.(newGroupValue, event);
    }
  });
  const getRootProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    role: 'group'
  }, externalProps), []);
  return React.useMemo(() => ({
    getRootProps,
    disabled,
    setGroupValue,
    value: groupValue
  }), [getRootProps, disabled, groupValue, setGroupValue]);
}