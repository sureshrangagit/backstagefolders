"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CollapsibleRoot = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _noop = require("../../utils/noop");
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _useCollapsibleRoot = require("./useCollapsibleRoot");
var _CollapsibleRootContext = require("./CollapsibleRootContext");
var _styleHooks = require("./styleHooks");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Groups all parts of the collapsible.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Collapsible](https://base-ui.com/react/components/collapsible)
 */const CollapsibleRoot = exports.CollapsibleRoot = /*#__PURE__*/React.forwardRef(function CollapsibleRoot(props, forwardedRef) {
  const {
    children,
    className,
    defaultOpen = false,
    disabled = false,
    onOpenChange: onOpenChangeProp,
    open,
    render: renderProp,
    ...otherProps
  } = props;
  const collapsible = (0, _useCollapsibleRoot.useCollapsibleRoot)({
    open,
    defaultOpen,
    onOpenChange: onOpenChangeProp ?? _noop.NOOP,
    disabled
  });
  const state = React.useMemo(() => ({
    open: collapsible.open,
    disabled: collapsible.disabled,
    transitionStatus: collapsible.transitionStatus
  }), [collapsible.open, collapsible.disabled, collapsible.transitionStatus]);
  const contextValue = React.useMemo(() => ({
    ...collapsible,
    state
  }), [collapsible, state]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    render: renderProp ?? 'div',
    className,
    state,
    ref: forwardedRef,
    extraProps: {
      children,
      ...otherProps
    },
    customStyleHookMapping: _styleHooks.collapsibleStyleHookMapping
  });
  if (renderProp !== null) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_CollapsibleRootContext.CollapsibleRootContext.Provider, {
      value: contextValue,
      children: renderElement()
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_CollapsibleRootContext.CollapsibleRootContext.Provider, {
    value: contextValue,
    children: children
  });
});
process.env.NODE_ENV !== "production" ? CollapsibleRoot.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  /**
   * Whether the collapsible panel is initially open.
   *
   * To render a controlled collapsible, use the `open` prop instead.
   * @default false
   */
  defaultOpen: _propTypes.default.bool,
  /**
   * Whether the component should ignore user interaction.
   * @default false
   */
  disabled: _propTypes.default.bool,
  /**
   * Event handler called when the panel is opened or closed.
   */
  onOpenChange: _propTypes.default.func,
  /**
   * Whether the collapsible panel is currently open.
   *
   * To render an uncontrolled collapsible, use the `defaultOpen` prop instead.
   */
  open: _propTypes.default.bool,
  /**
   * @ignore
   */
  render: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func])
} : void 0;