"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewCardRoot = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _PreviewCardContext = require("./PreviewCardContext");
var _usePreviewCardRoot = require("./usePreviewCardRoot");
var _constants = require("../utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Groups all parts of the preview card.
 * Doesn’t render its own HTML element.
 *
 * Documentation: [Base UI Preview Card](https://base-ui.com/react/components/preview-card)
 */const PreviewCardRoot = exports.PreviewCardRoot = function PreviewCardRoot(props) {
  const {
    delay,
    closeDelay,
    onOpenChangeComplete,
    actionsRef
  } = props;
  const delayWithDefault = delay ?? _constants.OPEN_DELAY;
  const closeDelayWithDefault = closeDelay ?? _constants.CLOSE_DELAY;
  const previewCardRoot = (0, _usePreviewCardRoot.usePreviewCardRoot)({
    delay,
    closeDelay,
    actionsRef,
    onOpenChangeComplete,
    open: props.open,
    onOpenChange: props.onOpenChange,
    defaultOpen: props.defaultOpen
  });
  const contextValue = React.useMemo(() => ({
    ...previewCardRoot,
    delay: delayWithDefault,
    closeDelay: closeDelayWithDefault
  }), [closeDelayWithDefault, delayWithDefault, previewCardRoot]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_PreviewCardContext.PreviewCardRootContext.Provider, {
    value: contextValue,
    children: props.children
  });
};
process.env.NODE_ENV !== "production" ? PreviewCardRoot.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref to imperative actions.
   */
  actionsRef: _propTypes.default.shape({
    current: _propTypes.default.shape({
      unmount: _propTypes.default.func.isRequired
    }).isRequired
  }),
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * How long to wait before closing the preview card. Specified in milliseconds.
   * @default 300
   */
  closeDelay: _propTypes.default.number,
  /**
   * Whether the preview card is initially open.
   *
   * To render a controlled preview card, use the `open` prop instead.
   * @default false
   */
  defaultOpen: _propTypes.default.bool,
  /**
   * How long to wait before the preview card opens. Specified in milliseconds.
   * @default 600
   */
  delay: _propTypes.default.number,
  /**
   * Event handler called when the preview card is opened or closed.
   */
  onOpenChange: _propTypes.default.func,
  /**
   * Event handler called after any animations complete when the preview card is opened or closed.
   */
  onOpenChangeComplete: _propTypes.default.func,
  /**
   * Whether the preview card is currently open.
   */
  open: _propTypes.default.bool
} : void 0;