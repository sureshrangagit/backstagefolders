"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePopoverPopup = usePopoverPopup;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../../merge-props");
var _PopoverRootContext = require("../root/PopoverRootContext");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function usePopoverPopup(params) {
  const {
    getProps,
    titleId,
    descriptionId,
    initialFocus
  } = params;
  const {
    popupRef,
    openMethod
  } = (0, _PopoverRootContext.usePopoverRootContext)();
  const getPopupProps = React.useCallback((externalProps = {}) => {
    return (0, _mergeProps.mergeProps)({
      'aria-labelledby': titleId,
      'aria-describedby': descriptionId
    }, getProps(externalProps));
  }, [getProps, titleId, descriptionId]);

  // Default initial focus logic:
  // If opened by touch, focus the popup element to prevent the virtual keyboard from opening
  // (this is required for Android specifically as iOS handles this automatically).
  const defaultInitialFocus = React.useCallback(interactionType => {
    if (interactionType === 'touch') {
      return popupRef;
    }
    return 0;
  }, [popupRef]);
  const resolvedInitialFocus = React.useMemo(() => {
    if (initialFocus == null) {
      return defaultInitialFocus(openMethod ?? '');
    }
    if (typeof initialFocus === 'function') {
      return initialFocus(openMethod ?? '');
    }
    return initialFocus;
  }, [defaultInitialFocus, initialFocus, openMethod]);
  return React.useMemo(() => ({
    getPopupProps,
    resolvedInitialFocus
  }), [getPopupProps, resolvedInitialFocus]);
}