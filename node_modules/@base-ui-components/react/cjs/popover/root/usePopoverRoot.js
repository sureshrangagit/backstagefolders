"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePopoverRoot = usePopoverRoot;
var React = _interopRequireWildcard(require("react"));
var ReactDOM = _interopRequireWildcard(require("react-dom"));
var _react2 = require("@floating-ui/react");
var _useControlled = require("../../utils/useControlled");
var _useEventCallback = require("../../utils/useEventCallback");
var _useTransitionStatus = require("../../utils/useTransitionStatus");
var _constants = require("../utils/constants");
var _mergeProps = require("../../merge-props");
var _useOpenInteractionType = require("../../utils/useOpenInteractionType");
var _translateOpenChangeReason = require("../../utils/translateOpenChangeReason");
var _useOpenChangeComplete = require("../../utils/useOpenChangeComplete");
var _constants2 = require("../../utils/constants");
var _useScrollLock = require("../../utils/useScrollLock");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function usePopoverRoot(params) {
  const {
    open: externalOpen,
    onOpenChange: onOpenChangeProp,
    defaultOpen = false,
    delay,
    closeDelay,
    openOnHover = false,
    onOpenChangeComplete,
    modal
  } = params;
  const delayWithDefault = delay ?? _constants.OPEN_DELAY;
  const closeDelayWithDefault = closeDelay ?? 0;
  const [instantType, setInstantType] = React.useState();
  const [titleId, setTitleId] = React.useState();
  const [descriptionId, setDescriptionId] = React.useState();
  const [triggerElement, setTriggerElement] = React.useState(null);
  const [positionerElement, setPositionerElement] = React.useState(null);
  const [openReason, setOpenReason] = React.useState(null);
  const [stickIfOpen, setStickIfOpen] = React.useState(true);
  const popupRef = React.useRef(null);
  const stickIfOpenTimeoutRef = React.useRef(-1);
  const [open, setOpenUnwrapped] = (0, _useControlled.useControlled)({
    controlled: externalOpen,
    default: defaultOpen,
    name: 'Popover',
    state: 'open'
  });
  const onOpenChange = (0, _useEventCallback.useEventCallback)(onOpenChangeProp);
  const {
    mounted,
    setMounted,
    transitionStatus
  } = (0, _useTransitionStatus.useTransitionStatus)(open);
  (0, _useScrollLock.useScrollLock)(open && modal && openReason !== 'hover', triggerElement);
  const setOpen = (0, _useEventCallback.useEventCallback)((nextOpen, event, reason) => {
    onOpenChange(nextOpen, event, reason);
    setOpenUnwrapped(nextOpen);
    if (nextOpen) {
      setOpenReason(reason ?? null);
    }
  });
  const handleUnmount = (0, _useEventCallback.useEventCallback)(() => {
    setMounted(false);
    setStickIfOpen(true);
    setOpenReason(null);
    onOpenChangeComplete?.(false);
  });
  (0, _useOpenChangeComplete.useOpenChangeComplete)({
    enabled: !params.actionsRef,
    open,
    ref: popupRef,
    onComplete() {
      if (!open) {
        handleUnmount();
      }
    }
  });
  React.useImperativeHandle(params.actionsRef, () => ({
    unmount: handleUnmount
  }), [handleUnmount]);
  const clearStickIfOpenTimeout = (0, _useEventCallback.useEventCallback)(() => {
    clearTimeout(stickIfOpenTimeoutRef.current);
  });
  React.useEffect(() => {
    if (!open) {
      clearStickIfOpenTimeout();
    }
  }, [clearStickIfOpenTimeout, open]);
  React.useEffect(() => {
    return clearStickIfOpenTimeout;
  }, [clearStickIfOpenTimeout]);
  const context = (0, _react2.useFloatingRootContext)({
    elements: {
      reference: triggerElement,
      floating: positionerElement
    },
    open,
    onOpenChange(openValue, eventValue, reasonValue) {
      const isHover = reasonValue === 'hover' || reasonValue === 'safe-polygon';
      const isKeyboardClick = reasonValue === 'click' && eventValue.detail === 0;
      const isDismissClose = !openValue && (reasonValue === 'escape-key' || reasonValue == null);
      function changeState() {
        setOpen(openValue, eventValue, (0, _translateOpenChangeReason.translateOpenChangeReason)(reasonValue));
      }
      if (isHover) {
        // Only allow "patient" clicks to close the popover if it's open.
        // If they clicked within 500ms of the popover opening, keep it open.
        setStickIfOpen(true);
        clearStickIfOpenTimeout();
        stickIfOpenTimeoutRef.current = window.setTimeout(() => {
          setStickIfOpen(false);
        }, _constants2.PATIENT_CLICK_THRESHOLD);
        ReactDOM.flushSync(changeState);
      } else {
        changeState();
      }
      if (isKeyboardClick || isDismissClose) {
        setInstantType(isKeyboardClick ? 'click' : 'dismiss');
      } else {
        setInstantType(undefined);
      }
    }
  });
  const {
    openMethod,
    triggerProps
  } = (0, _useOpenInteractionType.useOpenInteractionType)(open);
  const computedRestMs = delayWithDefault;
  const hover = (0, _react2.useHover)(context, {
    enabled: openOnHover && (openMethod !== 'touch' || openReason !== 'click'),
    mouseOnly: true,
    move: false,
    handleClose: (0, _react2.safePolygon)({
      blockPointerEvents: true
    }),
    restMs: computedRestMs,
    delay: {
      close: closeDelayWithDefault
    }
  });
  const click = (0, _react2.useClick)(context, {
    stickIfOpen
  });
  const dismiss = (0, _react2.useDismiss)(context);
  const role = (0, _react2.useRole)(context);
  const {
    getReferenceProps,
    getFloatingProps
  } = (0, _react2.useInteractions)([hover, click, dismiss, role]);
  const getRootTriggerProps = React.useCallback((externalProps = {}) => getReferenceProps((0, _mergeProps.mergeProps)(triggerProps, externalProps)), [getReferenceProps, triggerProps]);
  return React.useMemo(() => ({
    open,
    setOpen,
    mounted,
    setMounted,
    transitionStatus,
    setTriggerElement,
    positionerElement,
    setPositionerElement,
    popupRef,
    titleId,
    setTitleId,
    descriptionId,
    setDescriptionId,
    getRootTriggerProps,
    getRootPopupProps: getFloatingProps,
    floatingRootContext: context,
    instantType,
    openMethod,
    openReason,
    onOpenChangeComplete
  }), [open, setOpen, mounted, setMounted, transitionStatus, positionerElement, titleId, descriptionId, getRootTriggerProps, getFloatingProps, context, instantType, openMethod, openReason, onOpenChangeComplete]);
}