"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PopoverTrigger = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _PopoverRootContext = require("../root/PopoverRootContext");
var _useButton = require("../../use-button/useButton");
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _useForkRef = require("../../utils/useForkRef");
var _popupStateMapping = require("../../utils/popupStateMapping");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * A button that opens the popover.
 * Renders a `<button>` element.
 *
 * Documentation: [Base UI Popover](https://base-ui.com/react/components/popover)
 */
const PopoverTrigger = exports.PopoverTrigger = /*#__PURE__*/React.forwardRef(function PopoverTrigger(props, forwardedRef) {
  const {
    render,
    className,
    disabled = false,
    ...otherProps
  } = props;
  const {
    mounted,
    setTriggerElement,
    getRootTriggerProps,
    openReason
  } = (0, _PopoverRootContext.usePopoverRootContext)();
  const state = React.useMemo(() => ({
    disabled,
    open: mounted
  }), [disabled, mounted]);
  const {
    getButtonProps,
    buttonRef
  } = (0, _useButton.useButton)({
    disabled,
    buttonRef: forwardedRef
  });
  const mergedRef = (0, _useForkRef.useForkRef)(buttonRef, setTriggerElement);
  const customStyleHookMapping = React.useMemo(() => ({
    open(value) {
      if (value && openReason === 'click') {
        return _popupStateMapping.pressableTriggerOpenStateMapping.open(value);
      }
      return _popupStateMapping.triggerOpenStateMapping.open(value);
    }
  }), [openReason]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    propGetter: externalProps => getButtonProps(getRootTriggerProps(externalProps)),
    render: render ?? 'button',
    className,
    state,
    ref: mergedRef,
    extraProps: otherProps,
    customStyleHookMapping
  });
  return renderElement();
});
process.env.NODE_ENV !== "production" ? PopoverTrigger.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  /**
   * @ignore
   */
  disabled: _propTypes.default.bool,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func])
} : void 0;