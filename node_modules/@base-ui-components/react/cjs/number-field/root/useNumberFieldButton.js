"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNumberFieldButton = useNumberFieldButton;
var React = _interopRequireWildcard(require("react"));
var _constants = require("../utils/constants");
var _mergeProps = require("../../merge-props");
var _parse = require("../utils/parse");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useNumberFieldButton(params) {
  const {
    inputRef,
    startAutoChange,
    stopAutoChange,
    minWithDefault,
    maxWithDefault,
    value,
    inputValue,
    disabled,
    readOnly,
    id,
    setValue,
    getStepAmount,
    incrementValue,
    allowInputSyncRef,
    formatOptionsRef,
    valueRef,
    movesAfterTouchRef,
    intentionalTouchCheckTimeoutRef,
    isPressedRef,
    locale
  } = params;
  const incrementDownCoordsRef = React.useRef({
    x: 0,
    y: 0
  });
  const isTouchingButtonRef = React.useRef(false);
  const ignoreClickRef = React.useRef(false);
  const pointerTypeRef = React.useRef('');
  const isMin = value != null && value <= minWithDefault;
  const isMax = value != null && value >= maxWithDefault;
  const getCommonButtonProps = React.useCallback((isIncrement, externalProps = {}) => {
    function commitValue(nativeEvent) {
      allowInputSyncRef.current = true;

      // The input may be dirty but not yet blurred, so the value won't have been committed.
      const parsedValue = (0, _parse.parseNumber)(inputValue, locale, formatOptionsRef.current);
      if (parsedValue !== null) {
        // The increment value function needs to know the current input value to increment it
        // correctly.
        valueRef.current = parsedValue;
        setValue(parsedValue, nativeEvent);
      }
    }
    return (0, _mergeProps.mergeProps)({
      disabled: disabled || (isIncrement ? isMax : isMin),
      type: 'button',
      'aria-readonly': readOnly || undefined,
      'aria-label': isIncrement ? 'Increase' : 'Decrease',
      'aria-controls': id,
      // Keyboard users shouldn't have access to the buttons, since they can use the input element
      // to change the value. On the other hand, `aria-hidden` is not applied because touch screen
      // readers should be able to use the buttons.
      tabIndex: -1,
      style: {
        WebkitUserSelect: 'none',
        userSelect: 'none'
      },
      onTouchStart() {
        isTouchingButtonRef.current = true;
      },
      onTouchEnd() {
        isTouchingButtonRef.current = false;
      },
      onClick(event) {
        const isDisabled = disabled || readOnly || (isIncrement ? isMax : isMin);
        if (event.defaultPrevented || isDisabled || (
        // If it's not a keyboard/virtual click, ignore.
        pointerTypeRef.current === 'touch' ? ignoreClickRef.current : event.detail !== 0)) {
          return;
        }
        commitValue(event.nativeEvent);
        const amount = getStepAmount(event) ?? _constants.DEFAULT_STEP;
        incrementValue(amount, isIncrement ? 1 : -1, undefined, event.nativeEvent);
      },
      onPointerDown(event) {
        const isMainButton = !event.button || event.button === 0;
        const isDisabled = disabled || (isIncrement ? isMax : isMin);
        if (event.defaultPrevented || readOnly || !isMainButton || isDisabled) {
          return;
        }
        pointerTypeRef.current = event.pointerType;
        ignoreClickRef.current = false;
        isPressedRef.current = true;
        incrementDownCoordsRef.current = {
          x: event.clientX,
          y: event.clientY
        };
        commitValue(event.nativeEvent);

        // Note: "pen" is sometimes returned for mouse usage on Linux Chrome.
        if (event.pointerType !== 'touch') {
          event.preventDefault();
          inputRef.current?.focus();
          startAutoChange(isIncrement, event);
        } else {
          // We need to check if the pointerdown was intentional, and not the result of a scroll
          // or pinch-zoom. In that case, we don't want to change the value.
          intentionalTouchCheckTimeoutRef.current = window.setTimeout(() => {
            const moves = movesAfterTouchRef.current;
            movesAfterTouchRef.current = 0;
            if (moves != null && moves < _constants.MAX_POINTER_MOVES_AFTER_TOUCH) {
              ignoreClickRef.current = true;
              startAutoChange(isIncrement, event);
            } else {
              stopAutoChange();
            }
          }, _constants.TOUCH_TIMEOUT);
        }
      },
      onPointerMove(event) {
        const isDisabled = disabled || readOnly || (isIncrement ? isMax : isMin);
        if (isDisabled || event.pointerType !== 'touch' || !isPressedRef.current) {
          return;
        }
        if (movesAfterTouchRef.current != null) {
          movesAfterTouchRef.current += 1;
        }
        const {
          x,
          y
        } = incrementDownCoordsRef.current;
        const dx = x - event.clientX;
        const dy = y - event.clientY;

        // An alternative to this technique is to detect when the NumberField's parent container
        // has been scrolled
        if (dx ** 2 + dy ** 2 > _constants.SCROLLING_POINTER_MOVE_DISTANCE ** 2) {
          stopAutoChange();
        }
      },
      onMouseEnter(event) {
        const isDisabled = disabled || readOnly || (isIncrement ? isMax : isMin);
        if (event.defaultPrevented || isDisabled || !isPressedRef.current || isTouchingButtonRef.current) {
          return;
        }
        startAutoChange(isIncrement, event);
      },
      onMouseLeave() {
        if (isTouchingButtonRef.current) {
          return;
        }
        stopAutoChange();
      },
      onMouseUp() {
        if (isTouchingButtonRef.current) {
          return;
        }
        stopAutoChange();
      }
    }, externalProps);
  }, [allowInputSyncRef, disabled, formatOptionsRef, getStepAmount, id, incrementValue, inputRef, inputValue, intentionalTouchCheckTimeoutRef, isMax, isMin, isPressedRef, locale, movesAfterTouchRef, readOnly, setValue, startAutoChange, stopAutoChange, valueRef]);
  return React.useMemo(() => ({
    getCommonButtonProps
  }), [getCommonButtonProps]);
}