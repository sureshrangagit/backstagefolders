import * as React from 'react';
import type { EventWithOptionalKeyState } from '../utils/types.js';
/**
 * @ignore - internal hook.
 */
export declare function useScrub(params: useScrub.Parameters): {
    isScrubbing: boolean;
    isTouchInput: boolean;
    isPointerLockDenied: boolean;
    getScrubAreaProps: (externalProps?: React.ComponentPropsWithRef<"span">) => React.ComponentPropsWithRef<"span">;
    scrubAreaCursorRef: React.RefObject<HTMLSpanElement | null>;
    scrubAreaRef: React.RefObject<HTMLSpanElement | null>;
    scrubHandleRef: React.RefObject<ScrubHandle | null>;
};
export interface ScrubHandle {
    direction: 'horizontal' | 'vertical';
    pixelSensitivity: number;
    teleportDistance: number | undefined;
}
export declare namespace useScrub {
    interface Parameters {
        disabled: boolean;
        readOnly: boolean;
        value: number | null;
        inputRef: React.RefObject<HTMLInputElement | null>;
        incrementValue: (amount: number, dir: 1 | -1, currentValue?: number | null) => void;
        getStepAmount: (event?: EventWithOptionalKeyState) => number | undefined;
    }
}
