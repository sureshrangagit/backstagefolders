"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccordionItem = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useForkRef = require("../../utils/useForkRef");
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _useEventCallback = require("../../utils/useEventCallback");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _useCollapsibleRoot = require("../../collapsible/root/useCollapsibleRoot");
var _CollapsibleRootContext = require("../../collapsible/root/CollapsibleRootContext");
var _useCompositeListItem = require("../../composite/list/useCompositeListItem");
var _AccordionRootContext = require("../root/AccordionRootContext");
var _AccordionItemContext = require("./AccordionItemContext");
var _styleHooks = require("./styleHooks");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Groups an accordion header with the corresponding panel.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Accordion](https://base-ui.com/react/components/accordion)
 */const AccordionItem = exports.AccordionItem = /*#__PURE__*/React.forwardRef(function AccordionItem(props, forwardedRef) {
  const {
    className,
    disabled: disabledProp = false,
    onOpenChange: onOpenChangeProp,
    render,
    value: valueProp,
    ...other
  } = props;
  const {
    ref: listItemRef,
    index
  } = (0, _useCompositeListItem.useCompositeListItem)();
  const mergedRef = (0, _useForkRef.useForkRef)(forwardedRef, listItemRef);
  const {
    disabled: contextDisabled,
    handleValueChange,
    state: rootState,
    value: openValues
  } = (0, _AccordionRootContext.useAccordionRootContext)();
  const value = valueProp ?? index;
  const disabled = disabledProp || contextDisabled;
  const isOpen = React.useMemo(() => {
    if (!openValues) {
      return false;
    }
    for (let i = 0; i < openValues.length; i += 1) {
      if (openValues[i] === value) {
        return true;
      }
    }
    return false;
  }, [openValues, value]);
  const onOpenChange = (0, _useEventCallback.useEventCallback)(nextOpen => {
    handleValueChange(value, nextOpen);
    onOpenChangeProp?.(nextOpen);
  });
  const collapsible = (0, _useCollapsibleRoot.useCollapsibleRoot)({
    open: isOpen,
    onOpenChange,
    disabled
  });
  const collapsibleState = React.useMemo(() => ({
    open: collapsible.open,
    disabled: collapsible.disabled,
    hidden: !collapsible.mounted,
    transitionStatus: collapsible.transitionStatus
  }), [collapsible.open, collapsible.disabled, collapsible.mounted, collapsible.transitionStatus]);
  const collapsibleContext = React.useMemo(() => ({
    ...collapsible,
    state: collapsibleState
  }), [collapsible, collapsibleState]);
  const state = React.useMemo(() => ({
    ...rootState,
    index,
    disabled,
    open: isOpen,
    transitionStatus: collapsible.transitionStatus
  }), [collapsible.transitionStatus, disabled, index, isOpen, rootState]);
  const [triggerId, setTriggerId] = React.useState((0, _useBaseUiId.useBaseUiId)());
  const accordionItemContext = React.useMemo(() => ({
    open: isOpen,
    state,
    setTriggerId,
    triggerId
  }), [isOpen, state, setTriggerId, triggerId]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    render: render ?? 'div',
    className,
    state,
    ref: mergedRef,
    extraProps: other,
    customStyleHookMapping: _styleHooks.accordionStyleHookMapping
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_CollapsibleRootContext.CollapsibleRootContext.Provider, {
    value: collapsibleContext,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AccordionItemContext.AccordionItemContext.Provider, {
      value: accordionItemContext,
      children: renderElement()
    })
  });
});
process.env.NODE_ENV !== "production" ? AccordionItem.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  /**
   * Whether the component should ignore user interaction.
   * @default false
   */
  disabled: _propTypes.default.bool,
  /**
   * Event handler called when the panel is opened or closed.
   */
  onOpenChange: _propTypes.default.func,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),
  /**
   * @ignore
   */
  value: _propTypes.default.any
} : void 0;