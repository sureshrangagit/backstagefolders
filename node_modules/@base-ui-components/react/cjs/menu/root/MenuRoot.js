"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuRoot = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react2 = require("@floating-ui/react");
var _DirectionContext = require("../../direction-provider/DirectionContext");
var _MenuRootContext = require("./MenuRootContext");
var _useMenuRoot = require("./useMenuRoot");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Groups all parts of the menu.
 * Doesn’t render its own HTML element.
 *
 * Documentation: [Base UI Menu](https://base-ui.com/react/components/menu)
 */
const MenuRoot = exports.MenuRoot = function MenuRoot(props) {
  const {
    children,
    defaultOpen = false,
    disabled = false,
    closeParentOnEsc = true,
    loop = true,
    modal = true,
    onOpenChange,
    open,
    orientation = 'vertical',
    delay = 100,
    openOnHover: openOnHoverProp,
    actionsRef,
    onOpenChangeComplete
  } = props;
  const direction = (0, _DirectionContext.useDirection)();
  const parentContext = (0, _MenuRootContext.useMenuRootContext)(true);
  const nested = parentContext != null;
  const openOnHover = openOnHoverProp ?? nested;
  const typingRef = React.useRef(false);
  const onTypingChange = React.useCallback(nextTyping => {
    typingRef.current = nextTyping;
  }, []);
  const menuRoot = (0, _useMenuRoot.useMenuRoot)({
    direction,
    disabled,
    closeParentOnEsc,
    onOpenChange,
    loop,
    defaultOpen,
    open,
    orientation,
    nested,
    openOnHover,
    delay,
    onTypingChange,
    modal,
    actionsRef,
    onOpenChangeComplete
  });
  const context = React.useMemo(() => ({
    ...menuRoot,
    nested,
    parentContext,
    disabled,
    allowMouseUpTriggerRef: parentContext?.allowMouseUpTriggerRef ?? menuRoot.allowMouseUpTriggerRef,
    typingRef,
    modal
  }), [menuRoot, nested, parentContext, disabled, modal]);
  if (!nested) {
    // set up a FloatingTree to provide the context to nested menus
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_react2.FloatingTree, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MenuRootContext.MenuRootContext.Provider, {
        value: context,
        children: children
      })
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MenuRootContext.MenuRootContext.Provider, {
    value: context,
    children: children
  });
};
process.env.NODE_ENV !== "production" ? MenuRoot.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref to imperative actions.
   */
  actionsRef: _propTypes.default.shape({
    current: _propTypes.default.shape({
      unmount: _propTypes.default.func.isRequired
    }).isRequired
  }),
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * When in a submenu, determines whether pressing the Escape key
   * closes the entire menu, or only the current child menu.
   * @default true
   */
  closeParentOnEsc: _propTypes.default.bool,
  /**
   * Whether the menu is initially open.
   *
   * To render a controlled menu, use the `open` prop instead.
   * @default false
   */
  defaultOpen: _propTypes.default.bool,
  /**
   * How long to wait before the menu may be opened on hover. Specified in milliseconds.
   *
   * Requires the `openOnHover` prop.
   * @default 100
   */
  delay: _propTypes.default.number,
  /**
   * Whether the component should ignore user interaction.
   * @default false
   */
  disabled: _propTypes.default.bool,
  /**
   * Whether to loop keyboard focus back to the first item
   * when the end of the list is reached while using the arrow keys.
   * @default true
   */
  loop: _propTypes.default.bool,
  /**
   * Whether the menu should prevent outside clicks and lock page scroll when open.
   * @default true
   */
  modal: _propTypes.default.bool,
  /**
   * Event handler called when the menu is opened or closed.
   */
  onOpenChange: _propTypes.default.func,
  /**
   * Event handler called after any animations complete when the menu is closed.
   */
  onOpenChangeComplete: _propTypes.default.func,
  /**
   * Whether the menu is currently open.
   */
  open: _propTypes.default.bool,
  /**
   * Whether the menu should also open when the trigger is hovered.
   *
   * Defaults to `true` for nested menus.
   */
  openOnHover: _propTypes.default.bool,
  /**
   * The visual orientation of the menu.
   * Controls whether roving focus uses up/down or left/right arrow keys.
   * @default 'vertical'
   */
  orientation: _propTypes.default.oneOf(['horizontal', 'vertical'])
} : void 0;