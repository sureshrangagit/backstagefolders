"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMenuItem = useMenuItem;
var React = _interopRequireWildcard(require("react"));
var _useButton = require("../../use-button");
var _mergeProps = require("../../merge-props");
var _useForkRef = require("../../utils/useForkRef");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useMenuItem(params) {
  const {
    closeOnClick,
    disabled = false,
    highlighted,
    id,
    menuEvents,
    ref: externalRef,
    allowMouseUpTriggerRef,
    typingRef
  } = params;
  const itemRef = React.useRef(null);
  const {
    getButtonProps,
    buttonRef: mergedRef
  } = (0, _useButton.useButton)({
    disabled,
    focusableWhenDisabled: true,
    buttonRef: (0, _useForkRef.useForkRef)(externalRef, itemRef)
  });
  const getItemProps = React.useCallback(externalProps => {
    return (0, _mergeProps.mergeProps)({
      id,
      role: 'menuitem',
      tabIndex: highlighted ? 0 : -1,
      onKeyUp: event => {
        if (event.key === ' ' && typingRef.current) {
          event.preventBaseUIHandler();
        }
      },
      onClick: event => {
        if (closeOnClick) {
          menuEvents.emit('close', event);
        }
      },
      onMouseUp: event => {
        if (itemRef.current && allowMouseUpTriggerRef.current) {
          // This fires whenever the user clicks on the trigger, moves the cursor, and releases it over the item.
          // We trigger the click and override the `closeOnClick` preference to always close the menu.
          itemRef.current.click();
          menuEvents.emit('close', event);
        }
      }
    }, externalProps, getButtonProps);
  }, [getButtonProps, id, highlighted, typingRef, closeOnClick, menuEvents, allowMouseUpTriggerRef]);
  return React.useMemo(() => ({
    getItemProps,
    rootRef: mergedRef
  }), [getItemProps, mergedRef]);
}