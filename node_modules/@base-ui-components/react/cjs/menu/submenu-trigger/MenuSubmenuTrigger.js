"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuSubmenuTrigger = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react2 = require("@floating-ui/react");
var _MenuRootContext = require("../root/MenuRootContext");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _useMenuSubmenuTrigger = require("./useMenuSubmenuTrigger");
var _useForkRef = require("../../utils/useForkRef");
var _popupStateMapping = require("../../utils/popupStateMapping");
var _useCompositeListItem = require("../../composite/list/useCompositeListItem");
var _mergeProps = require("../../merge-props");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * A menu item that opens a submenu.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Menu](https://base-ui.com/react/components/menu)
 */
const MenuSubmenuTrigger = exports.MenuSubmenuTrigger = /*#__PURE__*/React.forwardRef(function SubmenuTriggerComponent(props, forwardedRef) {
  const {
    render,
    className,
    label,
    id: idProp,
    ...other
  } = props;
  const id = (0, _useBaseUiId.useBaseUiId)(idProp);
  const {
    triggerProps: rootTriggerProps,
    parentContext,
    setTriggerElement,
    allowMouseUpTriggerRef,
    open,
    typingRef,
    disabled
  } = (0, _MenuRootContext.useMenuRootContext)();
  if (parentContext === undefined) {
    throw new Error('Base UI: ItemTrigger must be placed in a nested Menu.');
  }
  const {
    activeIndex,
    itemProps
  } = parentContext;
  const item = (0, _useCompositeListItem.useCompositeListItem)();
  const highlighted = activeIndex === item.index;
  const mergedRef = (0, _useForkRef.useForkRef)(forwardedRef, item.ref);
  const {
    events: menuEvents
  } = (0, _react2.useFloatingTree)();
  const {
    getTriggerProps
  } = (0, _useMenuSubmenuTrigger.useMenuSubmenuTrigger)({
    id,
    highlighted,
    ref: mergedRef,
    disabled,
    menuEvents,
    setTriggerElement,
    allowMouseUpTriggerRef,
    typingRef
  });
  const state = React.useMemo(() => ({
    disabled,
    highlighted,
    open
  }), [disabled, highlighted, open]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    render: render || 'div',
    className,
    state,
    propGetter: externalProps => (0, _mergeProps.mergeProps)(rootTriggerProps, itemProps, externalProps, getTriggerProps),
    customStyleHookMapping: _popupStateMapping.triggerOpenStateMapping,
    extraProps: other
  });
  return renderElement();
});
process.env.NODE_ENV !== "production" ? MenuSubmenuTrigger.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  /**
   * @ignore
   */
  id: _propTypes.default.string,
  /**
   * Overrides the text label to use when the item is matched during keyboard text navigation.
   */
  label: _propTypes.default.string,
  /**
   * @ignore
   */
  onClick: _propTypes.default.func,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func])
} : void 0;