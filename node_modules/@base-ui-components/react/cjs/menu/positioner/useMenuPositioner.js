"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMenuPositioner = useMenuPositioner;
var React = _interopRequireWildcard(require("react"));
var _react2 = require("@floating-ui/react");
var _useAnchorPositioning = require("../../utils/useAnchorPositioning");
var _MenuRootContext = require("../root/MenuRootContext");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useMenuPositioner(params) {
  const {
    nodeId,
    parentNodeId
  } = params;
  const {
    open,
    setOpen,
    mounted,
    setHoverEnabled
  } = (0, _MenuRootContext.useMenuRootContext)();
  const positioning = (0, _useAnchorPositioning.useAnchorPositioning)(params);
  const {
    events: menuEvents
  } = (0, _react2.useFloatingTree)();
  const positionerProps = React.useMemo(() => {
    const hiddenStyles = {};
    if (!open) {
      hiddenStyles.pointerEvents = 'none';
    }
    return {
      role: 'presentation',
      hidden: !mounted,
      style: {
        ...positioning.positionerStyles,
        ...hiddenStyles
      }
    };
  }, [open, mounted, positioning.positionerStyles]);
  React.useEffect(() => {
    function onMenuOpenChange(event) {
      if (event.open) {
        if (event.parentNodeId === nodeId) {
          setHoverEnabled(false);
        }
        if (event.nodeId !== nodeId && event.parentNodeId === parentNodeId) {
          setOpen(false, undefined);
        }
      } else if (event.parentNodeId === nodeId) {
        setHoverEnabled(true);
      }
    }
    menuEvents.on('openchange', onMenuOpenChange);
    return () => {
      menuEvents.off('openchange', onMenuOpenChange);
    };
  }, [menuEvents, nodeId, parentNodeId, setOpen, setHoverEnabled]);
  React.useEffect(() => {
    menuEvents.emit('openchange', {
      open,
      nodeId,
      parentNodeId
    });
  }, [menuEvents, open, nodeId, parentNodeId]);
  return React.useMemo(() => ({
    ...positioning,
    positionerProps
  }), [positioning, positionerProps]);
}