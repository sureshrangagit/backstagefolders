"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMenuCheckboxItem = useMenuCheckboxItem;
var React = _interopRequireWildcard(require("react"));
var _useMenuItem = require("../item/useMenuItem");
var _useControlled = require("../../utils/useControlled");
var _mergeProps = require("../../merge-props");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useMenuCheckboxItem(params) {
  const {
    checked: checkedProp,
    defaultChecked,
    onCheckedChange,
    ...other
  } = params;
  const [checked, setChecked] = (0, _useControlled.useControlled)({
    controlled: checkedProp,
    default: defaultChecked ?? false,
    name: 'MenuCheckboxItem',
    state: 'checked'
  });
  const {
    getItemProps: getMenuItemProps,
    ...menuItem
  } = (0, _useMenuItem.useMenuItem)(other);
  const getItemProps = React.useCallback(externalProps => {
    return (0, _mergeProps.mergeProps)({
      role: 'menuitemcheckbox',
      'aria-checked': checked,
      onClick: event => {
        setChecked(currentlyChecked => !currentlyChecked);
        onCheckedChange?.(!checked, event.nativeEvent);
      }
    }, externalProps, getMenuItemProps);
  }, [checked, getMenuItemProps, onCheckedChange, setChecked]);
  return React.useMemo(() => ({
    ...menuItem,
    getItemProps,
    checked
  }), [checked, getItemProps, menuItem]);
}