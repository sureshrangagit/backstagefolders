"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useField = useField;
var ReactDOM = _interopRequireWildcard(require("react-dom"));
var _useEnhancedEffect = require("../utils/useEnhancedEffect");
var _getCombinedFieldValidityData = require("./utils/getCombinedFieldValidityData");
var _FormContext = require("../form/FormContext");
var _FieldRootContext = require("./root/FieldRootContext");
var _useLatestRef = require("../utils/useLatestRef");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useField(params) {
  const {
    formRef
  } = (0, _FormContext.useFormContext)();
  const {
    invalid,
    markedDirtyRef,
    validityData,
    setValidityData
  } = (0, _FieldRootContext.useFieldRootContext)();
  const {
    value,
    id,
    controlRef,
    commitValidation
  } = params;
  const getValueRef = (0, _useLatestRef.useLatestRef)(params.getValue);
  (0, _useEnhancedEffect.useEnhancedEffect)(() => {
    let initialValue = value;
    if (initialValue === undefined) {
      initialValue = getValueRef.current?.();
    }
    if (validityData.initialValue === null && initialValue !== validityData.initialValue) {
      setValidityData(prev => ({
        ...prev,
        initialValue
      }));
    }
  }, [setValidityData, value, validityData.initialValue, getValueRef]);
  (0, _useEnhancedEffect.useEnhancedEffect)(() => {
    if (id) {
      formRef.current.fields.set(id, {
        controlRef,
        validityData: (0, _getCombinedFieldValidityData.getCombinedFieldValidityData)(validityData, invalid),
        validate() {
          let nextValue = value;
          if (nextValue === undefined) {
            nextValue = getValueRef.current?.();
          }
          markedDirtyRef.current = true;
          // Synchronously update the validity state so the submit event can be prevented.
          ReactDOM.flushSync(() => commitValidation(nextValue));
        }
      });
    }
  }, [commitValidation, controlRef, formRef, getValueRef, id, invalid, markedDirtyRef, validityData, value]);
}