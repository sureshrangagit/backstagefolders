"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFieldLabel = useFieldLabel;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../../merge-props");
var _FieldRootContext = require("../root/FieldRootContext");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useFieldLabel() {
  const {
    controlId,
    labelId
  } = (0, _FieldRootContext.useFieldRootContext)();
  const getLabelProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    id: labelId,
    htmlFor: controlId,
    onMouseDown(event) {
      const selection = window.getSelection();

      // If text is selected elsewhere on the document when clicking the label, it will not
      // activate. Ensure the selection is not the label text so that selection remains.
      if (selection && !selection.anchorNode?.contains(event.currentTarget)) {
        selection.empty();
      }
      event.preventDefault();
    }
  }, externalProps), [controlId, labelId]);
  return React.useMemo(() => ({
    getLabelProps
  }), [getLabelProps]);
}