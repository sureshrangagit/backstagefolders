"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFieldControl = useFieldControl;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../../merge-props");
var _useEnhancedEffect = require("../../utils/useEnhancedEffect");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _FieldRootContext = require("../root/FieldRootContext");
var _useFieldControlValidation = require("./useFieldControlValidation");
var _FormContext = require("../../form/FormContext");
var _useField = require("../useField");
var _useControlled = require("../../utils/useControlled");
var _useEventCallback = require("../../utils/useEventCallback");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useFieldControl(params) {
  const {
    id: idProp,
    name,
    value: valueProp,
    defaultValue,
    onValueChange,
    disabled
  } = params;
  const {
    setControlId,
    labelId,
    setTouched,
    setDirty,
    validityData,
    setFocused,
    setFilled,
    validationMode
  } = (0, _FieldRootContext.useFieldRootContext)();
  const {
    errors,
    onClearErrors
  } = (0, _FormContext.useFormContext)();
  const {
    getValidationProps,
    getInputValidationProps,
    commitValidation,
    inputRef
  } = (0, _useFieldControlValidation.useFieldControlValidation)();
  const id = (0, _useBaseUiId.useBaseUiId)(idProp);
  (0, _useEnhancedEffect.useEnhancedEffect)(() => {
    setControlId(id);
    return () => {
      setControlId(undefined);
    };
  }, [id, setControlId]);
  (0, _useEnhancedEffect.useEnhancedEffect)(() => {
    const hasExternalValue = valueProp != null;
    if (inputRef.current?.value || hasExternalValue && valueProp !== '') {
      setFilled(true);
    } else if (hasExternalValue && valueProp === '') {
      setFilled(false);
    }
  }, [inputRef, setFilled, valueProp]);
  const [value, setValueUnwrapped] = (0, _useControlled.useControlled)({
    controlled: valueProp,
    default: defaultValue,
    name: 'FieldControl',
    state: 'value'
  });
  const setValue = (0, _useEventCallback.useEventCallback)((nextValue, event) => {
    setValueUnwrapped(nextValue);
    onValueChange?.(nextValue, event);
  });
  (0, _useField.useField)({
    id,
    commitValidation,
    value,
    getValue: () => inputRef.current?.value,
    controlRef: inputRef
  });
  const getControlProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    id,
    disabled,
    name,
    ref: inputRef,
    'aria-labelledby': labelId,
    value,
    onChange(event) {
      if (value != null) {
        setValue(event.currentTarget.value, event.nativeEvent);
      }
      setDirty(event.currentTarget.value !== validityData.initialValue);
      setFilled(event.currentTarget.value !== '');
      if (name && {}.hasOwnProperty.call(errors, name)) {
        const nextErrors = {
          ...errors
        };
        delete nextErrors[name];
        onClearErrors(nextErrors);
      }
    },
    onFocus() {
      setFocused(true);
    },
    onBlur(event) {
      setTouched(true);
      setFocused(false);
      if (validationMode === 'onBlur') {
        commitValidation(event.currentTarget.value);
      }
    },
    onKeyDown(event) {
      if (event.currentTarget.tagName === 'INPUT' && event.key === 'Enter') {
        setTouched(true);
        commitValidation(event.currentTarget.value);
      }
    }
  }, getValidationProps(getInputValidationProps(externalProps))), [getValidationProps, getInputValidationProps, id, disabled, name, inputRef, labelId, value, setDirty, validityData.initialValue, setFilled, errors, setValue, onClearErrors, setFocused, setTouched, validationMode, commitValidation]);
  return React.useMemo(() => ({
    getControlProps
  }), [getControlProps]);
}