"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCheckboxGroup = useCheckboxGroup;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../merge-props");
var _useControlled = require("../utils/useControlled");
var _useEventCallback = require("../utils/useEventCallback");
var _useCheckboxGroupParent = require("./useCheckboxGroupParent");
var _FieldRootContext = require("../field/root/FieldRootContext");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useCheckboxGroup(params) {
  const {
    allValues,
    value: externalValue,
    defaultValue,
    onValueChange
  } = params;
  const {
    labelId
  } = (0, _FieldRootContext.useFieldRootContext)();
  const [value, setValueUnwrapped] = (0, _useControlled.useControlled)({
    controlled: externalValue,
    default: defaultValue,
    name: 'CheckboxGroup',
    state: 'value'
  });
  const setValue = (0, _useEventCallback.useEventCallback)((v, event) => {
    setValueUnwrapped(v);
    onValueChange?.(v, event);
  });
  const parent = (0, _useCheckboxGroupParent.useCheckboxGroupParent)({
    allValues,
    value: externalValue,
    onValueChange
  });
  const getRootProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    role: 'group',
    'aria-labelledby': labelId
  }, externalProps), [labelId]);
  return React.useMemo(() => ({
    getRootProps,
    value,
    setValue,
    parent
  }), [getRootProps, value, setValue, parent]);
}