"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCheckboxRoot = useCheckboxRoot;
var React = _interopRequireWildcard(require("react"));
var _useControlled = require("../../utils/useControlled");
var _visuallyHidden = require("../../utils/visuallyHidden");
var _useForkRef = require("../../utils/useForkRef");
var _mergeProps = require("../../merge-props");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _useEventCallback = require("../../utils/useEventCallback");
var _useEnhancedEffect = require("../../utils/useEnhancedEffect");
var _FieldRootContext = require("../../field/root/FieldRootContext");
var _useFieldControlValidation = require("../../field/control/useFieldControlValidation");
var _useField = require("../../field/useField");
var _CheckboxGroupContext = require("../../checkbox-group/CheckboxGroupContext");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useCheckboxRoot(params) {
  const {
    id: idProp,
    checked: externalChecked,
    inputRef: externalInputRef,
    onCheckedChange: onCheckedChangeProp,
    name,
    value,
    defaultChecked = false,
    readOnly = false,
    required = false,
    autoFocus = false,
    indeterminate = false,
    disabled = false
  } = params;
  const groupContext = (0, _CheckboxGroupContext.useCheckboxGroupContext)();
  const groupValue = groupContext?.value;
  const setGroupValue = groupContext?.setValue;
  const defaultGroupValue = groupContext?.defaultValue;
  const [checked, setCheckedState] = (0, _useControlled.useControlled)({
    controlled: name && groupValue ? groupValue.includes(name) : externalChecked,
    default: name && defaultGroupValue ? defaultGroupValue.includes(name) : defaultChecked,
    name: 'Checkbox',
    state: 'checked'
  });
  const {
    labelId,
    setControlId,
    setTouched,
    setDirty,
    validityData,
    setFilled,
    setFocused,
    validationMode
  } = (0, _FieldRootContext.useFieldRootContext)();
  const buttonRef = React.useRef(null);
  const {
    getValidationProps,
    getInputValidationProps,
    inputRef: inputValidationRef,
    commitValidation
  } = (0, _useFieldControlValidation.useFieldControlValidation)();
  const onCheckedChange = (0, _useEventCallback.useEventCallback)(onCheckedChangeProp);
  const id = (0, _useBaseUiId.useBaseUiId)(idProp);
  (0, _useEnhancedEffect.useEnhancedEffect)(() => {
    setControlId(id);
    return () => {
      setControlId(undefined);
    };
  }, [id, setControlId]);
  (0, _useField.useField)({
    id,
    commitValidation,
    value: checked,
    controlRef: buttonRef
  });
  const inputRef = React.useRef(null);
  const mergedInputRef = (0, _useForkRef.useForkRef)(externalInputRef, inputRef, inputValidationRef);
  (0, _useEnhancedEffect.useEnhancedEffect)(() => {
    if (inputRef.current) {
      inputRef.current.indeterminate = indeterminate;
      if (checked) {
        setFilled(true);
      }
    }
  }, [checked, indeterminate, setFilled]);
  const getButtonProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    id,
    ref: buttonRef,
    type: 'button',
    role: 'checkbox',
    disabled,
    'aria-checked': indeterminate ? 'mixed' : checked,
    'aria-readonly': readOnly || undefined,
    'aria-labelledby': labelId,
    onFocus() {
      setFocused(true);
    },
    onBlur() {
      const element = inputRef.current;
      if (!element) {
        return;
      }
      setTouched(true);
      setFocused(false);
      if (validationMode === 'onBlur') {
        commitValidation(groupContext ? groupValue : element.checked);
      }
    },
    onClick(event) {
      if (event.defaultPrevented || readOnly) {
        return;
      }
      event.preventDefault();
      inputRef.current?.click();
    }
  }, getValidationProps(externalProps)), [getValidationProps, id, disabled, indeterminate, checked, readOnly, labelId, setFocused, setTouched, validationMode, commitValidation, groupContext, groupValue]);
  const getInputProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    checked,
    disabled,
    name,
    // React <19 sets an empty value if `undefined` is passed explicitly
    // To avoid this, we only set the value if it's defined
    ...(value !== undefined ? {
      value
    } : {}),
    required,
    autoFocus,
    ref: mergedInputRef,
    style: _visuallyHidden.visuallyHidden,
    tabIndex: -1,
    type: 'checkbox',
    'aria-hidden': true,
    onChange(event) {
      // Workaround for https://github.com/facebook/react/issues/9023
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const nextChecked = event.target.checked;
      setDirty(nextChecked !== validityData.initialValue);
      setCheckedState(nextChecked);
      onCheckedChange?.(nextChecked, event.nativeEvent);
      if (!groupContext) {
        setFilled(nextChecked);
        if (validationMode === 'onChange') {
          commitValidation(nextChecked);
        }
      }
      if (name && groupValue && setGroupValue) {
        const nextGroupValue = nextChecked ? [...groupValue, name] : groupValue.filter(item => item !== name);
        setGroupValue(nextGroupValue, event.nativeEvent);
        setFilled(nextGroupValue.length > 0);
        if (validationMode === 'onChange') {
          commitValidation(nextGroupValue);
        }
      }
    }
  }, getInputValidationProps(externalProps)), [getInputValidationProps, checked, disabled, name, value, required, autoFocus, mergedInputRef, groupContext, setDirty, validityData.initialValue, setCheckedState, onCheckedChange, validationMode, groupValue, setGroupValue, commitValidation, setFilled]);
  return React.useMemo(() => ({
    checked,
    getButtonProps,
    getInputProps
  }), [checked, getButtonProps, getInputProps]);
}