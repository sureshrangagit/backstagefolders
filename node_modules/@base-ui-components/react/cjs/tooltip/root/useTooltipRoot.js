"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTooltipRoot = useTooltipRoot;
var React = _interopRequireWildcard(require("react"));
var ReactDOM = _interopRequireWildcard(require("react-dom"));
var _react2 = require("@floating-ui/react");
var _useControlled = require("../../utils/useControlled");
var _useTransitionStatus = require("../../utils/useTransitionStatus");
var _useEventCallback = require("../../utils/useEventCallback");
var _constants = require("../utils/constants");
var _translateOpenChangeReason = require("../../utils/translateOpenChangeReason");
var _useOpenChangeComplete = require("../../utils/useOpenChangeComplete");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useTooltipRoot(params) {
  const {
    open: externalOpen,
    onOpenChange: onOpenChangeProp,
    defaultOpen = false,
    hoverable = true,
    trackCursorAxis = 'none',
    delay,
    closeDelay,
    onOpenChangeComplete
  } = params;
  const delayWithDefault = delay ?? _constants.OPEN_DELAY;
  const closeDelayWithDefault = closeDelay ?? 0;
  const [triggerElement, setTriggerElement] = React.useState(null);
  const [positionerElement, setPositionerElement] = React.useState(null);
  const [instantTypeState, setInstantTypeState] = React.useState();
  const popupRef = React.useRef(null);
  const [open, setOpenUnwrapped] = (0, _useControlled.useControlled)({
    controlled: externalOpen,
    default: defaultOpen,
    name: 'Tooltip',
    state: 'open'
  });
  const onOpenChange = (0, _useEventCallback.useEventCallback)(onOpenChangeProp);
  const setOpen = React.useCallback((nextOpen, event, reason) => {
    onOpenChange(nextOpen, event, reason);
    setOpenUnwrapped(nextOpen);
  }, [onOpenChange, setOpenUnwrapped]);
  const {
    mounted,
    setMounted,
    transitionStatus
  } = (0, _useTransitionStatus.useTransitionStatus)(open);
  const handleUnmount = (0, _useEventCallback.useEventCallback)(() => {
    setMounted(false);
    onOpenChangeComplete?.(false);
  });
  (0, _useOpenChangeComplete.useOpenChangeComplete)({
    enabled: !params.actionsRef,
    open,
    ref: popupRef,
    onComplete() {
      if (!open) {
        handleUnmount();
      }
    }
  });
  React.useImperativeHandle(params.actionsRef, () => ({
    unmount: handleUnmount
  }), [handleUnmount]);
  const context = (0, _react2.useFloatingRootContext)({
    elements: {
      reference: triggerElement,
      floating: positionerElement
    },
    open,
    onOpenChange(openValue, eventValue, reasonValue) {
      const isHover = reasonValue === 'hover' || reasonValue === 'safe-polygon';
      const isFocusOpen = openValue && reasonValue === 'focus';
      const isDismissClose = !openValue && (reasonValue === 'reference-press' || reasonValue === 'escape-key');
      function changeState() {
        setOpen(openValue, eventValue, (0, _translateOpenChangeReason.translateOpenChangeReason)(reasonValue));
      }
      if (isHover) {
        // If a hover reason is provided, we need to flush the state synchronously. This ensures
        // `node.getAnimations()` knows about the new state.
        ReactDOM.flushSync(changeState);
      } else {
        changeState();
      }
      if (isFocusOpen || isDismissClose) {
        setInstantTypeState(isFocusOpen ? 'focus' : 'dismiss');
      } else if (reasonValue === 'hover') {
        setInstantTypeState(undefined);
      }
    }
  });
  const {
    delay: groupDelay,
    isInstantPhase,
    currentId
  } = (0, _react2.useDelayGroup)(context);
  // We only pass an object to `FloatingDelayGroup`. A number means the Provider is not
  // present, so we should ignore the value by using `undefined`.
  const openGroupDelay = typeof groupDelay === 'object' ? groupDelay.open : undefined;
  const closeGroupDelay = typeof groupDelay === 'object' ? groupDelay.close : undefined;
  let instantType = isInstantPhase ? 'delay' : instantTypeState;
  if (!open && context.floatingId === currentId) {
    instantType = instantTypeState;
  }
  const computedRestMs = openGroupDelay ?? delayWithDefault;
  let computedCloseDelay = closeDelayWithDefault;

  // A provider is present and the close delay is not set.
  if (closeDelay == null && groupDelay !== 0) {
    computedCloseDelay = closeGroupDelay;
  }
  const hover = (0, _react2.useHover)(context, {
    mouseOnly: true,
    move: false,
    handleClose: hoverable && trackCursorAxis !== 'both' ? (0, _react2.safePolygon)() : null,
    restMs: computedRestMs,
    delay: {
      close: computedCloseDelay
    }
  });
  const focus = (0, _react2.useFocus)(context);
  const dismiss = (0, _react2.useDismiss)(context, {
    referencePress: true
  });
  const clientPoint = (0, _react2.useClientPoint)(context, {
    enabled: trackCursorAxis !== 'none',
    axis: trackCursorAxis === 'none' ? undefined : trackCursorAxis
  });
  const {
    getReferenceProps: getRootTriggerProps,
    getFloatingProps: getRootPopupProps
  } = (0, _react2.useInteractions)([hover, focus, dismiss, clientPoint]);
  return React.useMemo(() => ({
    open,
    setOpen,
    mounted,
    setMounted,
    setTriggerElement,
    positionerElement,
    setPositionerElement,
    popupRef,
    getRootTriggerProps,
    getRootPopupProps,
    floatingRootContext: context,
    instantType,
    transitionStatus,
    onOpenChangeComplete
  }), [mounted, open, setMounted, positionerElement, setOpen, getRootTriggerProps, getRootPopupProps, context, instantType, transitionStatus, onOpenChangeComplete]);
}