"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Form = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useComponentRenderer = require("../utils/useComponentRenderer");
var _mergeProps = require("../merge-props");
var _FormContext = require("./FormContext");
var _useEventCallback = require("../utils/useEventCallback");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * A native form element with consolidated error handling.
 * Renders a `<form>` element.
 *
 * Documentation: [Base UI Form](https://base-ui.com/react/components/form)
 */const Form = exports.Form = /*#__PURE__*/React.forwardRef(function Form(props, forwardedRef) {
  const {
    render,
    className,
    errors,
    onClearErrors: onClearErrorsProp,
    onSubmit: onSubmitProp,
    ...otherProps
  } = props;
  const formRef = React.useRef({
    fields: new Map()
  });
  const submittedRef = React.useRef(false);
  const onSubmit = (0, _useEventCallback.useEventCallback)(onSubmitProp);
  const onClearErrors = (0, _useEventCallback.useEventCallback)(onClearErrorsProp);
  const getFormProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    noValidate: true,
    onSubmit(event) {
      let values = Array.from(formRef.current.fields.values());

      // Async validation isn't supported to stop the submit event.
      values.forEach(field => {
        field.validate();
      });
      values = Array.from(formRef.current.fields.values());
      const invalidFields = values.filter(field => !field.validityData.state.valid);
      if (invalidFields.length) {
        event.preventDefault();
        invalidFields[0]?.controlRef.current?.focus();
      } else {
        submittedRef.current = true;
        onSubmit(event);
      }
    }
  }, externalProps), [onSubmit]);
  React.useEffect(() => {
    if (!submittedRef.current) {
      return;
    }
    submittedRef.current = false;
    const invalidFields = Array.from(formRef.current.fields.values()).filter(field => field.validityData.state.valid === false);
    if (invalidFields.length) {
      invalidFields[0]?.controlRef.current?.focus();
    }
  }, [errors]);
  const state = React.useMemo(() => ({}), []);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    propGetter: getFormProps,
    render: render ?? 'form',
    ref: forwardedRef,
    state,
    className,
    extraProps: otherProps
  });
  const contextValue = React.useMemo(() => ({
    formRef,
    errors: errors ?? {},
    onClearErrors
  }), [formRef, errors, onClearErrors]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormContext.FormContext.Provider, {
    value: contextValue,
    children: renderElement()
  });
});
process.env.NODE_ENV !== "production" ? Form.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * CSS class applied to the element, or a function that
   * returns a class based on the component’s state.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  /**
   * An object where the keys correspond to the `name` attribute of the form fields,
   * and the values correspond to the error(s) related to that field.
   */
  errors: _propTypes.default.object,
  /**
   * Event handler called when the `errors` object is cleared.
   */
  onClearErrors: _propTypes.default.func,
  /**
   * @ignore
   */
  onSubmit: _propTypes.default.func,
  /**
   * Allows you to replace the component’s HTML element
   * with a different tag, or compose it with another component.
   *
   * Accepts a `ReactElement` or a function that returns the element to render.
   */
  render: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func])
} : void 0;