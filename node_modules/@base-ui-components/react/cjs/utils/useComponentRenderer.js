"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useComponentRenderer = useComponentRenderer;
var React = _interopRequireWildcard(require("react"));
var _getStyleHookProps = require("./getStyleHookProps");
var _resolveClassName = require("./resolveClassName");
var _evaluateRenderProp = require("./evaluateRenderProp");
var _useRenderPropForkRef = require("./useRenderPropForkRef");
var _defaultRenderFunctions = require("./defaultRenderFunctions");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const emptyObject = {};

/**
 * Returns a function that renders a Base UI component.
 *
 * @ignore - internal hook.
 */
function useComponentRenderer(settings) {
  const {
    render: renderProp,
    className: classNameProp,
    state,
    ref,
    propGetter = props => props,
    extraProps,
    customStyleHookMapping,
    styleHooks: generateStyleHooks = true
  } = settings;
  const className = (0, _resolveClassName.resolveClassName)(classNameProp, state);
  const styleHooks = React.useMemo(() => {
    if (!generateStyleHooks) {
      return emptyObject;
    }
    return (0, _getStyleHookProps.getStyleHookProps)(state, customStyleHookMapping);
  }, [state, customStyleHookMapping, generateStyleHooks]);
  const ownProps = {
    ...styleHooks,
    ...extraProps
  };
  let resolvedRenderProp;
  if (typeof renderProp === 'string') {
    resolvedRenderProp = _defaultRenderFunctions.defaultRenderFunctions[renderProp];
  } else {
    resolvedRenderProp = renderProp;
  }
  let refs = [];
  if (ref !== undefined) {
    refs = Array.isArray(ref) ? ref : [ref];
  }
  const renderedElementProps = propGetter(ownProps);
  const propsWithRef = {
    ...renderedElementProps,
    ref: (0, _useRenderPropForkRef.useRenderPropForkRef)(resolvedRenderProp, renderedElementProps.ref, ...refs)
  };
  if (className !== undefined) {
    propsWithRef.className = className;
  }
  const renderElement = () => (0, _evaluateRenderProp.evaluateRenderProp)(resolvedRenderProp, propsWithRef, state);
  return {
    renderElement
  };
}