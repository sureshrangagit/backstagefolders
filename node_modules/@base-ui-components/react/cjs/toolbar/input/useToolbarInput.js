"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useToolbarInput = useToolbarInput;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../../merge-props");
var _useButton = require("../../use-button");
var _composite = require("../../composite/composite");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useToolbarInput(parameters) {
  const {
    disabled,
    focusableWhenDisabled,
    ref: externalRef
  } = parameters;
  const {
    getButtonProps
  } = (0, _useButton.useButton)({
    buttonRef: externalRef,
    disabled,
    focusableWhenDisabled,
    type: 'text',
    elementName: 'input'
  });
  const getInputProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    onClick(event) {
      if (disabled) {
        event.preventDefault();
      }
    },
    onKeyDown(event) {
      if (event.key !== _composite.ARROW_LEFT && event.key !== _composite.ARROW_RIGHT && disabled) {
        event.preventDefault();
      }
    },
    onPointerDown(event) {
      if (disabled) {
        event.preventDefault();
      }
    }
  }, externalProps, getButtonProps), [disabled, getButtonProps]);
  return React.useMemo(() => ({
    getInputProps
  }), [getInputProps]);
}