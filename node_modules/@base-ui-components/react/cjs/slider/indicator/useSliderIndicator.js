"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSliderIndicator = useSliderIndicator;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../../merge-props");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function getRangeStyles(orientation, offset, leap) {
  if (orientation === 'vertical') {
    return {
      position: 'relative',
      bottom: `${offset}%`,
      height: `${leap}%`,
      width: 'inherit'
    };
  }
  return {
    position: 'relative',
    insetInlineStart: `${offset}%`,
    width: `${leap}%`,
    height: 'inherit'
  };
}

/**
 */
function useSliderIndicator(parameters) {
  const {
    orientation,
    percentageValues
  } = parameters;
  let internalStyles;
  if (percentageValues.length > 1) {
    const trackOffset = percentageValues[0];
    const trackLeap = percentageValues[percentageValues.length - 1] - trackOffset;
    internalStyles = getRangeStyles(orientation, trackOffset, trackLeap);
  } else if (orientation === 'vertical') {
    internalStyles = {
      position: 'relative',
      bottom: 0,
      height: `${percentageValues[0]}%`,
      width: 'inherit'
    };
  } else {
    internalStyles = {
      position: 'relative',
      insetInlineStart: 0,
      width: `${percentageValues[0]}%`,
      height: 'inherit'
    };
  }
  const getRootProps = React.useCallback((externalProps = {}) => {
    return (0, _mergeProps.mergeProps)({
      style: internalStyles
    }, externalProps);
  }, [internalStyles]);
  return React.useMemo(() => ({
    getRootProps
  }), [getRootProps]);
}