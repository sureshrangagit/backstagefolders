"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSliderValue = useSliderValue;
var React = _interopRequireWildcard(require("react"));
var _formatNumber = require("../../utils/formatNumber");
var _mergeProps = require("../../merge-props");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useSliderValue(parameters) {
  const {
    'aria-live': ariaLive,
    format: formatParam,
    thumbMap,
    values
  } = parameters;
  const outputFor = React.useMemo(() => {
    let htmlFor = '';
    for (const thumbMetadata of thumbMap.values()) {
      if (thumbMetadata?.inputId) {
        htmlFor += `${thumbMetadata.inputId} `;
      }
    }
    return htmlFor.trim() === '' ? undefined : htmlFor.trim();
  }, [thumbMap]);
  const formattedValues = React.useMemo(() => {
    const arr = [];
    for (let i = 0; i < values.length; i += 1) {
      arr.push((0, _formatNumber.formatNumber)(values[i], [], formatParam ?? undefined));
    }
    return arr;
  }, [formatParam, values]);
  const getRootProps = React.useCallback((externalProps = {}) => {
    return (0, _mergeProps.mergeProps)({
      // off by default because it will keep announcing when the slider is being dragged
      // and also when the value is changing (but not yet committed)
      'aria-live': ariaLive,
      htmlFor: outputFor
    }, externalProps);
  }, [ariaLive, outputFor]);
  return React.useMemo(() => ({
    getRootProps,
    formattedValues
  }), [getRootProps, formattedValues]);
}