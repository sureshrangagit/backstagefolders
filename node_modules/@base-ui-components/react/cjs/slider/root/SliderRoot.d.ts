import * as React from 'react';
import type { BaseUIComponentProps } from '../../utils/types.js';
import type { FieldRoot } from '../../field/root/FieldRoot.js';
import { useSliderRoot } from './useSliderRoot.js';
/**
 * Groups all parts of the slider.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Slider](https://base-ui.com/react/components/slider)
 */
declare const SliderRoot: {
    <Value extends number | readonly number[]>(props: SliderRoot.Props<Value> & {
        ref?: React.RefObject<HTMLDivElement>;
    }): React.JSX.Element;
    propTypes?: any;
};
declare namespace SliderRoot {
    interface State extends FieldRoot.State {
        /**
         * The index of the active thumb.
         */
        activeThumbIndex: number;
        /**
         * Whether the component should ignore user interaction.
         */
        disabled: boolean;
        /**
         * Whether the thumb is currently being dragged.
         */
        dragging: boolean;
        max: number;
        min: number;
        /**
         * The minimum steps between values in a range slider.
         * @default 0
         */
        minStepsBetweenValues: number;
        /**
         * The component orientation.
         */
        orientation: useSliderRoot.Orientation;
        /**
         * The step increment of the slider when incrementing or decrementing. It will snap
         * to multiples of this value. Decimal values are supported.
         * @default 1
         */
        step: number;
        /**
         * The raw number value of the slider.
         */
        values: readonly number[];
    }
    interface Props<Value extends number | readonly number[] = number | readonly number[]> extends Partial<Pick<useSliderRoot.Parameters, 'disabled' | 'max' | 'min' | 'minStepsBetweenValues' | 'name' | 'orientation' | 'largeStep' | 'step'>>, Omit<BaseUIComponentProps<'div', State>, 'defaultValue' | 'onChange' | 'values'> {
        /**
         * The uncontrolled value of the slider when itâ€™s initially rendered.
         *
         * To render a controlled slider, use the `value` prop instead.
         */
        defaultValue?: Value;
        /**
         * Whether the component should ignore user interaction.
         * @default false
         */
        disabled?: boolean;
        /**
         * Options to format the input value.
         */
        format?: Intl.NumberFormatOptions;
        /**
         * Optional tab index attribute for the thumb components.
         */
        tabIndex?: number;
        /**
         * The value of the slider.
         * For ranged sliders, provide an array with two values.
         */
        value?: Value;
        /**
         * Callback function that is fired when the slider's value changed.
         *
         * @param {number | number[]} value The new value.
         * @param {Event} event The corresponding event that initiated the change.
         * You can pull out the new value by accessing `event.target.value` (any).
         * @param {number} activeThumbIndex Index of the currently moved thumb.
         */
        onValueChange?: (value: Value extends number ? number : Value, event: Event, activeThumbIndex: number) => void;
        /**
         * Callback function that is fired when the `pointerup` is triggered.
         *
         * @param {number | number[]} value The new value.
         * @param {Event} event The corresponding event that initiated the change.
         * **Warning**: This is a generic event not a change event.
         */
        onValueCommitted?: (value: Value extends number ? number : Value, event: Event) => void;
    }
}
export { SliderRoot };
