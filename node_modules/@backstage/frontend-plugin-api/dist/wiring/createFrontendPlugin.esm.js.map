{"version":3,"file":"createFrontendPlugin.esm.js","sources":["../../src/wiring/createFrontendPlugin.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  OpaqueExtensionDefinition,\n  OpaqueFrontendPlugin,\n} from '@internal/frontend';\nimport { ExtensionDefinition } from './createExtension';\nimport {\n  Extension,\n  resolveExtensionDefinition,\n} from './resolveExtensionDefinition';\nimport { AnyExternalRoutes, AnyRoutes, FeatureFlagConfig } from './types';\nimport { MakeSortedExtensionsMap } from './MakeSortedExtensionsMap';\nimport { JsonObject } from '@backstage/types';\n\n/**\n * Information about the plugin.\n *\n * @public\n * @remarks\n *\n * This interface is intended to be extended via [module\n * augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation)\n * in order to add fields that are specific to each project.\n *\n * For example, one might add a `slackChannel` field that is read from the\n * opaque manifest file.\n *\n * See the options for `createApp` for more information about how to\n * customize the parsing of manifest files.\n */\nexport interface FrontendPluginInfo {\n  /**\n   * The name of the package that implements the plugin.\n   */\n  packageName?: string;\n\n  /**\n   * The version of the plugin, typically the version of the package.json file.\n   */\n  version?: string;\n\n  /**\n   * As short description of the plugin, typically the description field in\n   * package.json.\n   */\n  description?: string;\n\n  /**\n   * The owner entity references of the plugin.\n   */\n  ownerEntityRefs?: string[];\n\n  /**\n   * Links related to the plugin.\n   */\n  links?: Array<{ title: string; url: string }>;\n}\n\n/**\n * Options for providing information for a plugin.\n *\n * @public\n */\nexport type FrontendPluginInfoOptions = {\n  /**\n   * A loader function for the package.json file for the plugin.\n   */\n  packageJson?: () => Promise<{ name: string } & JsonObject>;\n  /**\n   * A loader function for an opaque manifest file for the plugin.\n   */\n  manifest?: () => Promise<JsonObject>;\n};\n\n/** @public */\nexport interface FrontendPlugin<\n  TRoutes extends AnyRoutes = AnyRoutes,\n  TExternalRoutes extends AnyExternalRoutes = AnyExternalRoutes,\n  TExtensionMap extends { [id in string]: ExtensionDefinition } = {\n    [id in string]: ExtensionDefinition;\n  },\n> {\n  readonly $$type: '@backstage/FrontendPlugin';\n  readonly id: string;\n  readonly routes: TRoutes;\n  readonly externalRoutes: TExternalRoutes;\n\n  /**\n   * Loads the plugin info.\n   */\n  info(): Promise<FrontendPluginInfo>;\n  getExtension<TId extends keyof TExtensionMap>(id: TId): TExtensionMap[TId];\n  withOverrides(options: {\n    extensions: Array<ExtensionDefinition>;\n\n    /**\n     * Overrides the original info loaders of the plugin one by one.\n     */\n    info?: FrontendPluginInfoOptions;\n  }): FrontendPlugin<TRoutes, TExternalRoutes, TExtensionMap>;\n}\n\n/** @public */\nexport interface PluginOptions<\n  TId extends string,\n  TRoutes extends AnyRoutes,\n  TExternalRoutes extends AnyExternalRoutes,\n  TExtensions extends readonly ExtensionDefinition[],\n> {\n  pluginId: TId;\n  routes?: TRoutes;\n  externalRoutes?: TExternalRoutes;\n  extensions?: TExtensions;\n  featureFlags?: FeatureFlagConfig[];\n  info?: FrontendPluginInfoOptions;\n}\n\n/** @public */\nexport function createFrontendPlugin<\n  TId extends string,\n  TRoutes extends AnyRoutes = {},\n  TExternalRoutes extends AnyExternalRoutes = {},\n  TExtensions extends readonly ExtensionDefinition[] = [],\n>(\n  options: PluginOptions<TId, TRoutes, TExternalRoutes, TExtensions>,\n): FrontendPlugin<\n  TRoutes,\n  TExternalRoutes,\n  MakeSortedExtensionsMap<TExtensions[number], TId>\n>;\n/**\n * @public\n * @deprecated The `id` option is deprecated, use `pluginId` instead.\n */\nexport function createFrontendPlugin<\n  TId extends string,\n  TRoutes extends AnyRoutes = {},\n  TExternalRoutes extends AnyExternalRoutes = {},\n  TExtensions extends readonly ExtensionDefinition[] = [],\n>(\n  options: Omit<\n    PluginOptions<TId, TRoutes, TExternalRoutes, TExtensions>,\n    'pluginId'\n  > & { id: string },\n): FrontendPlugin<\n  TRoutes,\n  TExternalRoutes,\n  MakeSortedExtensionsMap<TExtensions[number], TId>\n>;\nexport function createFrontendPlugin<\n  TId extends string,\n  TRoutes extends AnyRoutes = {},\n  TExternalRoutes extends AnyExternalRoutes = {},\n  TExtensions extends readonly ExtensionDefinition[] = [],\n>(\n  options:\n    | PluginOptions<TId, TRoutes, TExternalRoutes, TExtensions>\n    | (Omit<\n        PluginOptions<TId, TRoutes, TExternalRoutes, TExtensions>,\n        'pluginId'\n      > & { id: string }),\n): FrontendPlugin<\n  TRoutes,\n  TExternalRoutes,\n  MakeSortedExtensionsMap<TExtensions[number], TId>\n> {\n  const pluginId = 'pluginId' in options ? options.pluginId : options.id;\n  if (!pluginId) {\n    throw new Error(\n      \"Either 'id' or 'pluginId' must be provided to createFrontendPlugin\",\n    );\n  }\n  const extensions = new Array<Extension<any>>();\n  const extensionDefinitionsById = new Map<\n    string,\n    typeof OpaqueExtensionDefinition.TInternal\n  >();\n\n  for (const def of options.extensions ?? []) {\n    const internal = OpaqueExtensionDefinition.toInternal(def);\n    const ext = resolveExtensionDefinition(def, { namespace: pluginId });\n    extensions.push(ext);\n    extensionDefinitionsById.set(ext.id, {\n      ...internal,\n      namespace: pluginId,\n    });\n  }\n\n  if (extensions.length !== extensionDefinitionsById.size) {\n    const extensionIds = extensions.map(e => e.id);\n    const duplicates = Array.from(\n      new Set(\n        extensionIds.filter((id, index) => extensionIds.indexOf(id) !== index),\n      ),\n    );\n    // TODO(Rugvip): This could provide some more information about the kind + name of the extensions\n    throw new Error(\n      `Plugin '${pluginId}' provided duplicate extensions: ${duplicates.join(\n        ', ',\n      )}`,\n    );\n  }\n\n  return OpaqueFrontendPlugin.createInstance('v1', {\n    id: pluginId,\n    routes: options.routes ?? ({} as TRoutes),\n    externalRoutes: options.externalRoutes ?? ({} as TExternalRoutes),\n    featureFlags: options.featureFlags ?? [],\n    extensions: extensions,\n    infoOptions: options.info,\n\n    // This method is overridden when the plugin instance is installed in an app\n    async info() {\n      throw new Error(\n        `Attempted to load plugin info for plugin '${pluginId}', but the plugin instance is not installed in an app`,\n      );\n    },\n    getExtension(id) {\n      const ext = extensionDefinitionsById.get(id);\n      if (!ext) {\n        throw new Error(\n          `Attempted to get non-existent extension '${id}' from plugin '${pluginId}'`,\n        );\n      }\n      return ext;\n    },\n    toString() {\n      return `Plugin{id=${pluginId}}`;\n    },\n    withOverrides(overrides) {\n      const overriddenExtensionIds = new Set(\n        overrides.extensions.map(\n          e => resolveExtensionDefinition(e, { namespace: pluginId }).id,\n        ),\n      );\n      const nonOverriddenExtensions = (options.extensions ?? []).filter(\n        e =>\n          !overriddenExtensionIds.has(\n            resolveExtensionDefinition(e, { namespace: pluginId }).id,\n          ),\n      );\n      return createFrontendPlugin({\n        ...options,\n        pluginId,\n        extensions: [...nonOverriddenExtensions, ...overrides.extensions],\n        info: {\n          ...options.info,\n          ...overrides.info,\n        },\n      });\n    },\n  });\n}\n"],"names":[],"mappings":";;;;AAoKO,SAAS,qBAMd,OAUA,EAAA;AACA,EAAA,MAAM,QAAW,GAAA,UAAA,IAAc,OAAU,GAAA,OAAA,CAAQ,WAAW,OAAQ,CAAA,EAAA;AACpE,EAAA,IAAI,CAAC,QAAU,EAAA;AACb,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA;AAEF,EAAM,MAAA,UAAA,GAAa,IAAI,KAAsB,EAAA;AAC7C,EAAM,MAAA,wBAAA,uBAA+B,GAGnC,EAAA;AAEF,EAAA,KAAA,MAAW,GAAO,IAAA,OAAA,CAAQ,UAAc,IAAA,EAAI,EAAA;AAC1C,IAAM,MAAA,QAAA,GAAW,yBAA0B,CAAA,UAAA,CAAW,GAAG,CAAA;AACzD,IAAA,MAAM,MAAM,0BAA2B,CAAA,GAAA,EAAK,EAAE,SAAA,EAAW,UAAU,CAAA;AACnE,IAAA,UAAA,CAAW,KAAK,GAAG,CAAA;AACnB,IAAyB,wBAAA,CAAA,GAAA,CAAI,IAAI,EAAI,EAAA;AAAA,MACnC,GAAG,QAAA;AAAA,MACH,SAAW,EAAA;AAAA,KACZ,CAAA;AAAA;AAGH,EAAI,IAAA,UAAA,CAAW,MAAW,KAAA,wBAAA,CAAyB,IAAM,EAAA;AACvD,IAAA,MAAM,YAAe,GAAA,UAAA,CAAW,GAAI,CAAA,CAAA,CAAA,KAAK,EAAE,EAAE,CAAA;AAC7C,IAAA,MAAM,aAAa,KAAM,CAAA,IAAA;AAAA,MACvB,IAAI,GAAA;AAAA,QACF,YAAA,CAAa,OAAO,CAAC,EAAA,EAAI,UAAU,YAAa,CAAA,OAAA,CAAQ,EAAE,CAAA,KAAM,KAAK;AAAA;AACvE,KACF;AAEA,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,CAAA,QAAA,EAAW,QAAQ,CAAA,iCAAA,EAAoC,UAAW,CAAA,IAAA;AAAA,QAChE;AAAA,OACD,CAAA;AAAA,KACH;AAAA;AAGF,EAAO,OAAA,oBAAA,CAAqB,eAAe,IAAM,EAAA;AAAA,IAC/C,EAAI,EAAA,QAAA;AAAA,IACJ,MAAA,EAAQ,OAAQ,CAAA,MAAA,IAAW,EAAC;AAAA,IAC5B,cAAA,EAAgB,OAAQ,CAAA,cAAA,IAAmB,EAAC;AAAA,IAC5C,YAAA,EAAc,OAAQ,CAAA,YAAA,IAAgB,EAAC;AAAA,IACvC,UAAA;AAAA,IACA,aAAa,OAAQ,CAAA,IAAA;AAAA;AAAA,IAGrB,MAAM,IAAO,GAAA;AACX,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,6CAA6C,QAAQ,CAAA,qDAAA;AAAA,OACvD;AAAA,KACF;AAAA,IACA,aAAa,EAAI,EAAA;AACf,MAAM,MAAA,GAAA,GAAM,wBAAyB,CAAA,GAAA,CAAI,EAAE,CAAA;AAC3C,MAAA,IAAI,CAAC,GAAK,EAAA;AACR,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,yCAAA,EAA4C,EAAE,CAAA,eAAA,EAAkB,QAAQ,CAAA,CAAA;AAAA,SAC1E;AAAA;AAEF,MAAO,OAAA,GAAA;AAAA,KACT;AAAA,IACA,QAAW,GAAA;AACT,MAAA,OAAO,aAAa,QAAQ,CAAA,CAAA,CAAA;AAAA,KAC9B;AAAA,IACA,cAAc,SAAW,EAAA;AACvB,MAAA,MAAM,yBAAyB,IAAI,GAAA;AAAA,QACjC,UAAU,UAAW,CAAA,GAAA;AAAA,UACnB,OAAK,0BAA2B,CAAA,CAAA,EAAG,EAAE,SAAW,EAAA,QAAA,EAAU,CAAE,CAAA;AAAA;AAC9D,OACF;AACA,MAAA,MAAM,uBAA2B,GAAA,CAAA,OAAA,CAAQ,UAAc,IAAA,EAAI,EAAA,MAAA;AAAA,QACzD,CAAA,CAAA,KACE,CAAC,sBAAuB,CAAA,GAAA;AAAA,UACtB,2BAA2B,CAAG,EAAA,EAAE,SAAW,EAAA,QAAA,EAAU,CAAE,CAAA;AAAA;AACzD,OACJ;AACA,MAAA,OAAO,oBAAqB,CAAA;AAAA,QAC1B,GAAG,OAAA;AAAA,QACH,QAAA;AAAA,QACA,YAAY,CAAC,GAAG,uBAAyB,EAAA,GAAG,UAAU,UAAU,CAAA;AAAA,QAChE,IAAM,EAAA;AAAA,UACJ,GAAG,OAAQ,CAAA,IAAA;AAAA,UACX,GAAG,SAAU,CAAA;AAAA;AACf,OACD,CAAA;AAAA;AACH,GACD,CAAA;AACH;;;;"}