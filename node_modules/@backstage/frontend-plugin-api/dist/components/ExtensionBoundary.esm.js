import { jsx, Fragment } from 'react/jsx-runtime';
import { Suspense, lazy, useEffect } from 'react';
import { AnalyticsContext, useAnalytics } from '@backstage/core-plugin-api';
import { ErrorBoundary } from './ErrorBoundary.esm.js';
import { routableExtensionRenderedEvent } from '../core-plugin-api/src/analytics/Tracker.esm.js';
import '../apis/definitions/AppTreeApi.esm.js';
import { useComponentRef } from '../apis/definitions/ComponentsApi.esm.js';
import '../apis/definitions/IconsApi.esm.js';
import '../apis/definitions/DialogApi.esm.js';
import '../apis/definitions/RouteResolutionApi.esm.js';
import '../apis/definitions/AnalyticsApi.esm.js';
import { coreComponentRefs } from './coreComponentRefs.esm.js';
import { coreExtensionData } from '../wiring/coreExtensionData.esm.js';
import 'zod';
import 'zod-to-json-schema';
import { AppNodeProvider } from './AppNodeProvider.esm.js';

const RouteTracker = (props) => {
  const { disableTracking, children } = props;
  const analytics = useAnalytics();
  useEffect(() => {
    if (disableTracking) return;
    analytics.captureEvent(routableExtensionRenderedEvent, "");
  }, [analytics, disableTracking]);
  return /* @__PURE__ */ jsx(Fragment, { children });
};
function ExtensionBoundary(props) {
  const { node, routable, children } = props;
  const doesOutputRoutePath = Boolean(
    node.instance?.getData(coreExtensionData.routePath)
  );
  const plugin = node.spec.plugin;
  const Progress = useComponentRef(coreComponentRefs.progress);
  const fallback = useComponentRef(coreComponentRefs.errorBoundaryFallback);
  const attributes = {
    extensionId: node.spec.id,
    pluginId: node.spec.plugin?.id ?? "app"
  };
  return /* @__PURE__ */ jsx(AppNodeProvider, { node, children: /* @__PURE__ */ jsx(Suspense, { fallback: /* @__PURE__ */ jsx(Progress, {}), children: /* @__PURE__ */ jsx(ErrorBoundary, { plugin, Fallback: fallback, children: /* @__PURE__ */ jsx(AnalyticsContext, { attributes, children: /* @__PURE__ */ jsx(RouteTracker, { disableTracking: !(routable ?? doesOutputRoutePath), children }) }) }) }) });
}
((ExtensionBoundary2) => {
  function lazy$1(appNode, loader) {
    const ExtensionComponent = lazy(
      () => loader().then((element) => ({ default: () => element }))
    );
    return /* @__PURE__ */ jsx(ExtensionBoundary2, { node: appNode, children: /* @__PURE__ */ jsx(ExtensionComponent, {}) });
  }
  ExtensionBoundary2.lazy = lazy$1;
  function lazyComponent(appNode, loader) {
    const ExtensionComponent = lazy(
      () => loader().then((Component) => ({ default: Component }))
    );
    return (props) => /* @__PURE__ */ jsx(ExtensionBoundary2, { node: appNode, children: /* @__PURE__ */ jsx(ExtensionComponent, { ...props }) });
  }
  ExtensionBoundary2.lazyComponent = lazyComponent;
})(ExtensionBoundary || (ExtensionBoundary = {}));

export { ExtensionBoundary };
//# sourceMappingURL=ExtensionBoundary.esm.js.map
