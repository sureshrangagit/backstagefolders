import { jsx, jsxs } from 'react/jsx-runtime';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import { useKubernetesObjects, DetectedErrorsContext, ErrorPanel, ErrorReporting, Cluster } from '@backstage/plugin-kubernetes-react';
import { detectErrors } from '@backstage/plugin-kubernetes-common';
import { Page, Content, Progress, EmptyState } from '@backstage/core-components';
import { RequireKubernetesPermissions } from './RequireKubernetesPermissions.esm.js';

const KubernetesContent = ({
  entity,
  refreshIntervalMs
}) => {
  const { kubernetesObjects, error } = useKubernetesObjects(
    entity,
    refreshIntervalMs
  );
  const clusters = kubernetesObjects?.items.map((item) => item.cluster) ?? [];
  const clustersWithErrors = kubernetesObjects?.items.filter((r) => r.errors.length > 0) ?? [];
  const detectedErrors = kubernetesObjects !== void 0 ? detectErrors(kubernetesObjects) : /* @__PURE__ */ new Map();
  return /* @__PURE__ */ jsx(Page, { themeId: "tool", children: /* @__PURE__ */ jsx(Content, { children: /* @__PURE__ */ jsx(RequireKubernetesPermissions, { children: /* @__PURE__ */ jsxs(
    DetectedErrorsContext.Provider,
    {
      value: [...detectedErrors.values()].flat(),
      children: [
        kubernetesObjects === void 0 && error === void 0 && /* @__PURE__ */ jsx(Progress, {}),
        clustersWithErrors.length > 0 && /* @__PURE__ */ jsx(Grid, { container: true, spacing: 3, direction: "column", children: /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(
          ErrorPanel,
          {
            entityName: entity.metadata.name,
            clustersWithErrors
          }
        ) }) }),
        error !== void 0 && /* @__PURE__ */ jsx(Grid, { container: true, spacing: 3, direction: "column", children: /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(
          ErrorPanel,
          {
            entityName: entity.metadata.name,
            errorMessage: error
          }
        ) }) }),
        kubernetesObjects && /* @__PURE__ */ jsxs(Grid, { container: true, spacing: 3, direction: "column", children: [
          /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(
            ErrorReporting,
            {
              detectedErrors,
              clusters
            }
          ) }),
          /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(Typography, { variant: "h3", children: "Your Clusters" }) }),
          /* @__PURE__ */ jsxs(Grid, { item: true, container: true, children: [
            kubernetesObjects?.items.length <= 0 && /* @__PURE__ */ jsx(
              Grid,
              {
                container: true,
                justifyContent: "space-around",
                direction: "row",
                alignItems: "center",
                spacing: 2,
                children: /* @__PURE__ */ jsx(Grid, { item: true, xs: 8, children: /* @__PURE__ */ jsx(
                  EmptyState,
                  {
                    missing: "data",
                    title: "No Kubernetes resources",
                    description: `No resources on any known clusters for ${entity.metadata.name}`
                  }
                ) })
              }
            ),
            kubernetesObjects?.items.length > 0 && kubernetesObjects?.items.map((item, i) => {
              const podsWithErrors = new Set(
                detectedErrors.get(item.cluster.name)?.filter((de) => de.sourceRef.kind === "Pod").map((de) => de.sourceRef.name)
              );
              return /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsx(
                Cluster,
                {
                  clusterObjects: item,
                  podsWithErrors
                }
              ) }, i);
            })
          ] })
        ] })
      ]
    }
  ) }) }) });
};

export { KubernetesContent };
//# sourceMappingURL=KubernetesContent.esm.js.map
