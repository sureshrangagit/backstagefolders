import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useEntity, MissingAnnotationEmptyState } from '@backstage/plugin-catalog-react';
import { Routes, Route } from 'react-router-dom';
import { KubernetesContent } from './KubernetesContent.esm.js';
import Button from '@material-ui/core/Button';
import { KUBERNETES_ANNOTATION, KUBERNETES_LABEL_SELECTOR_QUERY_ANNOTATION } from '@backstage/plugin-kubernetes-common';

const isKubernetesAvailable = (entity) => Boolean(entity.metadata.annotations?.[KUBERNETES_ANNOTATION]) || Boolean(
  entity.metadata.annotations?.[KUBERNETES_LABEL_SELECTOR_QUERY_ANNOTATION]
);
const Router = (props) => {
  const { entity } = useEntity();
  const kubernetesAnnotationValue = entity.metadata.annotations?.[KUBERNETES_ANNOTATION];
  const kubernetesLabelSelectorQueryAnnotationValue = entity.metadata.annotations?.[KUBERNETES_LABEL_SELECTOR_QUERY_ANNOTATION];
  if (kubernetesAnnotationValue || kubernetesLabelSelectorQueryAnnotationValue) {
    return /* @__PURE__ */ jsx(Routes, { children: /* @__PURE__ */ jsx(
      Route,
      {
        path: "/",
        element: /* @__PURE__ */ jsx(
          KubernetesContent,
          {
            entity,
            refreshIntervalMs: props.refreshIntervalMs
          }
        )
      }
    ) });
  }
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(MissingAnnotationEmptyState, { annotation: KUBERNETES_ANNOTATION }),
    /* @__PURE__ */ jsx("h1", { children: "Or use a label selector query, which takes precedence over the previous annotation." }),
    /* @__PURE__ */ jsx(
      Button,
      {
        variant: "contained",
        color: "primary",
        href: "https://backstage.io/docs/features/kubernetes/configuration#surfacing-your-kubernetes-components-as-part-of-an-entity",
        children: "Read Kubernetes Plugin Docs"
      }
    )
  ] });
};

export { Router, isKubernetesAvailable };
//# sourceMappingURL=Router.esm.js.map
