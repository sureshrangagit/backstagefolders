{"version":3,"file":"customProvider.esm.js","sources":["../../../src/layout/SignInPage/customProvider.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useForm, UseFormRegisterReturn } from 'react-hook-form';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport isEmpty from 'lodash/isEmpty';\nimport { InfoCard } from '../InfoCard/InfoCard';\nimport { ProviderComponent, ProviderLoader, SignInProvider } from './types';\nimport { GridItem } from './styles';\nimport { UserIdentity } from './UserIdentity';\nimport { coreComponentsTranslationRef } from '../../translation';\nimport { useTranslationRef } from '@backstage/core-plugin-api/alpha';\n\n// accept base64url format according to RFC7515 (https://tools.ietf.org/html/rfc7515#section-3)\nconst ID_TOKEN_REGEX = /^[a-z0-9_\\-]+\\.[a-z0-9_\\-]+\\.[a-z0-9_\\-]+$/i;\n\n/** @public */\nexport type CustomProviderClassKey = 'form' | 'button';\n\nconst useFormStyles = makeStyles(\n  theme => ({\n    form: {\n      display: 'flex',\n      flexFlow: 'column nowrap',\n    },\n    button: {\n      alignSelf: 'center',\n      marginTop: theme.spacing(2),\n    },\n    subTitle: {\n      whiteSpace: 'pre-line',\n    },\n  }),\n  { name: 'BackstageCustomProvider' },\n);\n\ntype Data = {\n  userId: string;\n  idToken?: string;\n};\n\nconst asInputRef = (renderResult: UseFormRegisterReturn) => {\n  const { ref, ...rest } = renderResult;\n  return {\n    inputRef: ref,\n    ...rest,\n  };\n};\n\nconst Component: ProviderComponent = ({ onSignInStarted, onSignInSuccess }) => {\n  const classes = useFormStyles();\n  const { t } = useTranslationRef(coreComponentsTranslationRef);\n  const { register, handleSubmit, formState } = useForm<Data>({\n    mode: 'onChange',\n  });\n\n  const { errors } = formState;\n\n  const handleResult = ({ userId, idToken }: Data) => {\n    onSignInStarted();\n    onSignInSuccess(\n      UserIdentity.fromLegacy({\n        userId,\n        getIdToken: idToken !== undefined ? async () => idToken : undefined,\n        profile: {\n          email: `${userId}@example.com`,\n        },\n      }),\n    );\n  };\n\n  return (\n    <GridItem>\n      <InfoCard title={t('signIn.customProvider.title')} variant=\"fullHeight\">\n        <Typography variant=\"body1\" className={classes.subTitle}>\n          {t('signIn.customProvider.subtitle')}\n        </Typography>\n\n        <form className={classes.form} onSubmit={handleSubmit(handleResult)}>\n          <FormControl>\n            <TextField\n              {...asInputRef(register('userId', { required: true }))}\n              label={t('signIn.customProvider.userId')}\n              margin=\"normal\"\n              error={Boolean(errors.userId)}\n            />\n            {errors.userId && (\n              <FormHelperText error>{errors.userId.message}</FormHelperText>\n            )}\n          </FormControl>\n          <FormControl>\n            <TextField\n              {...asInputRef(\n                register('idToken', {\n                  required: false,\n                  validate: token =>\n                    !token ||\n                    ID_TOKEN_REGEX.test(token) ||\n                    t('signIn.customProvider.tokenInvalid'),\n                }),\n              )}\n              label={t('signIn.customProvider.idToken')}\n              margin=\"normal\"\n              autoComplete=\"off\"\n              error={Boolean(errors.idToken)}\n            />\n            {errors.idToken && (\n              <FormHelperText error>{errors.idToken.message}</FormHelperText>\n            )}\n          </FormControl>\n          <Button\n            type=\"submit\"\n            color=\"primary\"\n            variant=\"outlined\"\n            className={classes.button}\n            disabled={!formState?.isDirty || !isEmpty(errors)}\n          >\n            {t('signIn.customProvider.continue')}\n          </Button>\n        </form>\n      </InfoCard>\n    </GridItem>\n  );\n};\n\n// Custom provider doesn't store credentials\nconst loader: ProviderLoader = async () => undefined;\n\nexport const customProvider: SignInProvider = { Component, loader };\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAgCA,MAAM,cAAiB,GAAA,6CAAA;AAKvB,MAAM,aAAgB,GAAA,UAAA;AAAA,EACpB,CAAU,KAAA,MAAA;AAAA,IACR,IAAM,EAAA;AAAA,MACJ,OAAS,EAAA,MAAA;AAAA,MACT,QAAU,EAAA;AAAA,KACZ;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,SAAW,EAAA,QAAA;AAAA,MACX,SAAA,EAAW,KAAM,CAAA,OAAA,CAAQ,CAAC;AAAA,KAC5B;AAAA,IACA,QAAU,EAAA;AAAA,MACR,UAAY,EAAA;AAAA;AACd,GACF,CAAA;AAAA,EACA,EAAE,MAAM,yBAA0B;AACpC,CAAA;AAOA,MAAM,UAAA,GAAa,CAAC,YAAwC,KAAA;AAC1D,EAAA,MAAM,EAAE,GAAA,EAAK,GAAG,IAAA,EAAS,GAAA,YAAA;AACzB,EAAO,OAAA;AAAA,IACL,QAAU,EAAA,GAAA;AAAA,IACV,GAAG;AAAA,GACL;AACF,CAAA;AAEA,MAAM,SAA+B,GAAA,CAAC,EAAE,eAAA,EAAiB,iBAAsB,KAAA;AAC7E,EAAA,MAAM,UAAU,aAAc,EAAA;AAC9B,EAAA,MAAM,EAAE,CAAA,EAAM,GAAA,iBAAA,CAAkB,4BAA4B,CAAA;AAC5D,EAAA,MAAM,EAAE,QAAA,EAAU,YAAc,EAAA,SAAA,KAAc,OAAc,CAAA;AAAA,IAC1D,IAAM,EAAA;AAAA,GACP,CAAA;AAED,EAAM,MAAA,EAAE,QAAW,GAAA,SAAA;AAEnB,EAAA,MAAM,YAAe,GAAA,CAAC,EAAE,MAAA,EAAQ,SAAoB,KAAA;AAClD,IAAgB,eAAA,EAAA;AAChB,IAAA,eAAA;AAAA,MACE,aAAa,UAAW,CAAA;AAAA,QACtB,MAAA;AAAA,QACA,UAAY,EAAA,OAAA,KAAY,KAAY,CAAA,GAAA,YAAY,OAAU,GAAA,KAAA,CAAA;AAAA,QAC1D,OAAS,EAAA;AAAA,UACP,KAAA,EAAO,GAAG,MAAM,CAAA,YAAA;AAAA;AAClB,OACD;AAAA,KACH;AAAA,GACF;AAEA,EACE,uBAAA,GAAA,CAAC,YACC,QAAC,kBAAA,IAAA,CAAA,QAAA,EAAA,EAAS,OAAO,CAAE,CAAA,6BAA6B,CAAG,EAAA,OAAA,EAAQ,YACzD,EAAA,QAAA,EAAA;AAAA,oBAAC,GAAA,CAAA,UAAA,EAAA,EAAW,SAAQ,OAAQ,EAAA,SAAA,EAAW,QAAQ,QAC5C,EAAA,QAAA,EAAA,CAAA,CAAE,gCAAgC,CACrC,EAAA,CAAA;AAAA,oBAEA,IAAA,CAAC,UAAK,SAAW,EAAA,OAAA,CAAQ,MAAM,QAAU,EAAA,YAAA,CAAa,YAAY,CAChE,EAAA,QAAA,EAAA;AAAA,sBAAA,IAAA,CAAC,WACC,EAAA,EAAA,QAAA,EAAA;AAAA,wBAAA,GAAA;AAAA,UAAC,SAAA;AAAA,UAAA;AAAA,YACE,GAAG,WAAW,QAAS,CAAA,QAAA,EAAU,EAAE,QAAU,EAAA,IAAA,EAAM,CAAC,CAAA;AAAA,YACrD,KAAA,EAAO,EAAE,8BAA8B,CAAA;AAAA,YACvC,MAAO,EAAA,QAAA;AAAA,YACP,KAAA,EAAO,OAAQ,CAAA,MAAA,CAAO,MAAM;AAAA;AAAA,SAC9B;AAAA,QACC,MAAA,CAAO,0BACL,GAAA,CAAA,cAAA,EAAA,EAAe,OAAK,IAAE,EAAA,QAAA,EAAA,MAAA,CAAO,OAAO,OAAQ,EAAA;AAAA,OAEjD,EAAA,CAAA;AAAA,2BACC,WACC,EAAA,EAAA,QAAA,EAAA;AAAA,wBAAA,GAAA;AAAA,UAAC,SAAA;AAAA,UAAA;AAAA,YACE,GAAG,UAAA;AAAA,cACF,SAAS,SAAW,EAAA;AAAA,gBAClB,QAAU,EAAA,KAAA;AAAA,gBACV,QAAA,EAAU,WACR,CAAC,KAAA,IACD,eAAe,IAAK,CAAA,KAAK,CACzB,IAAA,CAAA,CAAE,oCAAoC;AAAA,eACzC;AAAA,aACH;AAAA,YACA,KAAA,EAAO,EAAE,+BAA+B,CAAA;AAAA,YACxC,MAAO,EAAA,QAAA;AAAA,YACP,YAAa,EAAA,KAAA;AAAA,YACb,KAAA,EAAO,OAAQ,CAAA,MAAA,CAAO,OAAO;AAAA;AAAA,SAC/B;AAAA,QACC,MAAA,CAAO,2BACL,GAAA,CAAA,cAAA,EAAA,EAAe,OAAK,IAAE,EAAA,QAAA,EAAA,MAAA,CAAO,QAAQ,OAAQ,EAAA;AAAA,OAElD,EAAA,CAAA;AAAA,sBACA,GAAA;AAAA,QAAC,MAAA;AAAA,QAAA;AAAA,UACC,IAAK,EAAA,QAAA;AAAA,UACL,KAAM,EAAA,SAAA;AAAA,UACN,OAAQ,EAAA,UAAA;AAAA,UACR,WAAW,OAAQ,CAAA,MAAA;AAAA,UACnB,UAAU,CAAC,SAAA,EAAW,OAAW,IAAA,CAAC,QAAQ,MAAM,CAAA;AAAA,UAE/C,YAAE,gCAAgC;AAAA;AAAA;AACrC,KACF,EAAA;AAAA,GAAA,EACF,CACF,EAAA,CAAA;AAEJ,CAAA;AAGA,MAAM,SAAyB,YAAY,KAAA,CAAA;AAE9B,MAAA,cAAA,GAAiC,EAAE,SAAA,EAAW,MAAO;;;;"}