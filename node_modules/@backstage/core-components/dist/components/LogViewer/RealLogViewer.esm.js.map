{"version":3,"file":"RealLogViewer.esm.js","sources":["../../../src/components/LogViewer/RealLogViewer.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport CopyIcon from '@material-ui/icons/FileCopy';\nimport classnames from 'classnames';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { VariableSizeList, FixedSizeList } from 'react-window';\n\nimport { AnsiLine, AnsiProcessor } from './AnsiProcessor';\nimport { LogLine } from './LogLine';\nimport { LogViewerControls } from './LogViewerControls';\nimport { HEADER_SIZE, useStyles } from './styles';\nimport { useLogViewerSearch } from './useLogViewerSearch';\nimport { useLogViewerSelection } from './useLogViewerSelection';\n\nexport interface RealLogViewerProps {\n  text: string;\n  textWrap?: boolean;\n  classes?: { root?: string };\n}\n\nexport function RealLogViewer(props: RealLogViewerProps) {\n  const classes = useStyles({ classes: props.classes });\n  const [listInstance, setListInstance] = useState<\n    VariableSizeList<AnsiLine[]> | FixedSizeList<AnsiLine[]> | null\n  >(null);\n  const shouldTextWrap = props.textWrap ?? false;\n  const heights = useRef<{ [key: number]: number }>({});\n\n  // The processor keeps state that optimizes appending to the text\n  const processor = useMemo(() => new AnsiProcessor(), []);\n  const lines = processor.process(props.text);\n\n  const search = useLogViewerSearch(lines);\n  const selection = useLogViewerSelection(lines);\n  const location = useLocation();\n\n  useEffect(() => {\n    if (listInstance) {\n      listInstance.scrollToItem(lines.length - 1, 'end');\n    }\n  }, [listInstance, lines]);\n\n  useEffect(() => {\n    if (!listInstance) {\n      return;\n    }\n    if (search.resultLine) {\n      listInstance.scrollToItem(search.resultLine - 1, 'center');\n    } else {\n      listInstance.scrollToItem(lines.length - 1, 'end');\n    }\n  }, [listInstance, search.resultLine, lines]);\n\n  useEffect(() => {\n    if (location.hash) {\n      // #line-6 -> 6\n      const line = parseInt(location.hash.replace(/\\D/g, ''), 10);\n      selection.setSelection(line, false);\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleSelectLine = (\n    line: number,\n    event: { shiftKey: boolean; preventDefault: () => void },\n  ) => {\n    selection.setSelection(line, event.shiftKey);\n  };\n\n  function setRowHeight(index: number, size: number) {\n    if (shouldTextWrap && listInstance) {\n      (listInstance as VariableSizeList<AnsiLine[]>).resetAfterIndex(0);\n      // lineNumber is 1-based but index is 0-based\n      heights.current[index - 1] = size;\n    }\n  }\n\n  function getRowHeight(index: number) {\n    return heights.current[index] || 20;\n  }\n\n  return (\n    <AutoSizer>\n      {({ height, width }: { height?: number; width?: number }) => {\n        const commonProps = {\n          ref: setListInstance,\n          className: classes.log,\n          height: (height || 480) - HEADER_SIZE,\n          width: width || 640,\n          itemData: search.lines,\n          itemCount: search.lines.length,\n        };\n\n        const renderItem = ({\n          index,\n          style,\n          data,\n        }: {\n          index: number;\n          style: React.CSSProperties;\n          data: AnsiLine[];\n        }) => {\n          const line = data[index];\n          const { lineNumber } = line;\n          return (\n            <Box\n              style={{ ...style }}\n              className={classnames(classes.line, {\n                [classes.lineSelected]: selection.isSelected(lineNumber),\n              })}\n            >\n              {selection.shouldShowButton(lineNumber) && (\n                <IconButton\n                  data-testid=\"copy-button\"\n                  size=\"small\"\n                  className={classes.lineCopyButton}\n                  onClick={() => selection.copySelection()}\n                >\n                  <CopyIcon fontSize=\"inherit\" />\n                </IconButton>\n              )}\n              <a\n                role=\"row\"\n                target=\"_self\"\n                href={`#line-${lineNumber}`}\n                className={classes.lineNumber}\n                onClick={event => handleSelectLine(lineNumber, event)}\n                onKeyPress={event => handleSelectLine(lineNumber, event)}\n              >\n                {lineNumber}\n              </a>\n              <LogLine\n                setRowHeight={shouldTextWrap ? setRowHeight : undefined}\n                line={line}\n                classes={classes}\n                searchText={search.searchText}\n                highlightResultIndex={\n                  search.resultLine === lineNumber\n                    ? search.resultLineIndex\n                    : undefined\n                }\n              />\n            </Box>\n          );\n        };\n\n        return (\n          <Box style={{ width, height }} className={classes.root}>\n            <Box className={classes.header}>\n              <LogViewerControls {...search} />\n            </Box>\n            {shouldTextWrap ? (\n              <VariableSizeList<AnsiLine[]>\n                {...commonProps}\n                itemSize={getRowHeight}\n              >\n                {renderItem}\n              </VariableSizeList>\n            ) : (\n              <FixedSizeList<AnsiLine[]> {...commonProps} itemSize={20}>\n                {renderItem}\n              </FixedSizeList>\n            )}\n          </Box>\n        );\n      }}\n    </AutoSizer>\n  );\n}\n"],"names":["classnames"],"mappings":"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"}