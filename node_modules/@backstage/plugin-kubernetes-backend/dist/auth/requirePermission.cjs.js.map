{"version":3,"file":"requirePermission.cjs.js","sources":["../../src/auth/requirePermission.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  HttpAuthService,\n  PermissionsService,\n} from '@backstage/backend-plugin-api';\nimport { NotAllowedError } from '@backstage/errors';\nimport {\n  AuthorizeResult,\n  type BasicPermission,\n} from '@backstage/plugin-permission-common';\n\nimport express from 'express';\n\nexport async function requirePermission(\n  permissionApi: PermissionsService,\n  permissionRequired: BasicPermission,\n  httpAuth: HttpAuthService,\n  req: express.Request,\n) {\n  const decision = (\n    await permissionApi.authorize(\n      [\n        {\n          permission: permissionRequired,\n        },\n      ],\n      {\n        credentials: await httpAuth.credentials(req),\n      },\n    )\n  )[0];\n\n  if (decision.result === AuthorizeResult.ALLOW) {\n    return;\n  }\n  throw new NotAllowedError('Unauthorized');\n}\n"],"names":["AuthorizeResult","NotAllowedError"],"mappings":";;;;;AA4BA,eAAsB,iBACpB,CAAA,aAAA,EACA,kBACA,EAAA,QAAA,EACA,GACA,EAAA;AACA,EAAM,MAAA,QAAA,GAAA,CACJ,MAAM,aAAc,CAAA,SAAA;AAAA,IAClB;AAAA,MACE;AAAA,QACE,UAAY,EAAA;AAAA;AACd,KACF;AAAA,IACA;AAAA,MACE,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG;AAAA;AAC7C,KAEF,CAAC,CAAA;AAEH,EAAI,IAAA,QAAA,CAAS,MAAW,KAAAA,sCAAA,CAAgB,KAAO,EAAA;AAC7C,IAAA;AAAA;AAEF,EAAM,MAAA,IAAIC,uBAAgB,cAAc,CAAA;AAC1C;;;;"}