import { jsxs, jsx } from 'react/jsx-runtime';
import Typography from '@material-ui/core/Typography';
import { WarningPanel } from '@backstage/core-components';

const clustersWithErrorsToErrorMessage = (clustersWithErrors) => {
  return clustersWithErrors.map((c, i) => {
    return /* @__PURE__ */ jsxs("div", { children: [
      /* @__PURE__ */ jsx(Typography, { variant: "body2", children: `Cluster: ${c.cluster.title || c.cluster.name}` }),
      c.errors.map((e, j) => {
        return /* @__PURE__ */ jsx(Typography, { variant: "body2", children: e.errorType === "FETCH_ERROR" ? `Error communicating with Kubernetes: ${e.errorType}, message: ${e.message}` : `Error fetching Kubernetes resource: '${e.resourcePath}', error: ${e.errorType}, status code: ${e.statusCode}` }, j);
      }),
      /* @__PURE__ */ jsx("br", {})
    ] }, i);
  });
};
const ErrorPanel = ({
  entityName,
  errorMessage,
  clustersWithErrors
}) => /* @__PURE__ */ jsxs(
  WarningPanel,
  {
    title: "There was a problem retrieving Kubernetes objects",
    message: `There was a problem retrieving some Kubernetes resources for the entity: ${entityName}. This could mean that the Error Reporting card is not completely accurate.`,
    children: [
      clustersWithErrors && /* @__PURE__ */ jsxs("div", { children: [
        "Errors: ",
        clustersWithErrorsToErrorMessage(clustersWithErrors)
      ] }),
      errorMessage && /* @__PURE__ */ jsxs(Typography, { variant: "body2", children: [
        "Errors: ",
        errorMessage
      ] })
    ]
  }
);

export { ErrorPanel };
//# sourceMappingURL=ErrorPanel.esm.js.map
