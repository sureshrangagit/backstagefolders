import { jsx, jsxs } from 'react/jsx-runtime';
import { KubernetesStructuredMetadataTableDrawer } from '../KubernetesDrawer/KubernetesStructuredMetadataTableDrawer.esm.js';
import '../KubernetesDrawer/KubernetesDrawer.esm.js';
import '@backstage/core-components';
import '@material-ui/core/FormControlLabel';
import '@material-ui/core/Switch';
import 'js-yaml';
import 'react';
import { renderCondition } from '../../utils/pod.esm.js';
import Typography from '@material-ui/core/Typography';
import Grid from '@material-ui/core/Grid';
import Chip from '@material-ui/core/Chip';

const DeploymentDrawer = ({
  deployment,
  expanded
}) => {
  const namespace = deployment.metadata?.namespace;
  return /* @__PURE__ */ jsx(
    KubernetesStructuredMetadataTableDrawer,
    {
      object: deployment,
      expanded,
      kind: "Deployment",
      renderObject: (deploymentObj) => {
        const conditions = (deploymentObj.status?.conditions ?? []).map(renderCondition).reduce((accum, next) => {
          accum[next[0]] = next[1];
          return accum;
        }, {});
        return {
          strategy: deploymentObj.spec?.strategy ?? "???",
          minReadySeconds: deploymentObj.spec?.minReadySeconds ?? "???",
          progressDeadlineSeconds: deploymentObj.spec?.progressDeadlineSeconds ?? "???",
          ...conditions
        };
      },
      children: /* @__PURE__ */ jsxs(
        Grid,
        {
          container: true,
          direction: "column",
          justifyContent: "flex-start",
          alignItems: "flex-start",
          spacing: 0,
          children: [
            /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(Typography, { variant: "body1", children: deployment.metadata?.name ?? "unknown object" }) }),
            /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(Typography, { color: "textSecondary", variant: "subtitle1", children: "Deployment" }) }),
            namespace && /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(Chip, { size: "small", label: `namespace: ${namespace}` }) })
          ]
        }
      )
    }
  );
};

export { DeploymentDrawer };
//# sourceMappingURL=DeploymentDrawer.esm.js.map
