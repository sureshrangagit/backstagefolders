import { jsx, jsxs } from 'react/jsx-runtime';
import { useContext } from 'react';
import Accordion from '@material-ui/core/Accordion';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import { JobsAccordions } from '../JobsAccordions/JobsAccordions.esm.js';
import { CronJobDrawer } from './CronJobsDrawer.esm.js';
import { getOwnedResources } from '../../utils/owner.esm.js';
import '@backstage/core-plugin-api';
import 'react-use/esm/useAsync';
import '../../api/types.esm.js';
import 'react-use/esm/useInterval';
import 'react-use/esm/useAsyncRetry';
import '../../kubernetes-auth-provider/types.esm.js';
import '../../hooks/PodNamesWithErrors.esm.js';
import '../../hooks/PodNamesWithMetrics.esm.js';
import { GroupedResponsesContext } from '../../hooks/GroupedResponses.esm.js';
import '../../hooks/Cluster.esm.js';
import '../../hooks/usePodMetrics.esm.js';
import '../../hooks/useMatchingErrors.esm.js';
import { StatusError, StatusOK } from '@backstage/core-components';
import { humanizeCron } from '../../utils/crons.esm.js';

const CronJobSummary = ({ cronJob }) => {
  return /* @__PURE__ */ jsxs(
    Grid,
    {
      container: true,
      direction: "row",
      justifyContent: "space-between",
      alignItems: "center",
      spacing: 0,
      children: [
        /* @__PURE__ */ jsx(Grid, { xs: 6, item: true, children: /* @__PURE__ */ jsx(CronJobDrawer, { cronJob }) }),
        /* @__PURE__ */ jsxs(
          Grid,
          {
            item: true,
            container: true,
            xs: 6,
            direction: "column",
            justifyContent: "flex-start",
            alignItems: "flex-end",
            spacing: 0,
            children: [
              /* @__PURE__ */ jsx(Grid, { item: true, children: cronJob.spec?.suspend ? /* @__PURE__ */ jsx(StatusError, { children: "Suspended" }) : /* @__PURE__ */ jsx(StatusOK, { children: "Active" }) }),
              /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsxs(Typography, { variant: "body1", children: [
                "Schedule:",
                " ",
                cronJob.spec?.schedule ? `${cronJob.spec.schedule} (${humanizeCron(
                  cronJob.spec.schedule
                )})` : "N/A"
              ] }) })
            ]
          }
        )
      ]
    }
  );
};
const CronJobAccordion = ({ cronJob, ownedJobs }) => {
  return /* @__PURE__ */ jsxs(Accordion, { TransitionProps: { unmountOnExit: true }, variant: "outlined", children: [
    /* @__PURE__ */ jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}), children: /* @__PURE__ */ jsx(CronJobSummary, { cronJob }) }),
    /* @__PURE__ */ jsx(AccordionDetails, { children: /* @__PURE__ */ jsx(JobsAccordions, { jobs: ownedJobs.reverse() }) })
  ] });
};
const CronJobsAccordions = ({}) => {
  const groupedResponses = useContext(GroupedResponsesContext);
  return /* @__PURE__ */ jsx(
    Grid,
    {
      container: true,
      direction: "column",
      justifyContent: "flex-start",
      alignItems: "flex-start",
      children: groupedResponses.cronJobs.map((cronJob, i) => /* @__PURE__ */ jsx(Grid, { container: true, item: true, xs: true, children: /* @__PURE__ */ jsx(Grid, { item: true, xs: true, children: /* @__PURE__ */ jsx(
        CronJobAccordion,
        {
          ownedJobs: getOwnedResources(cronJob, groupedResponses.jobs),
          cronJob
        }
      ) }) }, i))
    }
  );
};

export { CronJobsAccordions };
//# sourceMappingURL=CronJobsAccordions.esm.js.map
