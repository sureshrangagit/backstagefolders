import { jsx, jsxs } from 'react/jsx-runtime';
import { useContext } from 'react';
import Accordion from '@material-ui/core/Accordion';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import Grid from '@material-ui/core/Grid';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import '../Pods/PodDrawer/PodDrawer.esm.js';
import { StatusOK, StatusError } from '@backstage/core-components';
import '@material-ui/core/Card';
import '@material-ui/core/CardActions';
import '@material-ui/core/CardContent';
import '@material-ui/core/CardHeader';
import '@material-ui/core/Typography';
import 'luxon';
import '@backstage/core-plugin-api';
import 'react-use/esm/useAsync';
import '../../api/types.esm.js';
import 'react-use/esm/useInterval';
import 'react-use/esm/useAsyncRetry';
import '../../kubernetes-auth-provider/types.esm.js';
import { PodNamesWithErrorsContext } from '../../hooks/PodNamesWithErrors.esm.js';
import '../../hooks/PodNamesWithMetrics.esm.js';
import { GroupedResponsesContext } from '../../hooks/GroupedResponses.esm.js';
import '../../hooks/Cluster.esm.js';
import '../../hooks/usePodMetrics.esm.js';
import '../../hooks/useMatchingErrors.esm.js';
import '@material-ui/icons/OpenInBrowser';
import '../KubernetesDialog/KubernetesDialog.esm.js';
import '../PodExecTerminal/PodExecTerminal.esm.js';
import '@material-ui/core/Paper';
import '@material-ui/lab/Skeleton';
import '@material-ui/icons/Subject';
import '@material-ui/core/List';
import '@material-ui/core/ListItem';
import '../Pods/FixDialog/FixDialog.esm.js';
import '@material-ui/core/Avatar';
import '@material-ui/core/Container';
import '@material-ui/core/ListItemAvatar';
import '@material-ui/core/ListItemText';
import '@material-ui/core/Tooltip';
import '@material-ui/icons/Info';
import '@material-ui/icons/Warning';
import '../Pods/ErrorList/ErrorList.esm.js';
import { PodsTable, READY_COLUMNS, RESOURCE_COLUMNS } from '../Pods/PodsTable.esm.js';
import { DaemonSetDrawer } from './DaemonSetsDrawer.esm.js';
import { getOwnedResources } from '../../utils/owner.esm.js';

const DaemonSetSummary = ({
  daemonset,
  numberOfCurrentPods,
  numberOfPodsWithErrors
}) => {
  return /* @__PURE__ */ jsxs(
    Grid,
    {
      container: true,
      direction: "row",
      justifyContent: "space-between",
      alignItems: "center",
      spacing: 0,
      children: [
        /* @__PURE__ */ jsx(Grid, { xs: 4, item: true, children: /* @__PURE__ */ jsx(DaemonSetDrawer, { daemonset }) }),
        /* @__PURE__ */ jsxs(
          Grid,
          {
            item: true,
            container: true,
            xs: 4,
            direction: "column",
            justifyContent: "flex-start",
            alignItems: "flex-end",
            spacing: 0,
            children: [
              /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsxs(StatusOK, { children: [
                numberOfCurrentPods,
                " pods"
              ] }) }),
              /* @__PURE__ */ jsx(Grid, { item: true, children: numberOfPodsWithErrors > 0 ? /* @__PURE__ */ jsxs(StatusError, { children: [
                numberOfPodsWithErrors,
                " pod",
                numberOfPodsWithErrors > 1 ? "s" : "",
                " with errors"
              ] }) : /* @__PURE__ */ jsx(StatusOK, { children: "No pods with errors" }) })
            ]
          }
        )
      ]
    }
  );
};
const DaemonSetAccordion = ({
  daemonset,
  ownedPods
}) => {
  const podNamesWithErrors = useContext(PodNamesWithErrorsContext);
  const podsWithErrors = ownedPods.filter(
    (p) => podNamesWithErrors.has(p.metadata?.name ?? "")
  );
  return /* @__PURE__ */ jsxs(Accordion, { TransitionProps: { unmountOnExit: true }, variant: "outlined", children: [
    /* @__PURE__ */ jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}), children: /* @__PURE__ */ jsx(
      DaemonSetSummary,
      {
        daemonset,
        numberOfCurrentPods: ownedPods.length,
        numberOfPodsWithErrors: podsWithErrors.length
      }
    ) }),
    /* @__PURE__ */ jsx(AccordionDetails, { children: /* @__PURE__ */ jsx(
      PodsTable,
      {
        pods: ownedPods,
        extraColumns: [READY_COLUMNS, RESOURCE_COLUMNS]
      }
    ) })
  ] });
};
const DaemonSetsAccordions = ({}) => {
  const groupedResponses = useContext(GroupedResponsesContext);
  return /* @__PURE__ */ jsx(
    Grid,
    {
      container: true,
      direction: "column",
      justifyContent: "flex-start",
      alignItems: "flex-start",
      children: groupedResponses.daemonSets.map((daemonset, i) => /* @__PURE__ */ jsx(Grid, { container: true, item: true, xs: true, children: /* @__PURE__ */ jsx(Grid, { item: true, xs: true, children: /* @__PURE__ */ jsx(
        DaemonSetAccordion,
        {
          ownedPods: getOwnedResources(daemonset, groupedResponses.pods),
          daemonset
        }
      ) }) }, i))
    }
  );
};

export { DaemonSetsAccordions };
//# sourceMappingURL=DaemonSetsAccordions.esm.js.map
