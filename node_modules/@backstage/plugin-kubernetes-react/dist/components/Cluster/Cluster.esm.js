import { jsx, jsxs } from 'react/jsx-runtime';
import Accordion from '@material-ui/core/Accordion';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import { groupResponses } from '@backstage/plugin-kubernetes-common';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import { DeploymentsAccordions } from '../DeploymentsAccordions/DeploymentsAccordions.esm.js';
import { StatefulSetsAccordions } from '../StatefulSetsAccordions/StatefulSetsAccordions.esm.js';
import { IngressesAccordions } from '../IngressesAccordions/IngressesAccordions.esm.js';
import { ServicesAccordions } from '../ServicesAccordions/ServicesAccordions.esm.js';
import { CronJobsAccordions } from '../CronJobsAccordions/CronJobsAccordions.esm.js';
import { CustomResources } from '../CustomResources/CustomResources.esm.js';
import { DaemonSetsAccordions } from '../DaemonSetsAccordions/DaemonSetsAccordions.esm.js';
import '@backstage/core-plugin-api';
import 'react-use/esm/useAsync';
import '../../api/types.esm.js';
import 'react';
import 'react-use/esm/useInterval';
import 'react-use/esm/useAsyncRetry';
import '../../kubernetes-auth-provider/types.esm.js';
import { PodNamesWithErrorsContext } from '../../hooks/PodNamesWithErrors.esm.js';
import '../../hooks/PodNamesWithMetrics.esm.js';
import { GroupedResponsesContext } from '../../hooks/GroupedResponses.esm.js';
import { ClusterContext } from '../../hooks/Cluster.esm.js';
import { PodMetricsContext } from '../../hooks/usePodMetrics.esm.js';
import '../../hooks/useMatchingErrors.esm.js';
import { StatusOK, StatusError } from '@backstage/core-components';

const ClusterSummary = ({
  clusterName,
  totalNumberOfPods,
  numberOfPodsWithErrors
}) => {
  return /* @__PURE__ */ jsxs(
    Grid,
    {
      container: true,
      direction: "row",
      justifyContent: "space-between",
      alignItems: "flex-start",
      spacing: 0,
      children: [
        /* @__PURE__ */ jsx(
          Grid,
          {
            xs: 6,
            item: true,
            container: true,
            direction: "column",
            justifyContent: "flex-start",
            alignItems: "flex-start",
            spacing: 0,
            children: /* @__PURE__ */ jsxs(Grid, { item: true, xs: true, children: [
              /* @__PURE__ */ jsx(Typography, { variant: "body1", children: clusterName }),
              /* @__PURE__ */ jsx(Typography, { color: "textSecondary", variant: "subtitle1", children: "Cluster" })
            ] })
          }
        ),
        /* @__PURE__ */ jsxs(
          Grid,
          {
            item: true,
            container: true,
            xs: 3,
            direction: "column",
            justifyContent: "flex-start",
            alignItems: "flex-end",
            spacing: 0,
            children: [
              /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsxs(StatusOK, { children: [
                totalNumberOfPods,
                " pods"
              ] }) }),
              /* @__PURE__ */ jsx(Grid, { item: true, children: numberOfPodsWithErrors > 0 ? /* @__PURE__ */ jsxs(StatusError, { children: [
                numberOfPodsWithErrors,
                " pods with errors"
              ] }) : /* @__PURE__ */ jsx(StatusOK, { children: "No pods with errors" }) })
            ]
          }
        )
      ]
    }
  );
};
const Cluster = ({ clusterObjects, podsWithErrors }) => {
  const groupedResponses = groupResponses(clusterObjects.resources);
  const podMetricsMap = /* @__PURE__ */ new Map();
  podMetricsMap.set(clusterObjects.cluster.name, clusterObjects.podMetrics);
  return /* @__PURE__ */ jsx(ClusterContext.Provider, { value: clusterObjects.cluster, children: /* @__PURE__ */ jsx(GroupedResponsesContext.Provider, { value: groupedResponses, children: /* @__PURE__ */ jsx(PodMetricsContext.Provider, { value: podMetricsMap, children: /* @__PURE__ */ jsx(PodNamesWithErrorsContext.Provider, { value: podsWithErrors, children: /* @__PURE__ */ jsxs(Accordion, { TransitionProps: { unmountOnExit: true }, children: [
    /* @__PURE__ */ jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}), children: /* @__PURE__ */ jsx(
      ClusterSummary,
      {
        clusterName: clusterObjects.cluster.title || clusterObjects.cluster.name,
        totalNumberOfPods: groupedResponses.pods.length,
        numberOfPodsWithErrors: podsWithErrors.size
      }
    ) }),
    /* @__PURE__ */ jsx(AccordionDetails, { children: /* @__PURE__ */ jsxs(Grid, { container: true, direction: "column", children: [
      groupedResponses.customResources.length > 0 ? /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(CustomResources, {}) }) : void 0,
      groupedResponses.deployments.length > 0 ? /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(DeploymentsAccordions, {}) }) : void 0,
      groupedResponses.daemonSets.length > 0 ? /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(DaemonSetsAccordions, {}) }) : void 0,
      groupedResponses.statefulsets.length > 0 ? /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(StatefulSetsAccordions, {}) }) : void 0,
      groupedResponses.ingresses.length > 0 ? /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(IngressesAccordions, {}) }) : void 0,
      groupedResponses.services.length > 0 ? /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(ServicesAccordions, {}) }) : void 0,
      groupedResponses.cronJobs.length > 0 ? /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(CronJobsAccordions, {}) }) : void 0
    ] }) })
  ] }) }) }) }) });
};

export { Cluster };
//# sourceMappingURL=Cluster.esm.js.map
