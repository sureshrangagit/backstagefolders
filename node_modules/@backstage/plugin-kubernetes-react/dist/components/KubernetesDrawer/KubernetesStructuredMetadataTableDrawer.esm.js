import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useState, useContext } from 'react';
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import IconButton from '@material-ui/core/IconButton';
import Drawer from '@material-ui/core/Drawer';
import Switch from '@material-ui/core/Switch';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import Grid from '@material-ui/core/Grid';
import { makeStyles, createStyles, withStyles } from '@material-ui/core/styles';
import CloseIcon from '@material-ui/icons/Close';
import OpenInNewIcon from '@material-ui/icons/OpenInNew';
import { WarningPanel, LinkButton, StructuredMetadataTable } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import useAsync from 'react-use/esm/useAsync';
import { kubernetesClusterLinkFormatterApiRef } from '../../api/types.esm.js';
import 'react-use/esm/useInterval';
import 'react-use/esm/useAsyncRetry';
import '../../kubernetes-auth-provider/types.esm.js';
import '../../hooks/PodNamesWithErrors.esm.js';
import '../../hooks/PodNamesWithMetrics.esm.js';
import '../../hooks/GroupedResponses.esm.js';
import { ClusterContext } from '../../hooks/Cluster.esm.js';
import '../../hooks/usePodMetrics.esm.js';
import '../../hooks/useMatchingErrors.esm.js';
import { ManifestYaml } from './ManifestYaml.esm.js';
import '@backstage/catalog-model';
import '@backstage/errors';

const useDrawerStyles = makeStyles(
  (theme) => createStyles({
    paper: {
      width: "50%",
      justifyContent: "space-between",
      padding: theme.spacing(2.5)
    }
  })
);
const useDrawerContentStyles = makeStyles(
  (_) => createStyles({
    header: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-between"
    },
    errorMessage: {
      marginTop: "1em",
      marginBottom: "1em"
    },
    options: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-between"
    },
    icon: {
      fontSize: 20
    },
    content: {
      height: "80%"
    }
  })
);
const PodDrawerButton = withStyles({
  root: {
    padding: "6px 5px"
  },
  label: {
    textTransform: "none"
  }
})(Button);
const LinkErrorPanel = ({
  cluster,
  errorMessage
}) => /* @__PURE__ */ jsx(
  WarningPanel,
  {
    title: "There was a problem formatting the link to the Kubernetes dashboard",
    message: `Could not format the link to the dashboard of your cluster named '${cluster.name}'. Its dashboardApp property has been set to '${cluster.dashboardApp || "standard"}.'`,
    children: errorMessage && /* @__PURE__ */ jsxs(Typography, { variant: "body2", children: [
      "Errors: ",
      errorMessage
    ] })
  }
);
function replaceNullsWithUndefined(someObj) {
  const replacer = (_, value) => String(value) === "null" || String(value) === "undefined" ? void 0 : value;
  return JSON.parse(JSON.stringify(someObj, replacer));
}
const KubernetesStructuredMetadataTableDrawerContent = ({
  toggleDrawer,
  object,
  renderObject,
  kind
}) => {
  const [isYaml, setIsYaml] = useState(false);
  const formatter = useApi(kubernetesClusterLinkFormatterApiRef);
  const classes = useDrawerContentStyles();
  const cluster = useContext(ClusterContext);
  const { value: clusterLink, error } = useAsync(
    async () => formatter.formatClusterLink({
      dashboardUrl: cluster.dashboardUrl,
      dashboardApp: cluster.dashboardApp,
      dashboardParameters: cluster.dashboardParameters,
      object,
      kind
    }),
    [cluster, object, kind, formatter]
  );
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx("div", { className: classes.header, children: /* @__PURE__ */ jsxs(Grid, { container: true, justifyContent: "flex-start", alignItems: "flex-start", children: [
      /* @__PURE__ */ jsx(Grid, { item: true, xs: 11, children: /* @__PURE__ */ jsx(Typography, { variant: "h5", children: object.metadata?.name ?? "unknown name" }) }),
      /* @__PURE__ */ jsx(Grid, { item: true, xs: 1, children: /* @__PURE__ */ jsx(
        IconButton,
        {
          title: "Close the drawer",
          onClick: (e) => toggleDrawer(e, false),
          color: "inherit",
          children: /* @__PURE__ */ jsx(CloseIcon, { className: classes.icon })
        },
        "dismiss"
      ) }),
      /* @__PURE__ */ jsx(Grid, { item: true, xs: 11, children: /* @__PURE__ */ jsx(Typography, { color: "textSecondary", variant: "body1", children: kind }) }),
      /* @__PURE__ */ jsx(Grid, { item: true, xs: 11, children: /* @__PURE__ */ jsx(
        FormControlLabel,
        {
          control: /* @__PURE__ */ jsx(
            Switch,
            {
              checked: isYaml,
              onChange: (event) => {
                setIsYaml(event.target.checked);
              },
              name: "YAML"
            }
          ),
          label: "YAML"
        }
      ) })
    ] }) }),
    error && /* @__PURE__ */ jsx("div", { className: classes.errorMessage, children: /* @__PURE__ */ jsx(
      LinkErrorPanel,
      {
        cluster,
        errorMessage: error.message || error.toString()
      }
    ) }),
    /* @__PURE__ */ jsx("div", { className: classes.options, children: /* @__PURE__ */ jsx("div", { children: clusterLink && /* @__PURE__ */ jsx(
      LinkButton,
      {
        variant: "outlined",
        color: "primary",
        size: "small",
        to: clusterLink,
        endIcon: /* @__PURE__ */ jsx(OpenInNewIcon, {}),
        children: "Open Kubernetes Dashboard"
      }
    ) }) }),
    /* @__PURE__ */ jsxs("div", { className: classes.content, children: [
      isYaml && /* @__PURE__ */ jsx(ManifestYaml, { object }),
      !isYaml && /* @__PURE__ */ jsx(
        StructuredMetadataTable,
        {
          metadata: renderObject(replaceNullsWithUndefined(object)),
          options: { nestedValuesAsYaml: true }
        }
      )
    ] })
  ] });
};
const KubernetesStructuredMetadataTableDrawer = ({
  object,
  renderObject,
  kind,
  buttonVariant = "subtitle2",
  expanded = false,
  children
}) => {
  const [isOpen, setIsOpen] = useState(expanded);
  const classes = useDrawerStyles();
  const toggleDrawer = (e, newValue) => {
    e.stopPropagation();
    setIsOpen(newValue);
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      PodDrawerButton,
      {
        onClick: (e) => toggleDrawer(e, true),
        onFocus: (event) => event.stopPropagation(),
        children: children === void 0 ? /* @__PURE__ */ jsx(Typography, { variant: buttonVariant, children: object.metadata?.name ?? "unknown object" }) : children
      }
    ),
    /* @__PURE__ */ jsx(
      Drawer,
      {
        classes: {
          paper: classes.paper
        },
        anchor: "right",
        open: isOpen,
        onClose: (e) => toggleDrawer(e, false),
        onClick: (event) => event.stopPropagation(),
        children: /* @__PURE__ */ jsx(
          KubernetesStructuredMetadataTableDrawerContent,
          {
            kind,
            toggleDrawer,
            object,
            renderObject
          }
        )
      }
    )
  ] });
};

export { KubernetesStructuredMetadataTableDrawer, LinkErrorPanel };
//# sourceMappingURL=KubernetesStructuredMetadataTableDrawer.esm.js.map
