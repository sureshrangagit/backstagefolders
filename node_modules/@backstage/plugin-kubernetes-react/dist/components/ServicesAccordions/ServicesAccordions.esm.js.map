{"version":3,"file":"ServicesAccordions.esm.js","sources":["../../../src/components/ServicesAccordions/ServicesAccordions.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useContext } from 'react';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport type { V1Service } from '@kubernetes/client-node';\nimport { ServiceDrawer } from './ServiceDrawer';\nimport { GroupedResponsesContext } from '../../hooks';\nimport { StructuredMetadataTable } from '@backstage/core-components';\n\ntype ServiceSummaryProps = {\n  service: V1Service;\n};\n\nconst ServiceSummary = ({ service }: ServiceSummaryProps) => {\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      spacing={0}\n    >\n      <Grid xs={8} item>\n        <ServiceDrawer service={service} />\n      </Grid>\n\n      <Grid item>\n        <Typography variant=\"subtitle2\">\n          Type: {service.spec?.type ?? '?'}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\ntype ServiceCardProps = {\n  service: V1Service;\n};\n\nconst ServiceCard = ({ service }: ServiceCardProps) => {\n  const metadata: any = {};\n\n  if (service.status?.loadBalancer?.ingress?.length ?? -1 > 0) {\n    metadata.loadbalancer = service.status?.loadBalancer;\n  }\n\n  if (service.spec?.type === 'ClusterIP') {\n    metadata.clusterIP = service.spec.clusterIP;\n  }\n  if (service.spec?.type === 'ExternalName') {\n    metadata.externalName = service.spec.externalName;\n  }\n\n  return (\n    <StructuredMetadataTable\n      metadata={{\n        type: service.spec?.type,\n        ports: service.spec?.ports,\n        ...metadata,\n      }}\n      options={{ nestedValuesAsYaml: true }}\n    />\n  );\n};\n\n/**\n *\n *\n * @public\n */\nexport type ServicesAccordionsProps = {};\n\ntype ServiceAccordionProps = {\n  service: V1Service;\n};\n\nconst ServiceAccordion = ({ service }: ServiceAccordionProps) => {\n  return (\n    <Accordion TransitionProps={{ unmountOnExit: true }} variant=\"outlined\">\n      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n        <ServiceSummary service={service} />\n      </AccordionSummary>\n      <AccordionDetails>\n        <ServiceCard service={service} />\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\n/**\n *\n *\n * @public\n */\nexport const ServicesAccordions = ({}: ServicesAccordionsProps) => {\n  const groupedResponses = useContext(GroupedResponsesContext);\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justifyContent=\"flex-start\"\n      alignItems=\"flex-start\"\n    >\n      {groupedResponses.services.map((service, i) => (\n        <Grid item key={i} xs>\n          <ServiceAccordion service={service} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n"],"names":[],"mappings":"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"}