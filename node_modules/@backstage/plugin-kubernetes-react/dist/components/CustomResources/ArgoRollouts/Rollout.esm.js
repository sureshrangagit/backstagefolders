import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useContext } from 'react';
import Accordion from '@material-ui/core/Accordion';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import '../../Pods/PodDrawer/PodDrawer.esm.js';
import { StatusOK, StatusError } from '@backstage/core-components';
import '@material-ui/core/Card';
import '@material-ui/core/CardActions';
import '@material-ui/core/CardContent';
import '@material-ui/core/CardHeader';
import { DateTime } from 'luxon';
import '@backstage/core-plugin-api';
import 'react-use/esm/useAsync';
import '../../../api/types.esm.js';
import 'react-use/esm/useInterval';
import 'react-use/esm/useAsyncRetry';
import '../../../kubernetes-auth-provider/types.esm.js';
import { PodNamesWithErrorsContext } from '../../../hooks/PodNamesWithErrors.esm.js';
import '../../../hooks/PodNamesWithMetrics.esm.js';
import { GroupedResponsesContext } from '../../../hooks/GroupedResponses.esm.js';
import '../../../hooks/Cluster.esm.js';
import '../../../hooks/usePodMetrics.esm.js';
import '../../../hooks/useMatchingErrors.esm.js';
import '@material-ui/icons/OpenInBrowser';
import '../../KubernetesDialog/KubernetesDialog.esm.js';
import '../../PodExecTerminal/PodExecTerminal.esm.js';
import '@material-ui/core/Paper';
import '@material-ui/lab/Skeleton';
import '@material-ui/icons/Subject';
import '@material-ui/core/List';
import '@material-ui/core/ListItem';
import '../../Pods/FixDialog/FixDialog.esm.js';
import '@material-ui/core/Avatar';
import '@material-ui/core/Container';
import '@material-ui/core/ListItemAvatar';
import '@material-ui/core/ListItemText';
import '@material-ui/core/Tooltip';
import '@material-ui/icons/Info';
import '@material-ui/icons/Warning';
import '../../Pods/ErrorList/ErrorList.esm.js';
import { PodsTable, READY_COLUMNS, RESOURCE_COLUMNS } from '../../Pods/PodsTable.esm.js';
import { HorizontalPodAutoscalerDrawer } from '../../HorizontalPodAutoscalers/HorizontalPodAutoscalerDrawer.esm.js';
import { RolloutDrawer } from './RolloutDrawer.esm.js';
import PauseIcon from '@material-ui/icons/Pause';
import ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';
import { StepsProgress } from './StepsProgress.esm.js';
import { getMatchingHpa, getOwnedPodsThroughReplicaSets } from '../../../utils/owner.esm.js';

const AbortedTitle = /* @__PURE__ */ jsxs(
  "div",
  {
    style: {
      display: "flex",
      alignItems: "center",
      flexWrap: "wrap"
    },
    children: [
      /* @__PURE__ */ jsx(ErrorOutlineIcon, {}),
      /* @__PURE__ */ jsx(Typography, { variant: "subtitle1", children: "Aborted" })
    ]
  }
);
const findAbortedMessage = (rollout) => rollout.status?.conditions?.find(
  (c) => c.type === "Progressing" && c.status === "False" && c.reason === "RolloutAborted"
)?.message;
const RolloutSummary = ({
  rollout,
  numberOfCurrentPods,
  numberOfPodsWithErrors,
  hpa
}) => {
  const pauseTime = rollout.status?.pauseConditions?.find(
    (p) => p.reason === "CanaryPauseStep"
  )?.startTime;
  const abortedMessage = findAbortedMessage(rollout);
  const specCpuUtil = hpa?.spec?.metrics?.find(
    (metric) => metric.type === "Resource" && metric.resource?.name === "cpu"
  )?.resource?.target.averageUtilization;
  const cpuUtil = hpa?.status?.currentMetrics?.find(
    (metric) => metric.type === "Resource" && metric.resource?.name === "cpu"
  )?.resource?.current.averageUtilization;
  return /* @__PURE__ */ jsxs(
    Grid,
    {
      container: true,
      direction: "row",
      justifyContent: "space-between",
      alignItems: "center",
      spacing: 0,
      children: [
        /* @__PURE__ */ jsx(Grid, { xs: 6, item: true, children: /* @__PURE__ */ jsx(RolloutDrawer, { rollout }) }),
        hpa && /* @__PURE__ */ jsx(Grid, { item: true, xs: 3, children: /* @__PURE__ */ jsx(HorizontalPodAutoscalerDrawer, { hpa, children: /* @__PURE__ */ jsxs(
          Grid,
          {
            item: true,
            container: true,
            direction: "column",
            justifyContent: "flex-start",
            alignItems: "flex-start",
            spacing: 0,
            children: [
              /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsxs(Typography, { variant: "subtitle2", children: [
                "min replicas ",
                hpa.spec?.minReplicas ?? "?",
                " / max replicas",
                " ",
                hpa.spec?.maxReplicas ?? "?"
              ] }) }),
              /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsxs(Typography, { variant: "subtitle2", children: [
                "current CPU usage: ",
                cpuUtil ?? "?",
                "%"
              ] }) }),
              /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsxs(Typography, { variant: "subtitle2", children: [
                "target CPU usage: ",
                specCpuUtil ?? "?",
                "%"
              ] }) })
            ]
          }
        ) }) }),
        /* @__PURE__ */ jsxs(
          Grid,
          {
            item: true,
            container: true,
            xs: 3,
            direction: "column",
            justifyContent: "flex-start",
            alignItems: "flex-end",
            spacing: 0,
            children: [
              /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsxs(StatusOK, { children: [
                numberOfCurrentPods,
                " pods"
              ] }) }),
              /* @__PURE__ */ jsx(Grid, { item: true, children: numberOfPodsWithErrors > 0 ? /* @__PURE__ */ jsxs(StatusError, { children: [
                numberOfPodsWithErrors,
                " pod",
                numberOfPodsWithErrors > 1 ? "s" : "",
                " with errors"
              ] }) : /* @__PURE__ */ jsx(StatusOK, { children: "No pods with errors" }) })
            ]
          }
        ),
        pauseTime && /* @__PURE__ */ jsx(Grid, { item: true, xs: 3, children: /* @__PURE__ */ jsxs(
          "div",
          {
            style: {
              display: "flex",
              alignItems: "center",
              flexWrap: "wrap"
            },
            children: [
              /* @__PURE__ */ jsx(PauseIcon, {}),
              /* @__PURE__ */ jsxs(Typography, { variant: "subtitle1", children: [
                "Paused (",
                DateTime.fromISO(pauseTime).toRelative({ locale: "en" }),
                ")"
              ] })
            ]
          }
        ) }),
        abortedMessage && /* @__PURE__ */ jsx(Grid, { item: true, xs: 3, children: AbortedTitle })
      ]
    }
  );
};
const RolloutAccordion = ({
  rollout,
  ownedPods,
  matchingHpa,
  defaultExpanded
}) => {
  const podNamesWithErrors = useContext(PodNamesWithErrorsContext);
  const podsWithErrors = ownedPods.filter(
    (p) => podNamesWithErrors.has(p.metadata?.name ?? "")
  );
  const currentStepIndex = rollout.status?.currentStepIndex ?? 0;
  const abortedMessage = findAbortedMessage(rollout);
  return /* @__PURE__ */ jsxs(
    Accordion,
    {
      defaultExpanded,
      TransitionProps: { unmountOnExit: true },
      variant: "outlined",
      children: [
        /* @__PURE__ */ jsx(AccordionSummary, { expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}), children: /* @__PURE__ */ jsx(
          RolloutSummary,
          {
            rollout,
            numberOfCurrentPods: ownedPods.length,
            numberOfPodsWithErrors: podsWithErrors.length,
            hpa: matchingHpa
          }
        ) }),
        /* @__PURE__ */ jsx(AccordionDetails, { children: /* @__PURE__ */ jsxs("div", { style: { width: "100%" }, children: [
          /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(Typography, { variant: "h6", children: "Rollout status" }) }),
          /* @__PURE__ */ jsxs("div", { style: { margin: "1rem" }, children: [
            abortedMessage && /* @__PURE__ */ jsxs(Fragment, { children: [
              AbortedTitle,
              /* @__PURE__ */ jsx(Typography, { variant: "subtitle2", children: abortedMessage })
            ] }),
            /* @__PURE__ */ jsx(
              StepsProgress,
              {
                aborted: abortedMessage !== void 0,
                steps: rollout.spec?.strategy?.canary?.steps ?? [],
                currentStepIndex
              }
            )
          ] }),
          /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(
            PodsTable,
            {
              pods: ownedPods,
              extraColumns: [READY_COLUMNS, RESOURCE_COLUMNS]
            }
          ) })
        ] }) })
      ]
    }
  );
};
const RolloutAccordions = ({
  rollouts,
  defaultExpanded = false
}) => {
  const groupedResponses = useContext(GroupedResponsesContext);
  return /* @__PURE__ */ jsx(
    Grid,
    {
      container: true,
      direction: "column",
      justifyContent: "flex-start",
      alignItems: "flex-start",
      children: rollouts.map((rollout, i) => /* @__PURE__ */ jsx(Grid, { container: true, item: true, xs: true, children: /* @__PURE__ */ jsx(Grid, { item: true, xs: true, children: /* @__PURE__ */ jsx(
        RolloutAccordion,
        {
          defaultExpanded,
          matchingHpa: getMatchingHpa(
            {
              name: rollout.metadata?.name,
              namespace: rollout.metadata?.namespace,
              kind: "rollout"
            },
            groupedResponses.horizontalPodAutoscalers
          ),
          ownedPods: getOwnedPodsThroughReplicaSets(
            rollout,
            groupedResponses.replicaSets,
            groupedResponses.pods
          ),
          rollout
        }
      ) }) }, i))
    }
  );
};

export { RolloutAccordions };
//# sourceMappingURL=Rollout.esm.js.map
