import { jsx, jsxs } from 'react/jsx-runtime';
import Step from '@material-ui/core/Step';
import StepLabel from '@material-ui/core/StepLabel';
import Stepper from '@material-ui/core/Stepper';
import Typography from '@material-ui/core/Typography';

const isSetWeightStep = (step) => step.hasOwnProperty("setWeight");
const isPauseStep = (step) => step.hasOwnProperty("pause");
const isAnalysisStep = (step) => step.hasOwnProperty("analysis");
const createLabelForStep = (step) => {
  if (isSetWeightStep(step)) {
    return `setWeight ${step.setWeight}%`;
  } else if (isPauseStep(step)) {
    return step.pause.duration === void 0 ? "infinite pause" : `pause for ${step.pause.duration}`;
  } else if (isAnalysisStep(step)) {
    return /* @__PURE__ */ jsxs("div", { children: [
      /* @__PURE__ */ jsx(Typography, { paragraph: true, children: "analysis templates:" }),
      step.analysis.templates.map((t, i) => /* @__PURE__ */ jsx(Typography, { paragraph: true, children: `${t.templateName}${t.clusterScope ? " (cluster scoped)" : ""}` }, i))
    ] });
  }
  return "unknown step";
};
const StepsProgress = ({
  currentStepIndex,
  aborted,
  steps
}) => {
  const activeStepIndex = currentStepIndex >= steps.length ? currentStepIndex + 1 : currentStepIndex;
  return /* @__PURE__ */ jsx(Stepper, { activeStep: aborted ? -1 : activeStepIndex, alternativeLabel: true, children: steps.map((step, i) => /* @__PURE__ */ jsx(Step, { children: /* @__PURE__ */ jsx(StepLabel, { "data-testid": `step-${i}`, children: createLabelForStep(step) }) }, i)).concat(
    /* @__PURE__ */ jsx(Step, { children: /* @__PURE__ */ jsx(StepLabel, { "data-testid": "step--1", children: "Canary promoted" }) }, "-1")
  ) });
};

export { StepsProgress };
//# sourceMappingURL=StepsProgress.esm.js.map
