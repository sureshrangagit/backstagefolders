import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import Grid from '@material-ui/core/Grid';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import Typography from '@material-ui/core/Typography';
import { StatusError, StatusOK, StatusWarning } from '@backstage/core-components';
import { DateTime } from 'luxon';

const PodCondition = ({ condition }) => {
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    condition.status === "False" && /* @__PURE__ */ jsxs(StatusError, { children: [
      condition.type,
      " - (",
      condition.reason,
      " ",
      condition.lastTransitionTime && DateTime.fromISO(condition.lastTransitionTime).toRelative({
        locale: "en"
      }),
      ") - ",
      condition.message,
      " "
    ] }),
    condition.status === "True" && /* @__PURE__ */ jsxs(StatusOK, { children: [
      condition.type,
      " - (",
      condition.lastTransitionTime && DateTime.fromISO(condition.lastTransitionTime).toRelative({
        locale: "en"
      }),
      ")"
    ] }),
    condition.status === "Unknown" && /* @__PURE__ */ jsxs(StatusWarning, { children: [
      condition.type,
      " - (",
      condition.lastTransitionTime && DateTime.fromISO(condition.lastTransitionTime).toRelative({
        locale: "en"
      }),
      ") ",
      condition.message
    ] })
  ] });
};
const PendingPodContent = ({ pod }) => {
  const startupConditions = [
    pod.status?.conditions?.find((c) => c.type === "PodScheduled"),
    pod.status?.conditions?.find((c) => c.type === "Initialized"),
    pod.status?.conditions?.find((c) => c.type === "ContainersReady"),
    pod.status?.conditions?.find((c) => c.type === "Ready")
  ].filter((c) => !!c);
  return /* @__PURE__ */ jsx(Grid, { container: true, spacing: 2, children: /* @__PURE__ */ jsxs(Grid, { item: true, xs: 12, children: [
    /* @__PURE__ */ jsx(Typography, { variant: "h5", children: "Pod is Pending. Conditions:" }),
    /* @__PURE__ */ jsx(List, { children: startupConditions.map((c) => /* @__PURE__ */ jsx(ListItem, { children: /* @__PURE__ */ jsx(PodCondition, { condition: c }) }, c.type)) })
  ] }) });
};

export { PendingPodContent };
//# sourceMappingURL=PendingPodContent.esm.js.map
