import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useState } from 'react';
import Button from '@material-ui/core/Button';
import Grid from '@material-ui/core/Grid';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import IconButton from '@material-ui/core/IconButton';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import CloseIcon from '@material-ui/icons/Close';
import HelpIcon from '@material-ui/icons/Help';
import OpenInNewIcon from '@material-ui/icons/OpenInNew';
import { PodLogs } from '../PodLogs/PodLogs.esm.js';
import '@material-ui/icons/Subject';
import '../../KubernetesDialog/KubernetesDialog.esm.js';
import 'react-use/esm/useAsync';
import '@backstage/core-plugin-api';
import '../../../api/types.esm.js';
import { Events } from '../Events/Events.esm.js';
import { LinkButton } from '@backstage/core-components';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';

const useStyles = makeStyles(
  (theme) => createStyles({
    closeButton: {
      position: "absolute",
      right: theme.spacing(1),
      top: theme.spacing(1),
      color: theme.palette.grey[500]
    }
  })
);
const FixDialog = ({
  open,
  pod,
  error,
  clusterName
}) => {
  const [isOpen, setOpen] = useState(!!open);
  const classes = useStyles();
  const openDialog = () => {
    setOpen(true);
  };
  const closeDialog = () => {
    setOpen(false);
  };
  const pf = error.proposedFix;
  const dialogContent = () => {
    return /* @__PURE__ */ jsxs(Grid, { container: true, children: [
      /* @__PURE__ */ jsxs(Grid, { item: true, xs: 12, children: [
        /* @__PURE__ */ jsx(Typography, { variant: "h6", children: "Detected error:" }),
        /* @__PURE__ */ jsx(Typography, { children: error.message })
      ] }),
      /* @__PURE__ */ jsxs(Grid, { item: true, xs: 12, children: [
        /* @__PURE__ */ jsx(Typography, { variant: "h6", children: "Cause explanation:" }),
        /* @__PURE__ */ jsx(Typography, { children: error.proposedFix?.rootCauseExplanation ?? "unknown" })
      ] }),
      /* @__PURE__ */ jsxs(Grid, { item: true, xs: 12, children: [
        /* @__PURE__ */ jsx(Typography, { variant: "h6", children: "Fix:" }),
        /* @__PURE__ */ jsx(List, { children: (error.proposedFix?.actions ?? []).map((fix, i) => {
          return /* @__PURE__ */ jsx(ListItem, { children: fix }, `${pod.metadata?.name ?? "unknown"}-pf-${i}`);
        }) })
      ] }),
      pf && pf.type === "logs" && /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsx(Typography, { variant: "h6", children: "Crash logs:" }) }),
        /* @__PURE__ */ jsx(Grid, { item: true, xs: 9, children: /* @__PURE__ */ jsx(
          PodLogs,
          {
            previous: true,
            containerScope: {
              podName: pod.metadata?.name ?? "unknown",
              podNamespace: pod.metadata?.namespace ?? "unknown",
              cluster: { name: clusterName },
              containerName: pf.container
            }
          }
        ) })
      ] }),
      pf && pf.type === "events" && /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, children: /* @__PURE__ */ jsx(Typography, { variant: "h6", children: "Events:" }) }),
        /* @__PURE__ */ jsx(Grid, { item: true, xs: 9, children: /* @__PURE__ */ jsx(
          Events,
          {
            warningEventsOnly: true,
            involvedObjectName: pod.metadata?.name ?? "",
            namespace: pod.metadata?.namespace ?? "",
            clusterName
          }
        ) })
      ] })
    ] });
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      Button,
      {
        variant: "outlined",
        "aria-label": "fix issue",
        component: "label",
        onClick: openDialog,
        startIcon: /* @__PURE__ */ jsx(HelpIcon, {}),
        children: "Help"
      }
    ),
    /* @__PURE__ */ jsxs(Dialog, { maxWidth: "xl", fullWidth: true, open: isOpen, onClose: closeDialog, children: [
      /* @__PURE__ */ jsxs(DialogTitle, { id: "dialog-title", children: [
        pod.metadata?.name,
        " - ",
        error.type,
        /* @__PURE__ */ jsx(
          IconButton,
          {
            "aria-label": "close",
            className: classes.closeButton,
            onClick: closeDialog,
            children: /* @__PURE__ */ jsx(CloseIcon, {})
          }
        )
      ] }),
      /* @__PURE__ */ jsx(DialogContent, { children: dialogContent() }),
      /* @__PURE__ */ jsx(DialogActions, { children: pf && pf.type === "docs" && /* @__PURE__ */ jsx(
        LinkButton,
        {
          to: pf.docsLink,
          variant: "outlined",
          startIcon: /* @__PURE__ */ jsx(OpenInNewIcon, {}),
          target: "_blank",
          rel: "noopener",
          children: "Open docs"
        }
      ) })
    ] })
  ] });
};

export { FixDialog };
//# sourceMappingURL=FixDialog.esm.js.map
