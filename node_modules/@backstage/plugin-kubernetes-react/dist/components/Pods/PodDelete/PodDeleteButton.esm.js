import { jsx, jsxs } from 'react/jsx-runtime';
import { useState } from 'react';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import CardActions from '@material-ui/core/CardActions';
import Button from '@material-ui/core/Button';
import CloseIcon from '@material-ui/icons/Close';
import CircularProgress from '@material-ui/core/CircularProgress';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { kubernetesReactTranslationRef } from '../../../translation.esm.js';
import { usePodDelete } from './usePodDelete.esm.js';

const PodDeleteButton = ({ podScope }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [hasError, setHasError] = useState(false);
  const deletePod = usePodDelete();
  const { t } = useTranslationRef(kubernetesReactTranslationRef);
  const buttonText = t("podDrawer.buttons.delete");
  const handleDeleteClick = async () => {
    setIsLoading(true);
    try {
      await deletePod(podScope);
    } catch (error) {
      setHasError(true);
      console.error(error);
    }
  };
  return /* @__PURE__ */ jsx(Grid, { container: true, item: true, xs: 12, children: /* @__PURE__ */ jsxs(Grid, { item: true, xs: 12, children: [
    /* @__PURE__ */ jsx(CardActions, { children: /* @__PURE__ */ jsx(
      Button,
      {
        variant: "outlined",
        "aria-label": buttonText,
        component: "label",
        onClick: handleDeleteClick,
        startIcon: isLoading ? /* @__PURE__ */ jsx(CircularProgress, { size: 18 }) : /* @__PURE__ */ jsx(CloseIcon, {}),
        disabled: isLoading,
        children: buttonText
      }
    ) }),
    hasError && /* @__PURE__ */ jsx(
      Typography,
      {
        variant: "body1",
        color: "error",
        style: { textAlign: "right" },
        children: "Could not delete the pod. Please check the console for the full report."
      }
    )
  ] }) });
};

export { PodDeleteButton };
//# sourceMappingURL=PodDeleteButton.esm.js.map
