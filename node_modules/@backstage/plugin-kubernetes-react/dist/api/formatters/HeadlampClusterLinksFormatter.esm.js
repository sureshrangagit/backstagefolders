class HeadlampClusterLinksFormatter {
  async formatClusterLink(options) {
    const { dashboardUrl, dashboardParameters, object, kind } = options;
    if (!dashboardUrl && !dashboardParameters?.internal) {
      throw new Error(
        "Dashboard URL is required or dashboardInternal must be true"
      );
    }
    const clusterName = dashboardParameters?.clusterName ?? "default";
    const path = this.getHeadlampPath(kind, object, clusterName);
    if (!path) {
      throw new Error(`Could not find path for kind: ${kind}`);
    }
    let baseUrl;
    if (dashboardParameters?.internal) {
      baseUrl = new URL(window.location.origin);
      baseUrl.pathname = dashboardParameters.headlampRoute || "/headlamp";
    } else {
      if (!dashboardUrl?.href) {
        throw new Error(
          "Dashboard URL is required when not using internal dashboard"
        );
      }
      baseUrl = new URL(dashboardUrl.href);
    }
    baseUrl.searchParams.set("to", path);
    return baseUrl;
  }
  NAMESPACED_RESOURCES = /* @__PURE__ */ new Set([
    "pod",
    "deployment",
    "replicaset",
    "statefulset",
    "daemonset",
    "job",
    "cronjob",
    "service",
    "ingress",
    "configmap",
    "secret",
    "serviceaccount",
    "role",
    "rolebinding",
    "networkpolicy",
    "horizontalpodautoscaler",
    "poddisruptionbudget",
    "persistentvolumeclaim"
  ]);
  getHeadlampPath(kind, object, clusterName) {
    const lowercaseKind = kind.toLocaleLowerCase("en-US");
    const { name } = object.metadata ?? {};
    let { namespace } = object.metadata ?? {};
    if (!name) {
      throw new Error(`Resource name is required for kind: ${kind}`);
    }
    if (this.NAMESPACED_RESOURCES.has(lowercaseKind) && !namespace) {
      throw new Error(`Namespace is required for namespaced resource: ${kind}`);
    }
    if (!namespace) {
      namespace = "default";
    }
    const pathMap = {
      namespace: `/c/${clusterName}/namespaces/${name}`,
      node: `/c/${clusterName}/nodes/${name}`,
      persistentvolume: `/c/${clusterName}/storage/persistentvolumes/${name}`,
      persistentvolumeclaim: `/c/${clusterName}/storage/persistentvolumeclaims/${namespace}/${name}`,
      pod: `/c/${clusterName}/pods/${namespace}/${name}`,
      deployment: `/c/${clusterName}/deployments/${namespace}/${name}`,
      replicaset: `/c/${clusterName}/replicasets/${namespace}/${name}`,
      statefulset: `/c/${clusterName}/statefulsets/${namespace}/${name}`,
      daemonset: `/c/${clusterName}/daemonsets/${namespace}/${name}`,
      job: `/c/${clusterName}/jobs/${namespace}/${name}`,
      cronjob: `/c/${clusterName}/cronjobs/${namespace}/${name}`,
      service: `/c/${clusterName}/services/${namespace}/${name}`,
      ingress: `/c/${clusterName}/ingresses/${namespace}/${name}`,
      configmap: `/c/${clusterName}/configmaps/${namespace}/${name}`,
      secret: `/c/${clusterName}/secrets/${namespace}/${name}`,
      serviceaccount: `/c/${clusterName}/serviceaccounts/${namespace}/${name}`,
      role: `/c/${clusterName}/roles/${namespace}/${name}`,
      rolebinding: `/c/${clusterName}/rolebindings/${namespace}/${name}`,
      clusterrole: `/c/${clusterName}/clusterroles/${name}`,
      clusterrolebinding: `/c/${clusterName}/clusterrolebindings/${name}`,
      storageclass: `/c/${clusterName}/storage/storageclasses/${name}`,
      networkpolicy: `/c/${clusterName}/networkpolicies/${namespace}/${name}`,
      horizontalpodautoscaler: `/c/${clusterName}/horizontalpodautoscalers/${namespace}/${name}`,
      poddisruptionbudget: `/c/${clusterName}/poddisruptionbudgets/${namespace}/${name}`,
      customresourcedefinition: `/c/${clusterName}/customresourcedefinitions/${name}`
    };
    return pathMap[lowercaseKind] ?? "";
  }
}

export { HeadlampClusterLinksFormatter };
//# sourceMappingURL=HeadlampClusterLinksFormatter.esm.js.map
