{"version":3,"file":"HeadlampClusterLinksFormatter.esm.js","sources":["../../../src/api/formatters/HeadlampClusterLinksFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ClusterLinksFormatter,\n  ClusterLinksFormatterOptions,\n} from '../../types';\n\n/** @public */\nexport class HeadlampClusterLinksFormatter implements ClusterLinksFormatter {\n  async formatClusterLink(options: ClusterLinksFormatterOptions): Promise<URL> {\n    const { dashboardUrl, dashboardParameters, object, kind } = options;\n\n    if (!dashboardUrl && !dashboardParameters?.internal) {\n      throw new Error(\n        'Dashboard URL is required or dashboardInternal must be true',\n      );\n    }\n\n    const clusterName =\n      (dashboardParameters?.clusterName as string) ?? 'default';\n    const path = this.getHeadlampPath(kind, object, clusterName);\n    if (!path) {\n      throw new Error(`Could not find path for kind: ${kind}`);\n    }\n\n    let baseUrl: URL;\n\n    if (dashboardParameters?.internal) {\n      baseUrl = new URL(window.location.origin);\n      baseUrl.pathname =\n        (dashboardParameters.headlampRoute as string) || '/headlamp';\n    } else {\n      if (!dashboardUrl?.href) {\n        throw new Error(\n          'Dashboard URL is required when not using internal dashboard',\n        );\n      }\n      baseUrl = new URL(dashboardUrl.href);\n    }\n\n    baseUrl.searchParams.set('to', path);\n    return baseUrl;\n  }\n\n  private readonly NAMESPACED_RESOURCES = new Set([\n    'pod',\n    'deployment',\n    'replicaset',\n    'statefulset',\n    'daemonset',\n    'job',\n    'cronjob',\n    'service',\n    'ingress',\n    'configmap',\n    'secret',\n    'serviceaccount',\n    'role',\n    'rolebinding',\n    'networkpolicy',\n    'horizontalpodautoscaler',\n    'poddisruptionbudget',\n    'persistentvolumeclaim',\n  ]);\n\n  private getHeadlampPath(\n    kind: string,\n    object: {\n      metadata?: {\n        name?: string;\n        namespace?: string;\n      };\n    },\n    clusterName: string,\n  ): string {\n    const lowercaseKind = kind.toLocaleLowerCase('en-US');\n    const { name } = object.metadata ?? {};\n    let { namespace } = object.metadata ?? {};\n\n    if (!name) {\n      throw new Error(`Resource name is required for kind: ${kind}`);\n    }\n\n    // Add namespace validation\n    if (this.NAMESPACED_RESOURCES.has(lowercaseKind) && !namespace) {\n      throw new Error(`Namespace is required for namespaced resource: ${kind}`);\n    }\n    if (!namespace) {\n      namespace = 'default';\n    }\n\n    const pathMap: Record<string, string> = {\n      namespace: `/c/${clusterName}/namespaces/${name}`,\n      node: `/c/${clusterName}/nodes/${name}`,\n      persistentvolume: `/c/${clusterName}/storage/persistentvolumes/${name}`,\n      persistentvolumeclaim: `/c/${clusterName}/storage/persistentvolumeclaims/${namespace}/${name}`,\n      pod: `/c/${clusterName}/pods/${namespace}/${name}`,\n      deployment: `/c/${clusterName}/deployments/${namespace}/${name}`,\n      replicaset: `/c/${clusterName}/replicasets/${namespace}/${name}`,\n      statefulset: `/c/${clusterName}/statefulsets/${namespace}/${name}`,\n      daemonset: `/c/${clusterName}/daemonsets/${namespace}/${name}`,\n      job: `/c/${clusterName}/jobs/${namespace}/${name}`,\n      cronjob: `/c/${clusterName}/cronjobs/${namespace}/${name}`,\n      service: `/c/${clusterName}/services/${namespace}/${name}`,\n      ingress: `/c/${clusterName}/ingresses/${namespace}/${name}`,\n      configmap: `/c/${clusterName}/configmaps/${namespace}/${name}`,\n      secret: `/c/${clusterName}/secrets/${namespace}/${name}`,\n      serviceaccount: `/c/${clusterName}/serviceaccounts/${namespace}/${name}`,\n      role: `/c/${clusterName}/roles/${namespace}/${name}`,\n      rolebinding: `/c/${clusterName}/rolebindings/${namespace}/${name}`,\n      clusterrole: `/c/${clusterName}/clusterroles/${name}`,\n      clusterrolebinding: `/c/${clusterName}/clusterrolebindings/${name}`,\n      storageclass: `/c/${clusterName}/storage/storageclasses/${name}`,\n      networkpolicy: `/c/${clusterName}/networkpolicies/${namespace}/${name}`,\n      horizontalpodautoscaler: `/c/${clusterName}/horizontalpodautoscalers/${namespace}/${name}`,\n      poddisruptionbudget: `/c/${clusterName}/poddisruptionbudgets/${namespace}/${name}`,\n      customresourcedefinition: `/c/${clusterName}/customresourcedefinitions/${name}`,\n    };\n\n    return pathMap[lowercaseKind] ?? '';\n  }\n}\n"],"names":[],"mappings":"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"}