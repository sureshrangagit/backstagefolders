{"version":3,"file":"alpha.esm.js","sources":["../src/alpha.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createElement, ComponentType } from 'react';\n\nimport { TechDocsAddonOptions } from './types';\nimport {\n  attachComponentData,\n  getComponentData,\n} from '@backstage/core-plugin-api';\nimport { getDataKeyByName, TECHDOCS_ADDONS_KEY } from './addons';\nimport {\n  createExtensionBlueprint,\n  createExtensionDataRef,\n} from '@backstage/frontend-plugin-api';\n\n/** @alpha */\nexport type { TechDocsAddonOptions, TechDocsAddonLocations } from './types';\n\n/** @alpha */\nexport const techDocsAddonDataRef =\n  createExtensionDataRef<TechDocsAddonOptions>().with({\n    id: 'techdocs.addon',\n  });\n\n/**\n * Creates an extension to add addons to the TechDocs standalone reader and entity pages.\n * @alpha\n */\nexport const AddonBlueprint = createExtensionBlueprint({\n  kind: 'addon',\n  attachTo: [\n    { id: 'page:techdocs/reader', input: 'addons' },\n    { id: 'entity-content:techdocs', input: 'addons' },\n  ],\n  output: [techDocsAddonDataRef],\n  factory: (params: TechDocsAddonOptions) => [techDocsAddonDataRef(params)],\n  dataRefs: {\n    addon: techDocsAddonDataRef,\n  },\n});\n\n/** @alpha */\nexport const attachTechDocsAddonComponentData = <P>(\n  techDocsAddon: ComponentType<P>,\n  data: TechDocsAddonOptions,\n) => {\n  const element = createElement(techDocsAddon as ComponentType);\n\n  const isDataAttached = getComponentData<TechDocsAddonOptions>(\n    element,\n    TECHDOCS_ADDONS_KEY,\n  );\n  if (!isDataAttached) {\n    attachComponentData(techDocsAddon, TECHDOCS_ADDONS_KEY, data);\n  }\n\n  const dataKey = getDataKeyByName(data.name);\n  const isDataKeyAttached = getComponentData<boolean>(element, dataKey);\n  if (!isDataKeyAttached) {\n    attachComponentData(techDocsAddon, dataKey, true);\n  }\n};\n"],"names":[],"mappings":";;;;;AAgCa,MAAA,oBAAA,GACX,sBAA6C,EAAA,CAAE,IAAK,CAAA;AAAA,EAClD,EAAI,EAAA;AACN,CAAC;AAMI,MAAM,iBAAiB,wBAAyB,CAAA;AAAA,EACrD,IAAM,EAAA,OAAA;AAAA,EACN,QAAU,EAAA;AAAA,IACR,EAAE,EAAA,EAAI,sBAAwB,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,IAC9C,EAAE,EAAA,EAAI,yBAA2B,EAAA,KAAA,EAAO,QAAS;AAAA,GACnD;AAAA,EACA,MAAA,EAAQ,CAAC,oBAAoB,CAAA;AAAA,EAC7B,SAAS,CAAC,MAAA,KAAiC,CAAC,oBAAA,CAAqB,MAAM,CAAC,CAAA;AAAA,EACxE,QAAU,EAAA;AAAA,IACR,KAAO,EAAA;AAAA;AAEX,CAAC;AAGY,MAAA,gCAAA,GAAmC,CAC9C,aAAA,EACA,IACG,KAAA;AACH,EAAM,MAAA,OAAA,GAAU,cAAc,aAA8B,CAAA;AAE5D,EAAA,MAAM,cAAiB,GAAA,gBAAA;AAAA,IACrB,OAAA;AAAA,IACA;AAAA,GACF;AACA,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAoB,mBAAA,CAAA,aAAA,EAAe,qBAAqB,IAAI,CAAA;AAAA;AAG9D,EAAM,MAAA,OAAA,GAAU,gBAAiB,CAAA,IAAA,CAAK,IAAI,CAAA;AAC1C,EAAM,MAAA,iBAAA,GAAoB,gBAA0B,CAAA,OAAA,EAAS,OAAO,CAAA;AACpE,EAAA,IAAI,CAAC,iBAAmB,EAAA;AACtB,IAAoB,mBAAA,CAAA,aAAA,EAAe,SAAS,IAAI,CAAA;AAAA;AAEpD;;;;"}