{"version":3,"file":"inputProperties.cjs.js","sources":["../../src/actions/inputProperties.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { z as zod } from 'zod';\n\nconst repoUrl = (z: typeof zod) =>\n  z.string({\n    description: `Accepts the format 'bitbucket.org?repo=reponame&workspace=workspace&project=project' where 'reponame' is the new repository name`,\n  });\n\nconst workspace = (z: typeof zod) =>\n  z.string({\n    description: 'The workspace name',\n  });\n\nconst repo_slug = (z: typeof zod) =>\n  z.string({\n    description: 'The repository name',\n  });\n\nconst ref_type = (z: typeof zod) =>\n  z.string({\n    description: 'ref_type',\n  });\n\nconst type = (z: typeof zod) =>\n  z.string({\n    description: 'type',\n  });\n\nconst ref_name = (z: typeof zod) =>\n  z.string({\n    description: 'ref_name',\n  });\n\nconst source = (z: typeof zod) =>\n  z.string({\n    description: 'source',\n  });\n\nconst destination = (z: typeof zod) =>\n  z.string({\n    description: 'destination',\n  });\n\nconst hash = (z: typeof zod) =>\n  z.string({\n    description: 'hash',\n  });\n\nconst pattern = (z: typeof zod) =>\n  z.string({\n    description: 'pattern',\n  });\n\nconst id = (z: typeof zod) =>\n  z.string({\n    description: 'id',\n  });\n\nconst key = (z: typeof zod) =>\n  z.string({\n    description: 'key',\n  });\n\nconst value = (z: typeof zod) =>\n  z.string({\n    description: 'value',\n  });\n\nconst secured = (z: typeof zod) =>\n  z.boolean({\n    description: 'secured',\n  });\n\nconst token = (z: typeof zod) =>\n  z\n    .string({\n      description: 'The token to use for authorization to BitBucket Cloud',\n    })\n    .optional();\n\nconst destination_commit = (z: typeof zod) =>\n  z.object({\n    hash: hash(z),\n  });\n\nconst commit = (z: typeof zod) =>\n  z.object({\n    type: type(z),\n    hash: hash(z),\n  });\n\nconst selector = (z: typeof zod) =>\n  z.object({\n    type: type(z),\n    pattern: pattern(z),\n  });\n\nconst pull_request = (z: typeof zod) =>\n  z.object({\n    id: id(z),\n  });\n\nconst pipelinesRunBody = (z: typeof zod) =>\n  z\n    .object(\n      {\n        target: z\n          .object({\n            ref_type: ref_type(z).optional(),\n            type: type(z).optional(),\n            ref_name: ref_name(z).optional(),\n            source: source(z).optional(),\n            destination: destination(z).optional(),\n            destination_commit: destination_commit(z).optional(),\n            commit: commit(z).optional(),\n            selector: selector(z).optional(),\n            pull_request: pull_request(z).optional(),\n          })\n          .optional(),\n        variables: z\n          .array(\n            z.object({\n              key: key(z),\n              value: value(z),\n              secured: secured(z),\n            }),\n          )\n          .optional(),\n      },\n      {\n        description:\n          'Request body properties: see Bitbucket Cloud Rest API documentation for more details',\n      },\n    )\n    .optional();\n\nconst restriction = {\n  kind: (z: typeof zod) =>\n    z.enum(\n      [\n        'push',\n        'force',\n        'delete',\n        'restrict_merges',\n        'require_tasks_to_be_completed',\n        'require_approvals_to_merge',\n        'require_default_reviewer_approvals_to_merge',\n        'require_no_changes_requested',\n        'require_passing_builds_to_merge',\n        'require_commits_behind',\n        'reset_pullrequest_approvals_on_change',\n        'smart_reset_pullrequest_approvals',\n        'reset_pullrequest_changes_requested_on_change',\n        'require_all_dependencies_merged',\n        'enforce_merge_checks',\n        'allow_auto_merge_when_builds_pass',\n      ],\n      {\n        description: 'The kind of restriction.',\n      },\n    ),\n  branchMatchKind: (z: typeof zod) =>\n    z\n      .enum(['glob', 'branching_model'], {\n        description: 'The branch match kind.',\n      })\n      .optional(),\n  branchType: (z: typeof zod) =>\n    z\n      .enum(\n        ['feature', 'bugfix', 'release', 'hotfix', 'development', 'production'],\n        {\n          description:\n            'The branch type. When branchMatchKind is set to branching_model, this field is required.',\n        },\n      )\n      .optional(),\n  pattern: (z: typeof zod) =>\n    z\n      .string({\n        description:\n          'The pattern to match branches against. This field is required when branchMatchKind is set to glob.',\n      })\n      .optional(),\n  value: (z: typeof zod) =>\n    z\n      .union([z.number(), z.null()], {\n        description:\n          'The value of the restriction. This field is required when kind is one of require_approvals_to_merge / require_default_reviewer_approvals_to_merge / require_passing_builds_to_merge / require_commits_behind.',\n      })\n      .optional(),\n  users: (z: typeof zod) =>\n    z\n      .array(\n        z.object({\n          uuid: z.string({\n            description: 'The UUID of the user in the format \"{a-b-c-d}\".',\n          }),\n        }),\n        {\n          description:\n            'Names of users that can bypass the push / restrict_merges restriction kind. For any other kind, this field will be ignored.',\n        },\n      )\n      .optional(),\n  groups: (z: typeof zod) =>\n    z\n      .array(\n        z.object({\n          slug: z.string({\n            description: 'The name of the group.',\n          }),\n        }),\n        {\n          description:\n            'Names of groups that can bypass the push / restrict_merges restriction kind. For any other kind, this field will be ignored.',\n        },\n      )\n      .optional(),\n};\n\nexport { workspace, repo_slug, pipelinesRunBody, token };\nexport { repoUrl, restriction };\n"],"names":[],"mappings":"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"}