{"version":3,"file":"bitbucketCloud.cjs.js","sources":["../../src/actions/bitbucketCloud.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport {\n  createTemplateAction,\n  getRepoSourceDirectory,\n  initRepoAndPush,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\n\nimport { Config } from '@backstage/config';\nimport { getAuthorizationHeader } from './helpers';\nimport { examples } from './bitbucketCloud.examples';\n\nconst createRepository = async (opts: {\n  workspace: string;\n  project: string;\n  repo: string;\n  description?: string;\n  repoVisibility: 'private' | 'public';\n  mainBranch: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    workspace,\n    project,\n    repo,\n    description,\n    repoVisibility,\n    mainBranch,\n    authorization,\n    apiBaseUrl,\n  } = opts;\n\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      scm: 'git',\n      description: description,\n      is_private: repoVisibility === 'private',\n      project: { key: project },\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  let response: Response;\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  let remoteUrl = '';\n  for (const link of r.links.clone) {\n    if (link.name === 'https') {\n      remoteUrl = link.href;\n    }\n  }\n\n  // \"mainbranch.name\" cannot be set neither at create nor update of the repo\n  // the first pushed branch will be set as \"main branch\" then\n  const repoContentsUrl = `${r.links.html.href}/src/${mainBranch}`;\n  return { remoteUrl, repoContentsUrl };\n};\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to Bitbucket Cloud.\n * @public\n */\nexport function createPublishBitbucketCloudAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction({\n    id: 'publish:bitbucketCloud',\n    examples,\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to Bitbucket Cloud.',\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: 'Repository Location',\n          }),\n        description: z =>\n          z\n            .string({\n              description: 'Repository Description',\n            })\n            .optional(),\n        defaultBranch: z =>\n          z\n            .string({\n              description: `Sets the default branch on the repository. The default value is 'master'`,\n            })\n            .optional(),\n        repoVisibility: z =>\n          z\n            .enum(['private', 'public'], {\n              description: 'Repository Visibility',\n            })\n            .optional(),\n        gitCommitMessage: z =>\n          z\n            .string({\n              description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n            })\n            .optional(),\n        sourcePath: z =>\n          z\n            .string({\n              description:\n                'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description:\n                'The token to use for authorization to BitBucket Cloud',\n            })\n            .optional(),\n        signCommit: z =>\n          z\n            .boolean({\n              description: 'Sign commit with configured PGP private key',\n            })\n            .optional(),\n      },\n      output: {\n        remoteUrl: z =>\n          z\n            .string({\n              description: 'A URL to the repository with the provider',\n            })\n            .optional(),\n        repoContentsUrl: z =>\n          z\n            .string({\n              description: 'A URL to the root of the repository',\n            })\n            .optional(),\n        commitHash: z =>\n          z\n            .string({\n              description: 'The git commit hash of the initial commit',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        defaultBranch = 'master',\n        gitCommitMessage,\n        repoVisibility = 'private',\n        signCommit,\n      } = ctx.input;\n\n      const { workspace, project, repo, host } = parseRepoUrl(\n        repoUrl,\n        integrations,\n      );\n\n      if (!workspace) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing workspace`,\n        );\n      }\n\n      if (!project) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing project`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucketCloud.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const authorization = getAuthorizationHeader(\n        ctx.input.token ? { token: ctx.input.token } : integrationConfig.config,\n      );\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      const { remoteUrl, repoContentsUrl } = await ctx.checkpoint({\n        key: `create.repo.${host}.${repo}`,\n        fn: async () =>\n          await createRepository({\n            authorization,\n            workspace: workspace || '',\n            project,\n            repo,\n            repoVisibility,\n            mainBranch: defaultBranch,\n            description,\n            apiBaseUrl,\n          }),\n      });\n\n      const gitAuthorInfo = {\n        name: config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      let auth;\n\n      if (ctx.input.token) {\n        auth = {\n          username: 'x-token-auth',\n          password: ctx.input.token,\n        };\n      } else {\n        if (\n          !integrationConfig.config.username ||\n          !integrationConfig.config.appPassword\n        ) {\n          throw new Error(\n            'Credentials for Bitbucket Cloud integration required for this action.',\n          );\n        }\n\n        auth = {\n          username: integrationConfig.config.username,\n          password: integrationConfig.config.appPassword,\n        };\n      }\n\n      const signingKey =\n        integrationConfig.config.commitSigningKey ??\n        config.getOptionalString('scaffolder.defaultCommitSigningKey');\n      if (signCommit && !signingKey) {\n        throw new Error(\n          'Signing commits is enabled but no signing key is provided in the configuration',\n        );\n      }\n\n      const commitHash = await ctx.checkpoint({\n        key: `init.repo.and.push${host}.${repo}`,\n        fn: async () => {\n          const commitResult = await initRepoAndPush({\n            dir: getRepoSourceDirectory(\n              ctx.workspacePath,\n              ctx.input.sourcePath,\n            ),\n            remoteUrl,\n            auth,\n            defaultBranch,\n            logger: ctx.logger,\n            commitMessage:\n              gitCommitMessage ||\n              config.getOptionalString('scaffolder.defaultCommitMessage'),\n            gitAuthorInfo,\n            signingKey: signCommit ? signingKey : undefined,\n          });\n          return commitResult?.commitHash;\n        },\n      });\n\n      ctx.output('commitHash', commitHash);\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","getAuthorizationHeader","initRepoAndPush","getRepoSourceDirectory"],"mappings":";;;;;;;AA6BA,MAAM,gBAAA,GAAmB,OAAO,IAS1B,KAAA;AACJ,EAAM,MAAA;AAAA,IACJ,SAAA;AAAA,IACA,OAAA;AAAA,IACA,IAAA;AAAA,IACA,WAAA;AAAA,IACA,cAAA;AAAA,IACA,UAAA;AAAA,IACA,aAAA;AAAA,IACA;AAAA,GACE,GAAA,IAAA;AAEJ,EAAA,MAAM,OAAuB,GAAA;AAAA,IAC3B,MAAQ,EAAA,MAAA;AAAA,IACR,IAAA,EAAM,KAAK,SAAU,CAAA;AAAA,MACnB,GAAK,EAAA,KAAA;AAAA,MACL,WAAA;AAAA,MACA,YAAY,cAAmB,KAAA,SAAA;AAAA,MAC/B,OAAA,EAAS,EAAE,GAAA,EAAK,OAAQ;AAAA,KACzB,CAAA;AAAA,IACD,OAAS,EAAA;AAAA,MACP,aAAe,EAAA,aAAA;AAAA,MACf,cAAgB,EAAA;AAAA;AAClB,GACF;AAEA,EAAI,IAAA,QAAA;AACJ,EAAI,IAAA;AACF,IAAA,QAAA,GAAW,MAAM,KAAA;AAAA,MACf,CAAG,EAAA,UAAU,CAAiB,cAAA,EAAA,SAAS,IAAI,IAAI,CAAA,CAAA;AAAA,MAC/C;AAAA,KACF;AAAA,WACO,CAAG,EAAA;AACV,IAAA,MAAM,IAAI,KAAA,CAAM,CAAgC,6BAAA,EAAA,CAAC,CAAE,CAAA,CAAA;AAAA;AAGrD,EAAI,IAAA,QAAA,CAAS,WAAW,GAAK,EAAA;AAC3B,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,CAAA,6BAAA,EAAgC,QAAS,CAAA,MAAM,CAC7C,CAAA,EAAA,QAAA,CAAS,UACX,CAAK,EAAA,EAAA,MAAM,QAAS,CAAA,IAAA,EAAM,CAAA;AAAA,KAC5B;AAAA;AAGF,EAAM,MAAA,CAAA,GAAI,MAAM,QAAA,CAAS,IAAK,EAAA;AAC9B,EAAA,IAAI,SAAY,GAAA,EAAA;AAChB,EAAW,KAAA,MAAA,IAAA,IAAQ,CAAE,CAAA,KAAA,CAAM,KAAO,EAAA;AAChC,IAAI,IAAA,IAAA,CAAK,SAAS,OAAS,EAAA;AACzB,MAAA,SAAA,GAAY,IAAK,CAAA,IAAA;AAAA;AACnB;AAKF,EAAA,MAAM,kBAAkB,CAAG,EAAA,CAAA,CAAE,MAAM,IAAK,CAAA,IAAI,QAAQ,UAAU,CAAA,CAAA;AAC9D,EAAO,OAAA,EAAE,WAAW,eAAgB,EAAA;AACtC,CAAA;AAOO,SAAS,kCAAkC,OAG/C,EAAA;AACD,EAAM,MAAA,EAAE,YAAc,EAAA,MAAA,EAAW,GAAA,OAAA;AAEjC,EAAA,OAAOA,yCAAqB,CAAA;AAAA,IAC1B,EAAI,EAAA,wBAAA;AAAA,cACJC,gCAAA;AAAA,IACA,WACE,EAAA,oGAAA;AAAA,IACF,MAAQ,EAAA;AAAA,MACN,KAAO,EAAA;AAAA,QACL,OAAA,EAAS,CACP,CAAA,KAAA,CAAA,CAAE,MAAO,CAAA;AAAA,UACP,WAAa,EAAA;AAAA,SACd,CAAA;AAAA,QACH,WAAA,EAAa,CACX,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WAAa,EAAA;AAAA,SACd,EACA,QAAS,EAAA;AAAA,QACd,aAAA,EAAe,CACb,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WAAa,EAAA,CAAA,wEAAA;AAAA,SACd,EACA,QAAS,EAAA;AAAA,QACd,gBAAgB,CACd,CAAA,KAAA,CAAA,CACG,KAAK,CAAC,SAAA,EAAW,QAAQ,CAAG,EAAA;AAAA,UAC3B,WAAa,EAAA;AAAA,SACd,EACA,QAAS,EAAA;AAAA,QACd,gBAAA,EAAkB,CAChB,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WAAa,EAAA,CAAA,gFAAA;AAAA,SACd,EACA,QAAS,EAAA;AAAA,QACd,UAAA,EAAY,CACV,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WACE,EAAA;AAAA,SACH,EACA,QAAS,EAAA;AAAA,QACd,KAAA,EAAO,CACL,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WACE,EAAA;AAAA,SACH,EACA,QAAS,EAAA;AAAA,QACd,UAAA,EAAY,CACV,CAAA,KAAA,CAAA,CACG,OAAQ,CAAA;AAAA,UACP,WAAa,EAAA;AAAA,SACd,EACA,QAAS;AAAA,OAChB;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,SAAA,EAAW,CACT,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WAAa,EAAA;AAAA,SACd,EACA,QAAS,EAAA;AAAA,QACd,eAAA,EAAiB,CACf,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WAAa,EAAA;AAAA,SACd,EACA,QAAS,EAAA;AAAA,QACd,UAAA,EAAY,CACV,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WAAa,EAAA;AAAA,SACd,EACA,QAAS;AAAA;AAChB,KACF;AAAA,IACA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAM,MAAA;AAAA,QACJ,OAAA;AAAA,QACA,WAAA;AAAA,QACA,aAAgB,GAAA,QAAA;AAAA,QAChB,gBAAA;AAAA,QACA,cAAiB,GAAA,SAAA;AAAA,QACjB;AAAA,UACE,GAAI,CAAA,KAAA;AAER,MAAA,MAAM,EAAE,SAAA,EAAW,OAAS,EAAA,IAAA,EAAM,MAAS,GAAAC,iCAAA;AAAA,QACzC,OAAA;AAAA,QACA;AAAA,OACF;AAEA,MAAA,IAAI,CAAC,SAAW,EAAA;AACd,QAAA,MAAM,IAAIC,iBAAA;AAAA,UACR,CAAA,4DAAA,EAA+D,GAAI,CAAA,KAAA,CAAM,OAAO,CAAA,mBAAA;AAAA,SAClF;AAAA;AAGF,MAAA,IAAI,CAAC,OAAS,EAAA;AACZ,QAAA,MAAM,IAAIA,iBAAA;AAAA,UACR,CAAA,4DAAA,EAA+D,GAAI,CAAA,KAAA,CAAM,OAAO,CAAA,iBAAA;AAAA,SAClF;AAAA;AAGF,MAAA,MAAM,iBAAoB,GAAA,YAAA,CAAa,cAAe,CAAA,MAAA,CAAO,IAAI,CAAA;AACjE,MAAA,IAAI,CAAC,iBAAmB,EAAA;AACtB,QAAA,MAAM,IAAIA,iBAAA;AAAA,UACR,kDAAkD,IAAI,CAAA,uCAAA;AAAA,SACxD;AAAA;AAGF,MAAA,MAAM,aAAgB,GAAAC,8BAAA;AAAA,QACpB,GAAA,CAAI,MAAM,KAAQ,GAAA,EAAE,OAAO,GAAI,CAAA,KAAA,CAAM,KAAM,EAAA,GAAI,iBAAkB,CAAA;AAAA,OACnE;AAEA,MAAM,MAAA,UAAA,GAAa,kBAAkB,MAAO,CAAA,UAAA;AAE5C,MAAA,MAAM,EAAE,SAAW,EAAA,eAAA,EAAoB,GAAA,MAAM,IAAI,UAAW,CAAA;AAAA,QAC1D,GAAK,EAAA,CAAA,YAAA,EAAe,IAAI,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA;AAAA,QAChC,EAAA,EAAI,YACF,MAAM,gBAAiB,CAAA;AAAA,UACrB,aAAA;AAAA,UACA,WAAW,SAAa,IAAA,EAAA;AAAA,UACxB,OAAA;AAAA,UACA,IAAA;AAAA,UACA,cAAA;AAAA,UACA,UAAY,EAAA,aAAA;AAAA,UACZ,WAAA;AAAA,UACA;AAAA,SACD;AAAA,OACJ,CAAA;AAED,MAAA,MAAM,aAAgB,GAAA;AAAA,QACpB,IAAA,EAAM,MAAO,CAAA,iBAAA,CAAkB,+BAA+B,CAAA;AAAA,QAC9D,KAAA,EAAO,MAAO,CAAA,iBAAA,CAAkB,gCAAgC;AAAA,OAClE;AAEA,MAAI,IAAA,IAAA;AAEJ,MAAI,IAAA,GAAA,CAAI,MAAM,KAAO,EAAA;AACnB,QAAO,IAAA,GAAA;AAAA,UACL,QAAU,EAAA,cAAA;AAAA,UACV,QAAA,EAAU,IAAI,KAAM,CAAA;AAAA,SACtB;AAAA,OACK,MAAA;AACL,QAAA,IACE,CAAC,iBAAkB,CAAA,MAAA,CAAO,YAC1B,CAAC,iBAAA,CAAkB,OAAO,WAC1B,EAAA;AACA,UAAA,MAAM,IAAI,KAAA;AAAA,YACR;AAAA,WACF;AAAA;AAGF,QAAO,IAAA,GAAA;AAAA,UACL,QAAA,EAAU,kBAAkB,MAAO,CAAA,QAAA;AAAA,UACnC,QAAA,EAAU,kBAAkB,MAAO,CAAA;AAAA,SACrC;AAAA;AAGF,MAAA,MAAM,aACJ,iBAAkB,CAAA,MAAA,CAAO,gBACzB,IAAA,MAAA,CAAO,kBAAkB,oCAAoC,CAAA;AAC/D,MAAI,IAAA,UAAA,IAAc,CAAC,UAAY,EAAA;AAC7B,QAAA,MAAM,IAAI,KAAA;AAAA,UACR;AAAA,SACF;AAAA;AAGF,MAAM,MAAA,UAAA,GAAa,MAAM,GAAA,CAAI,UAAW,CAAA;AAAA,QACtC,GAAK,EAAA,CAAA,kBAAA,EAAqB,IAAI,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA;AAAA,QACtC,IAAI,YAAY;AACd,UAAM,MAAA,YAAA,GAAe,MAAMC,oCAAgB,CAAA;AAAA,YACzC,GAAK,EAAAC,2CAAA;AAAA,cACH,GAAI,CAAA,aAAA;AAAA,cACJ,IAAI,KAAM,CAAA;AAAA,aACZ;AAAA,YACA,SAAA;AAAA,YACA,IAAA;AAAA,YACA,aAAA;AAAA,YACA,QAAQ,GAAI,CAAA,MAAA;AAAA,YACZ,aACE,EAAA,gBAAA,IACA,MAAO,CAAA,iBAAA,CAAkB,iCAAiC,CAAA;AAAA,YAC5D,aAAA;AAAA,YACA,UAAA,EAAY,aAAa,UAAa,GAAA,KAAA;AAAA,WACvC,CAAA;AACD,UAAA,OAAO,YAAc,EAAA,UAAA;AAAA;AACvB,OACD,CAAA;AAED,MAAI,GAAA,CAAA,MAAA,CAAO,cAAc,UAAU,CAAA;AACnC,MAAI,GAAA,CAAA,MAAA,CAAO,aAAa,SAAS,CAAA;AACjC,MAAI,GAAA,CAAA,MAAA,CAAO,mBAAmB,eAAe,CAAA;AAAA;AAC/C,GACD,CAAA;AACH;;;;"}