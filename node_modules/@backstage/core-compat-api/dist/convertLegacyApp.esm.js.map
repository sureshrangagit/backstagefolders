{"version":3,"file":"convertLegacyApp.esm.js","sources":["../src/convertLegacyApp.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  JSX,\n  cloneElement,\n  Children,\n  Fragment,\n  ReactElement,\n  ReactNode,\n  isValidElement,\n} from 'react';\nimport {\n  FrontendModule,\n  FrontendPlugin,\n  coreExtensionData,\n  createExtension,\n  createExtensionInput,\n  createFrontendModule,\n} from '@backstage/frontend-plugin-api';\nimport { getComponentData } from '@backstage/core-plugin-api';\nimport { collectLegacyRoutes } from './collectLegacyRoutes';\nimport { compatWrapper } from './compatWrapper';\n\nfunction selectChildren(\n  rootNode: ReactNode,\n  selector?: (element: ReactElement<{ children?: ReactNode }>) => boolean,\n  strictError?: string,\n): Array<ReactElement<{ children?: ReactNode }>> {\n  return Children.toArray(rootNode).flatMap(node => {\n    if (!isValidElement<{ children?: ReactNode }>(node)) {\n      return [];\n    }\n\n    if (node.type === Fragment) {\n      return selectChildren(node.props.children, selector, strictError);\n    }\n\n    if (selector === undefined || selector(node)) {\n      return [node];\n    }\n\n    if (strictError) {\n      throw new Error(strictError);\n    }\n\n    return selectChildren(node.props.children, selector, strictError);\n  });\n}\n\n/** @public */\nexport interface ConvertLegacyAppOptions {\n  /**\n   * By providing an entity page element here it will be split up and converted\n   * into individual extensions for the catalog plugin in the new frontend\n   * system.\n   *\n   * In order to use this option the entity page and other catalog extensions\n   * must be removed from the legacy app, and the catalog plugin for the new\n   * frontend system must be installed instead.\n   *\n   * In order for this conversion to work the entity page must be a plain React\n   * element tree without any component wrapping anywhere between the root\n   * element and the `EntityLayout.Route` elements.\n   *\n   * When enabling this conversion you are likely to encounter duplicate entity\n   * page content provided both via the old structure and the new plugins. Any\n   * duplicate content needs to be removed from the old structure.\n   */\n  entityPage?: JSX.Element;\n}\n\n/** @public */\nexport function convertLegacyApp(\n  rootElement: JSX.Element,\n  options: ConvertLegacyAppOptions = {},\n): (FrontendPlugin | FrontendModule)[] {\n  if (getComponentData(rootElement, 'core.type') === 'FlatRoutes') {\n    return collectLegacyRoutes(rootElement, options?.entityPage);\n  }\n\n  const appRouterEls = selectChildren(\n    rootElement,\n    el => getComponentData(el, 'core.type') === 'AppRouter',\n  );\n  if (appRouterEls.length !== 1) {\n    throw new Error(\n      \"Failed to convert legacy app, AppRouter element could not been found. Make sure it's at the top level of the App element tree\",\n    );\n  }\n\n  const rootEls = selectChildren(\n    appRouterEls[0].props.children,\n    el =>\n      Boolean(el.props.children) &&\n      selectChildren(\n        el.props.children,\n        innerEl => getComponentData(innerEl, 'core.type') === 'FlatRoutes',\n      ).length === 1,\n  );\n  if (rootEls.length !== 1) {\n    throw new Error(\n      \"Failed to convert legacy app, Root element containing FlatRoutes could not been found. Make sure it's within the AppRouter element of the App element tree\",\n    );\n  }\n  const [rootEl] = rootEls;\n\n  const routesEls = selectChildren(\n    rootEls[0].props.children,\n    el => getComponentData(el, 'core.type') === 'FlatRoutes',\n  );\n  if (routesEls.length !== 1) {\n    throw new Error(\n      'Unexpectedly failed to find FlatRoutes in app element tree',\n    );\n  }\n  const [routesEl] = routesEls;\n\n  const CoreLayoutOverride = createExtension({\n    name: 'layout',\n    attachTo: { id: 'app/root', input: 'children' },\n    inputs: {\n      content: createExtensionInput([coreExtensionData.reactElement], {\n        singleton: true,\n      }),\n    },\n    output: [coreExtensionData.reactElement],\n    factory({ inputs }) {\n      // Clone the root element, this replaces the FlatRoutes declared in the app with out content input\n      return [\n        coreExtensionData.reactElement(\n          compatWrapper(\n            cloneElement(\n              rootEl,\n              undefined,\n              inputs.content.get(coreExtensionData.reactElement),\n            ),\n          ),\n        ),\n      ];\n    },\n  });\n  const CoreNavOverride = createExtension({\n    name: 'nav',\n    attachTo: { id: 'app/layout', input: 'nav' },\n    output: [],\n    factory: () => [],\n    disabled: true,\n  });\n\n  const collectedRoutes = collectLegacyRoutes(routesEl, options?.entityPage);\n\n  return [\n    ...collectedRoutes,\n    createFrontendModule({\n      pluginId: 'app',\n      extensions: [CoreLayoutOverride, CoreNavOverride],\n    }),\n  ];\n}\n"],"names":[],"mappings":"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"}