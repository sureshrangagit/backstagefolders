{"version":3,"file":"UserProfileCard.esm.js","sources":["../../../../../src/components/Cards/User/UserProfileCard/UserProfileCard.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_EDIT_URL,\n  RELATION_MEMBER_OF,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport {\n  Avatar,\n  InfoCard,\n  InfoCardVariants,\n  Link,\n} from '@backstage/core-components';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport BaseButton from '@material-ui/core/ButtonBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {\n  EntityRefLinks,\n  getEntityRelations,\n  useEntity,\n} from '@backstage/plugin-catalog-react';\n\nimport Alert from '@material-ui/lab/Alert';\nimport EditIcon from '@material-ui/icons/Edit';\nimport EmailIcon from '@material-ui/icons/Email';\nimport GroupIcon from '@material-ui/icons/Group';\nimport { LinksGroup } from '../../Meta';\nimport PersonIcon from '@material-ui/icons/Person';\n\nimport { useCallback, useState } from 'react';\nimport { useTranslationRef } from '@backstage/frontend-plugin-api';\nimport { orgTranslationRef } from '../../../../translation';\n\nconst useStyles = makeStyles((theme: any) => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  moreButton: {\n    display: 'contents',\n    color: theme.palette.primary.main,\n  },\n  dialogPaper: {\n    minHeight: 400,\n  },\n}));\n\nconst CardTitle = (props: { title?: string }) =>\n  props.title ? (\n    <Box display=\"flex\" alignItems=\"center\">\n      <PersonIcon fontSize=\"inherit\" />\n      <Box ml={1}>{props.title}</Box>\n    </Box>\n  ) : null;\n\n/** @public */\nexport const UserProfileCard = (props: {\n  variant?: InfoCardVariants;\n  showLinks?: boolean;\n  maxRelations?: number;\n  hideIcons?: boolean;\n}) => {\n  const { maxRelations, hideIcons } = props;\n\n  const classes = useStyles();\n  const { entity: user } = useEntity<UserEntity>();\n  const [isAllGroupsDialogOpen, setIsAllGroupsDialogOpen] = useState(false);\n  const { t } = useTranslationRef(orgTranslationRef);\n\n  const toggleAllGroupsDialog = useCallback(\n    () =>\n      setIsAllGroupsDialogOpen(\n        prevIsViewAllGroupsDialogOpen => !prevIsViewAllGroupsDialogOpen,\n      ),\n    [],\n  );\n\n  if (!user) {\n    return <Alert severity=\"error\">{t('userProfileCard.userNotFound')}</Alert>;\n  }\n\n  const entityMetadataEditUrl =\n    user.metadata.annotations?.[ANNOTATION_EDIT_URL];\n\n  const {\n    metadata: { name: metaName, description, links },\n    spec: { profile },\n  } = user;\n  const displayName = profile?.displayName ?? metaName;\n  const emailHref = profile?.email ? `mailto:${profile.email}` : undefined;\n  const memberOfRelations = getEntityRelations(user, RELATION_MEMBER_OF, {\n    kind: 'Group',\n  });\n\n  return (\n    <InfoCard\n      title={<CardTitle title={displayName} />}\n      subheader={description}\n      variant={props.variant}\n      action={\n        <>\n          {entityMetadataEditUrl && (\n            <IconButton\n              aria-label={t('userProfileCard.editIconButtonTitle')}\n              title={t('userProfileCard.editIconButtonTitle')}\n              component={Link}\n              to={entityMetadataEditUrl}\n            >\n              <EditIcon />\n            </IconButton>\n          )}\n        </>\n      }\n    >\n      <Grid container spacing={3} alignItems=\"flex-start\">\n        <Grid item xs={12} sm={2} xl={1}>\n          <Avatar displayName={displayName} picture={profile?.picture} />\n        </Grid>\n\n        <Grid item md={10} xl={11}>\n          <List>\n            {profile?.email && (\n              <ListItem>\n                <ListItemIcon>\n                  <Tooltip title={t('userProfileCard.listItemTitle.email')}>\n                    <EmailIcon />\n                  </Tooltip>\n                </ListItemIcon>\n                <ListItemText>\n                  <Link to={emailHref ?? ''}>{profile.email}</Link>\n                </ListItemText>\n              </ListItem>\n            )}\n\n            {maxRelations === undefined || maxRelations > 0 ? (\n              <ListItem>\n                <ListItemIcon>\n                  <Tooltip title={t('userProfileCard.listItemTitle.memberOf')}>\n                    <GroupIcon />\n                  </Tooltip>\n                </ListItemIcon>\n                <ListItemText>\n                  <EntityRefLinks\n                    entityRefs={memberOfRelations.slice(0, maxRelations)}\n                    defaultKind=\"Group\"\n                    hideIcons={hideIcons}\n                  />\n                  {maxRelations && memberOfRelations.length > maxRelations ? (\n                    <>\n                      ,\n                      <BaseButton\n                        className={classes.moreButton}\n                        onClick={toggleAllGroupsDialog}\n                        disableRipple\n                      >\n                        {t('userProfileCard.moreGroupButtonTitle', {\n                          number: String(\n                            memberOfRelations.length - maxRelations,\n                          ),\n                        })}\n                      </BaseButton>\n                    </>\n                  ) : null}\n                </ListItemText>\n              </ListItem>\n            ) : null}\n            {props?.showLinks && <LinksGroup links={links} />}\n          </List>\n        </Grid>\n      </Grid>\n\n      <Dialog\n        classes={{ paper: classes.dialogPaper }}\n        open={isAllGroupsDialogOpen}\n        onClose={toggleAllGroupsDialog}\n        scroll=\"paper\"\n        aria-labelledby=\"view-all-groups-dialog-title\"\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle id=\"view-all-groups-dialog-title\">\n          {t('userProfileCard.allGroupDialog.title', {\n            name: user.metadata.name,\n          })}\n          <IconButton\n            className={classes.closeButton}\n            aria-label={t('userProfileCard.allGroupDialog.closeButtonTitle')}\n            onClick={toggleAllGroupsDialog}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent dividers>\n          <EntityRefLinks entityRefs={memberOfRelations} defaultKind=\"Group\" />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleAllGroupsDialog}>\n            {t('userProfileCard.allGroupDialog.closeButtonTitle')}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </InfoCard>\n  );\n};\n"],"names":[],"mappings":"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"}