{"version":3,"file":"gitea.cjs.js","sources":["../../src/actions/gitea.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { Config } from '@backstage/config';\nimport {\n  getGiteaRequestOptions,\n  GiteaIntegrationConfig,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  ActionContext,\n  createTemplateAction,\n  getRepoSourceDirectory,\n  initRepoAndPush,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { examples } from './gitea.examples';\nimport crypto from 'crypto';\n\nconst checkGiteaContentUrl = async (\n  config: GiteaIntegrationConfig,\n  options: {\n    owner?: string;\n    repo: string;\n    defaultBranch?: string;\n  },\n): Promise<Response> => {\n  const { owner, repo, defaultBranch } = options;\n  let response: Response;\n  const getOptions: RequestInit = {\n    method: 'GET',\n  };\n\n  try {\n    response = await fetch(\n      `${config.baseUrl}/${owner}/${repo}/src/branch/${defaultBranch}`,\n      getOptions,\n    );\n  } catch (e) {\n    throw new Error(\n      `Unable to get the repository: ${owner}/${repo} metadata , ${e}`,\n    );\n  }\n  return response;\n};\n\nconst checkGiteaOrg = async (\n  config: GiteaIntegrationConfig,\n  options: {\n    owner: string;\n  },\n): Promise<void> => {\n  const { owner } = options;\n  let response: Response;\n  // check first if the org = owner exists\n  const getOptions: RequestInit = {\n    method: 'GET',\n    headers: {\n      ...getGiteaRequestOptions(config).headers,\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    response = await fetch(\n      `${config.baseUrl}/api/v1/orgs/${owner}`,\n      getOptions,\n    );\n  } catch (e) {\n    throw new Error(\n      `Unable to get the Organization: ${owner}; Error cause: ${e.message}, code: ${e.cause.code}`,\n    );\n  }\n  if (response.status !== 200) {\n    throw new Error(\n      `Organization ${owner} do not exist. Please create it first !`,\n    );\n  }\n};\n\nconst createGiteaProject = async (\n  config: GiteaIntegrationConfig,\n  options: {\n    projectName: string;\n    owner?: string;\n    repoVisibility?: string;\n    description: string;\n  },\n): Promise<void> => {\n  const { projectName, description, owner, repoVisibility } = options;\n\n  /*\n    Several options exist to create a repository using either the user or organisation\n    User: https://gitea.com/api/swagger#/user/createCurrentUserRepo\n    Api: URL/api/v1/user/repos\n    Remark: The user is the username defined part of the backstage integration config for the gitea URL !\n\n    Org: https://gitea.com/api/swagger#/organization/createOrgRepo\n    Api: URL/api/v1/orgs/${org_owner}/repos\n    This is the default scenario that we support currently\n  */\n  let response: Response;\n  let isPrivate: boolean;\n\n  if (repoVisibility === 'private') {\n    isPrivate = true;\n  } else if (repoVisibility === 'public') {\n    isPrivate = false;\n  } else {\n    // Provide a default value if repoVisibility is neither \"private\" nor \"public\"\n    isPrivate = false;\n  }\n\n  const postOptions: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: projectName,\n      description,\n      private: isPrivate,\n    }),\n    headers: {\n      ...getGiteaRequestOptions(config).headers,\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    response = await fetch(\n      `${config.baseUrl}/api/v1/orgs/${owner}/repos`,\n      postOptions,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create repository, ${e}`);\n  }\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create repository, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n};\n\nconst generateCommitMessage = (\n  config: Config,\n  commitSubject?: string,\n): string => {\n  const changeId = crypto.randomBytes(20).toString('hex');\n  const msg = `${\n    config.getOptionalString('scaffolder.defaultCommitMessage') || commitSubject\n  }\\n\\nChange-Id: I${changeId}`;\n  return msg;\n};\n\nasync function checkAvailabilityGiteaRepository(\n  maxDuration: number,\n  integrationConfig: GiteaIntegrationConfig,\n  options: {\n    owner?: string;\n    repo: string;\n    defaultBranch: string;\n    ctx: ActionContext<any, any, any>;\n  },\n) {\n  const startTimestamp = Date.now();\n\n  const { owner, repo, defaultBranch, ctx } = options;\n  const sleep = (ms: number | undefined) => new Promise(r => setTimeout(r, ms));\n  let response: Response;\n\n  while (Date.now() - startTimestamp < maxDuration) {\n    if (ctx.signal?.aborted) return;\n\n    response = await checkGiteaContentUrl(integrationConfig, {\n      owner,\n      repo,\n      defaultBranch,\n    });\n\n    if (response.status !== 200) {\n      // Repository is not yet available/accessible ...\n      await sleep(1000);\n    } else {\n      // Gitea repository exists !\n      break;\n    }\n  }\n}\n\n/**\n * Creates a new action that initializes a git repository using the content of the workspace.\n * and publishes it to a Gitea instance.\n * @public\n */\nexport function createPublishGiteaAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction({\n    id: 'publish:gitea',\n    description:\n      'Initializes a git repository using the content of the workspace, and publishes it to Gitea.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: 'Repository Location',\n          }),\n        description: z =>\n          z.string({\n            description: 'Repository Description',\n          }),\n        defaultBranch: z =>\n          z\n            .string({\n              description: `Sets the default branch on the repository. The default value is 'main'`,\n            })\n            .optional(),\n        repoVisibility: z =>\n          z\n            .enum(['private', 'public'], {\n              description: `Sets the visibility of the repository. The default value is 'public'.`,\n            })\n            .optional(),\n        gitCommitMessage: z =>\n          z\n            .string({\n              description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n            })\n            .optional(),\n        gitAuthorName: z =>\n          z\n            .string({\n              description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n            })\n            .optional(),\n        gitAuthorEmail: z =>\n          z\n            .string({\n              description: `Sets the default author email for the commit.`,\n            })\n            .optional(),\n        sourcePath: z =>\n          z\n            .string({\n              description: `Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.`,\n            })\n            .optional(),\n        signCommit: z =>\n          z\n            .boolean({\n              description: 'Sign commit with configured PGP private key',\n            })\n            .optional(),\n      },\n      output: {\n        remoteUrl: z =>\n          z\n            .string({\n              description: 'A URL to the repository with the provider',\n            })\n            .optional(),\n        repoContentsUrl: z =>\n          z\n            .string({\n              description: 'A URL to the root of the repository',\n            })\n            .optional(),\n        commitHash: z =>\n          z\n            .string({\n              description: 'The git commit hash of the initial commit',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        defaultBranch = 'main',\n        repoVisibility = 'public',\n        gitAuthorName,\n        gitAuthorEmail,\n        gitCommitMessage = 'initial commit',\n        sourcePath,\n        signCommit,\n      } = ctx.input;\n\n      const { repo, host, owner } = parseRepoUrl(repoUrl, integrations);\n\n      const integrationConfig = integrations.gitea.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n      const { username, password } = integrationConfig.config;\n\n      if (!username || !password) {\n        throw new Error('Credentials for the gitea ${host} required.');\n      }\n\n      // check if the org exists within the gitea server\n      if (owner) {\n        await checkGiteaOrg(integrationConfig.config, { owner });\n      }\n\n      await createGiteaProject(integrationConfig.config, {\n        description,\n        repoVisibility,\n        owner: owner,\n        projectName: repo,\n      });\n\n      const auth = {\n        username: username,\n        password: password,\n      };\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n\n      const signingKey =\n        integrationConfig.config.commitSigningKey ??\n        config.getOptionalString('scaffolder.defaultCommitSigningKey');\n      if (signCommit && !signingKey) {\n        throw new Error(\n          'Signing commits is enabled but no signing key is provided in the configuration',\n        );\n      }\n\n      // The owner to be used should be either the org name or user authenticated with the gitea server\n      const remoteUrl = `${integrationConfig.config.baseUrl}/${owner}/${repo}.git`;\n      const commitResult = await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, sourcePath),\n        remoteUrl,\n        auth,\n        defaultBranch,\n        logger: ctx.logger,\n        commitMessage: generateCommitMessage(config, gitCommitMessage),\n        gitAuthorInfo,\n      });\n\n      // Check if the gitea repo URL is available before to exit\n      const maxDuration = 20000; // 20 seconds\n      await checkAvailabilityGiteaRepository(\n        maxDuration,\n        integrationConfig.config,\n        {\n          owner,\n          repo,\n          defaultBranch,\n          ctx,\n        },\n      );\n\n      const repoContentsUrl = `${integrationConfig.config.baseUrl}/${owner}/${repo}/src/branch/${defaultBranch}/`;\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('commitHash', commitResult?.commitHash);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n    },\n  });\n}\n"],"names":["getGiteaRequestOptions","crypto","createTemplateAction","examples","parseRepoUrl","InputError","initRepoAndPush","getRepoSourceDirectory"],"mappings":"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"}