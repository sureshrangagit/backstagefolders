{"version":3,"file":"LocalTaskWorker.cjs.js","sources":["../../../../src/entrypoints/scheduler/lib/LocalTaskWorker.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { SchedulerServiceTaskFunction } from '@backstage/backend-plugin-api';\nimport { ConflictError } from '@backstage/errors';\nimport { CronTime } from 'cron';\nimport { DateTime, Duration } from 'luxon';\nimport { TaskSettingsV2, TaskApiTasksResponse } from './types';\nimport { delegateAbortController, serializeError, sleep } from './util';\n\n/**\n * Implements tasks that run locally without cross-host collaboration.\n *\n * @private\n */\nexport class LocalTaskWorker {\n  private abortWait: AbortController | undefined;\n  #taskState: Exclude<TaskApiTasksResponse['taskState'], null> = {\n    status: 'idle',\n  };\n  #workerState: TaskApiTasksResponse['workerState'] = {\n    status: 'idle',\n  };\n\n  constructor(\n    private readonly taskId: string,\n    private readonly fn: SchedulerServiceTaskFunction,\n    private readonly logger: LoggerService,\n  ) {}\n\n  start(settings: TaskSettingsV2, options: { signal: AbortSignal }) {\n    this.logger.info(\n      `Task worker starting: ${this.taskId}, ${JSON.stringify(settings)}`,\n    );\n\n    (async () => {\n      let attemptNum = 1;\n      for (;;) {\n        try {\n          await this.performInitialWait(settings, options.signal);\n\n          while (!options.signal.aborted) {\n            const startTime = process.hrtime();\n            await this.runOnce(settings, options.signal);\n            const timeTaken = process.hrtime(startTime);\n            await this.waitUntilNext(\n              settings,\n              (timeTaken[0] + timeTaken[1] / 1e9) * 1000,\n              options.signal,\n            );\n          }\n\n          this.logger.info(`Task worker finished: ${this.taskId}`);\n          attemptNum = 0;\n          break;\n        } catch (e) {\n          attemptNum += 1;\n          this.logger.warn(\n            `Task worker failed unexpectedly, attempt number ${attemptNum}, ${e}`,\n          );\n          await sleep(Duration.fromObject({ seconds: 1 }));\n        }\n      }\n    })();\n  }\n\n  trigger(): void {\n    if (!this.abortWait) {\n      throw new ConflictError(`Task ${this.taskId} is currently running`);\n    }\n    this.abortWait.abort();\n  }\n\n  taskState(): TaskApiTasksResponse['taskState'] {\n    return this.#taskState;\n  }\n\n  workerState(): TaskApiTasksResponse['workerState'] {\n    return this.#workerState;\n  }\n\n  /**\n   * Does the once-at-startup initial wait, if configured.\n   */\n  private async performInitialWait(\n    settings: TaskSettingsV2,\n    signal: AbortSignal,\n  ): Promise<void> {\n    if (settings.initialDelayDuration) {\n      const parsedDuration = Duration.fromISO(settings.initialDelayDuration);\n\n      this.#taskState = {\n        status: 'idle',\n        startsAt: DateTime.utc().plus(parsedDuration).toISO()!,\n        lastRunEndedAt: this.#taskState.lastRunEndedAt,\n        lastRunError: this.#taskState.lastRunError,\n      };\n      this.#workerState = {\n        status: 'initial-wait',\n      };\n\n      await this.sleep(parsedDuration, signal);\n    }\n  }\n\n  /**\n   * Makes a single attempt at running the task to completion.\n   */\n  private async runOnce(\n    settings: TaskSettingsV2,\n    signal: AbortSignal,\n  ): Promise<void> {\n    // Abort the task execution either if the worker is stopped, or if the\n    // task timeout is hit\n    const taskAbortController = delegateAbortController(signal);\n    const timeoutDuration = Duration.fromISO(settings.timeoutAfterDuration);\n    const timeoutHandle = setTimeout(() => {\n      taskAbortController.abort();\n    }, timeoutDuration.as('milliseconds'));\n\n    this.#taskState = {\n      status: 'running',\n      startedAt: DateTime.utc().toISO()!,\n      timesOutAt: DateTime.utc().plus(timeoutDuration).toISO()!,\n      lastRunEndedAt: this.#taskState.lastRunEndedAt,\n      lastRunError: this.#taskState.lastRunError,\n    };\n    this.#workerState = {\n      status: 'running',\n    };\n\n    try {\n      await this.fn(taskAbortController.signal);\n      this.#taskState.lastRunEndedAt = DateTime.utc().toISO()!;\n      this.#taskState.lastRunError = undefined;\n    } catch (e) {\n      this.#taskState.lastRunEndedAt = DateTime.utc().toISO()!;\n      this.#taskState.lastRunError = serializeError(e);\n    }\n\n    // release resources\n    clearTimeout(timeoutHandle);\n    taskAbortController.abort();\n  }\n\n  /**\n   * Sleeps until it's time to run the task again.\n   */\n  private async waitUntilNext(\n    settings: TaskSettingsV2,\n    lastRunMillis: number,\n    signal: AbortSignal,\n  ) {\n    if (signal.aborted) {\n      return;\n    }\n\n    const isCron = !settings.cadence.startsWith('P');\n    let dt: number;\n\n    if (isCron) {\n      const nextRun = +new CronTime(settings.cadence).sendAt().toJSDate();\n      dt = nextRun - Date.now();\n    } else {\n      dt =\n        Duration.fromISO(settings.cadence).as('milliseconds') - lastRunMillis;\n    }\n\n    dt = Math.max(dt, 0);\n    const startsAt = DateTime.now().plus(Duration.fromMillis(dt));\n\n    this.#taskState = {\n      status: 'idle',\n      startsAt: startsAt.toISO()!,\n      lastRunEndedAt: this.#taskState.lastRunEndedAt,\n      lastRunError: this.#taskState.lastRunError,\n    };\n    this.#workerState = {\n      status: 'idle',\n    };\n\n    this.logger.debug(\n      `task: ${this.taskId} will next occur around ${startsAt}`,\n    );\n\n    await this.sleep(Duration.fromMillis(dt), signal);\n  }\n\n  private async sleep(\n    duration: Duration,\n    abortSignal: AbortSignal,\n  ): Promise<void> {\n    this.abortWait = delegateAbortController(abortSignal);\n    await sleep(duration, this.abortWait.signal);\n    this.abortWait.abort(); // cleans up resources\n    this.abortWait = undefined;\n  }\n}\n"],"names":["sleep","Duration","ConflictError","DateTime","delegateAbortController","serializeError","CronTime"],"mappings":"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"}