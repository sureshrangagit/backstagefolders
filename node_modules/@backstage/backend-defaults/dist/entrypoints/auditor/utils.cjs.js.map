{"version":3,"file":"utils.cjs.js","sources":["../../../src/entrypoints/auditor/utils.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport { z } from 'zod';\nimport { CONFIG_ROOT_KEY, severityLogLevelMappingsSchema } from './types';\n\n/**\n * Gets the `backend.auditor.severityLogLevelMappings` configuration.\n *\n * @param config - The root Backstage {@link @backstage/config#Config} object.\n * @returns The validated severity-to-log-level mappings.\n * @throws error - {@link @backstage/errors#InputError} if the mapping configuration is invalid.\n */\nexport function getSeverityLogLevelMappings(config: Config) {\n  const auditorConfig = config.getOptionalConfig(CONFIG_ROOT_KEY);\n\n  const severityLogLevelMappings = {\n    low:\n      auditorConfig?.getOptionalString('severityLogLevelMappings.low') ??\n      'debug',\n    medium:\n      auditorConfig?.getOptionalString('severityLogLevelMappings.medium') ??\n      'info',\n    high:\n      auditorConfig?.getOptionalString('severityLogLevelMappings.high') ??\n      'info',\n    critical:\n      auditorConfig?.getOptionalString('severityLogLevelMappings.critical') ??\n      'info',\n  } as Required<z.infer<typeof severityLogLevelMappingsSchema>>;\n\n  const res = severityLogLevelMappingsSchema.safeParse(\n    severityLogLevelMappings,\n  );\n  if (!res.success) {\n    const key = res.error.issues.at(0)?.path.at(0) as string;\n    const value = (\n      res.error.issues.at(0) as unknown as Record<PropertyKey, unknown>\n    ).received as string;\n    const validKeys = (\n      res.error.issues.at(0) as unknown as Record<PropertyKey, unknown>\n    ).options as string[];\n    throw new InputError(\n      `The configuration value for 'backend.auditor.severityLogLevelMappings.${key}' was given an invalid value: '${value}'. Expected one of the following valid values: '${validKeys.join(\n        ', ',\n      )}'.`,\n    );\n  }\n\n  return severityLogLevelMappings;\n}\n"],"names":["CONFIG_ROOT_KEY","severityLogLevelMappingsSchema","InputError"],"mappings":";;;;;AA4BO,SAAS,4BAA4B,MAAgB,EAAA;AAC1D,EAAM,MAAA,aAAA,GAAgB,MAAO,CAAA,iBAAA,CAAkBA,qBAAe,CAAA;AAE9D,EAAA,MAAM,wBAA2B,GAAA;AAAA,IAC/B,GACE,EAAA,aAAA,EAAe,iBAAkB,CAAA,8BAA8B,CAC/D,IAAA,OAAA;AAAA,IACF,MACE,EAAA,aAAA,EAAe,iBAAkB,CAAA,iCAAiC,CAClE,IAAA,MAAA;AAAA,IACF,IACE,EAAA,aAAA,EAAe,iBAAkB,CAAA,+BAA+B,CAChE,IAAA,MAAA;AAAA,IACF,QACE,EAAA,aAAA,EAAe,iBAAkB,CAAA,mCAAmC,CACpE,IAAA;AAAA,GACJ;AAEA,EAAA,MAAM,MAAMC,oCAA+B,CAAA,SAAA;AAAA,IACzC;AAAA,GACF;AACA,EAAI,IAAA,CAAC,IAAI,OAAS,EAAA;AAChB,IAAM,MAAA,GAAA,GAAM,IAAI,KAAM,CAAA,MAAA,CAAO,GAAG,CAAC,CAAA,EAAG,IAAK,CAAA,EAAA,CAAG,CAAC,CAAA;AAC7C,IAAA,MAAM,QACJ,GAAI,CAAA,KAAA,CAAM,MAAO,CAAA,EAAA,CAAG,CAAC,CACrB,CAAA,QAAA;AACF,IAAA,MAAM,YACJ,GAAI,CAAA,KAAA,CAAM,MAAO,CAAA,EAAA,CAAG,CAAC,CACrB,CAAA,OAAA;AACF,IAAA,MAAM,IAAIC,iBAAA;AAAA,MACR,CAAyE,sEAAA,EAAA,GAAG,CAAkC,+BAAA,EAAA,KAAK,mDAAmD,SAAU,CAAA,IAAA;AAAA,QAC9K;AAAA,OACD,CAAA,EAAA;AAAA,KACH;AAAA;AAGF,EAAO,OAAA,wBAAA;AACT;;;;"}