{"version":3,"file":"auditorServiceFactory.cjs.js","sources":["../../../src/entrypoints/auditor/auditorServiceFactory.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { DefaultAuditorService } from './DefaultAuditorService';\nimport { getSeverityLogLevelMappings } from './utils';\n\n/**\n * Plugin-level auditing.\n *\n * See {@link @backstage/code-plugin-api#AuditorService}\n * and {@link https://backstage.io/docs/backend-system/core-services/auditor | the service docs}\n * for more information.\n *\n * @public\n */\nexport const auditorServiceFactory = createServiceFactory({\n  service: coreServices.auditor,\n  deps: {\n    config: coreServices.rootConfig,\n    logger: coreServices.logger,\n    auth: coreServices.auth,\n    httpAuth: coreServices.httpAuth,\n    plugin: coreServices.pluginMetadata,\n  },\n  factory({ config, logger, plugin, auth, httpAuth }) {\n    const auditLogger = logger.child({ isAuditEvent: true });\n\n    const severityLogLevelMappings = getSeverityLogLevelMappings(config);\n\n    return DefaultAuditorService.create(\n      event => {\n        if ('error' in event) {\n          const { error, ...rest } = event;\n          const childAuditLogger = auditLogger.child(rest);\n\n          childAuditLogger[severityLogLevelMappings[event.severityLevel]](\n            `${event.plugin}.${event.eventId}`,\n            error,\n          );\n        } else {\n          // the else statement is required for typechecking\n          auditLogger[severityLogLevelMappings[event.severityLevel]](\n            `${event.plugin}.${event.eventId}`,\n            event,\n          );\n        }\n      },\n      { plugin, auth, httpAuth },\n    );\n  },\n});\n"],"names":["createServiceFactory","coreServices","getSeverityLogLevelMappings","DefaultAuditorService"],"mappings":";;;;;;AAgCO,MAAM,wBAAwBA,qCAAqB,CAAA;AAAA,EACxD,SAASC,6BAAa,CAAA,OAAA;AAAA,EACtB,IAAM,EAAA;AAAA,IACJ,QAAQA,6BAAa,CAAA,UAAA;AAAA,IACrB,QAAQA,6BAAa,CAAA,MAAA;AAAA,IACrB,MAAMA,6BAAa,CAAA,IAAA;AAAA,IACnB,UAAUA,6BAAa,CAAA,QAAA;AAAA,IACvB,QAAQA,6BAAa,CAAA;AAAA,GACvB;AAAA,EACA,QAAQ,EAAE,MAAA,EAAQ,QAAQ,MAAQ,EAAA,IAAA,EAAM,UAAY,EAAA;AAClD,IAAA,MAAM,cAAc,MAAO,CAAA,KAAA,CAAM,EAAE,YAAA,EAAc,MAAM,CAAA;AAEvD,IAAM,MAAA,wBAAA,GAA2BC,kCAA4B,MAAM,CAAA;AAEnE,IAAA,OAAOC,2CAAsB,CAAA,MAAA;AAAA,MAC3B,CAAS,KAAA,KAAA;AACP,QAAA,IAAI,WAAW,KAAO,EAAA;AACpB,UAAA,MAAM,EAAE,KAAA,EAAO,GAAG,IAAA,EAAS,GAAA,KAAA;AAC3B,UAAM,MAAA,gBAAA,GAAmB,WAAY,CAAA,KAAA,CAAM,IAAI,CAAA;AAE/C,UAAiB,gBAAA,CAAA,wBAAA,CAAyB,KAAM,CAAA,aAAa,CAAC,CAAA;AAAA,YAC5D,CAAG,EAAA,KAAA,CAAM,MAAM,CAAA,CAAA,EAAI,MAAM,OAAO,CAAA,CAAA;AAAA,YAChC;AAAA,WACF;AAAA,SACK,MAAA;AAEL,UAAY,WAAA,CAAA,wBAAA,CAAyB,KAAM,CAAA,aAAa,CAAC,CAAA;AAAA,YACvD,CAAG,EAAA,KAAA,CAAM,MAAM,CAAA,CAAA,EAAI,MAAM,OAAO,CAAA,CAAA;AAAA,YAChC;AAAA,WACF;AAAA;AACF,OACF;AAAA,MACA,EAAE,MAAQ,EAAA,IAAA,EAAM,QAAS;AAAA,KAC3B;AAAA;AAEJ,CAAC;;;;"}