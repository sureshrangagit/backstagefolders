import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import MenuItem from '@material-ui/core/MenuItem';
import CancelIcon from '@material-ui/icons/Cancel';
import { catalogTranslationRef } from '../../alpha/translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

function UnregisterEntity(props) {
  const {
    unregisterEntityOptions,
    isUnregisterAllowed,
    onUnregisterEntity,
    onClose
  } = props;
  const { t } = useTranslationRef(catalogTranslationRef);
  const isBoolean = typeof unregisterEntityOptions?.disableUnregister === "boolean";
  const isDisabled = (!isUnregisterAllowed || (isBoolean ? !!unregisterEntityOptions?.disableUnregister : unregisterEntityOptions?.disableUnregister === "disable")) ?? false;
  let unregisterButton = /* @__PURE__ */ jsx(Fragment, {});
  if (unregisterEntityOptions?.disableUnregister !== "hidden") {
    unregisterButton = /* @__PURE__ */ jsxs(
      MenuItem,
      {
        onClick: () => {
          onClose();
          onUnregisterEntity();
        },
        disabled: isDisabled,
        children: [
          /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(CancelIcon, { fontSize: "small" }) }),
          /* @__PURE__ */ jsx(ListItemText, { primary: t("entityContextMenu.unregisterMenuTitle") })
        ]
      }
    );
  }
  return /* @__PURE__ */ jsx(Fragment, { children: unregisterButton });
}

export { UnregisterEntity };
//# sourceMappingURL=UnregisterEntity.esm.js.map
