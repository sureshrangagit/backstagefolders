{"version":3,"file":"MultiEntityPicker.esm.js","sources":["../../../../src/components/fields/MultiEntityPicker/MultiEntityPicker.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  type EntityFilterQuery,\n  CATALOG_FILTER_EXISTS,\n} from '@backstage/catalog-client';\nimport {\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { useApi } from '@backstage/core-plugin-api';\nimport {\n  catalogApiRef,\n  entityPresentationApiRef,\n  EntityDisplayName,\n  EntityRefPresentationSnapshot,\n} from '@backstage/plugin-catalog-react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, {\n  AutocompleteChangeReason,\n} from '@material-ui/lab/Autocomplete';\nimport { useCallback, useEffect, useState } from 'react';\nimport useAsync from 'react-use/esm/useAsync';\nimport { FieldValidation } from '@rjsf/utils';\nimport {\n  MultiEntityPickerFilterQueryValue,\n  MultiEntityPickerProps,\n  MultiEntityPickerUiOptions,\n  MultiEntityPickerFilterQuery,\n} from './schema';\nimport { VirtualizedListbox } from '../VirtualizedListbox';\nimport { ScaffolderField } from '@backstage/plugin-scaffolder-react/alpha';\nimport { useTranslationRef } from '@backstage/frontend-plugin-api';\nimport { scaffolderTranslationRef } from '../../../translation';\n\nexport { MultiEntityPickerSchema } from './schema';\n\n/**\n * The underlying component that is rendered in the form for the `MultiEntityPicker`\n * field extension.\n */\nexport const MultiEntityPicker = (props: MultiEntityPickerProps) => {\n  const { t } = useTranslationRef(scaffolderTranslationRef);\n  const {\n    onChange,\n    schema: {\n      title = t('fields.multiEntityPicker.title'),\n      description = t('fields.multiEntityPicker.description'),\n    },\n    required,\n    uiSchema,\n    rawErrors,\n    formData,\n    idSchema,\n    errors,\n  } = props;\n\n  const catalogFilter = buildCatalogFilter(uiSchema);\n  const defaultKind = uiSchema['ui:options']?.defaultKind;\n  const defaultNamespace =\n    uiSchema['ui:options']?.defaultNamespace || undefined;\n  const isDisabled = uiSchema?.['ui:disabled'] ?? false;\n  const [noOfItemsSelected, setNoOfItemsSelected] = useState(0);\n\n  const catalogApi = useApi(catalogApiRef);\n  const entityPresentationApi = useApi(entityPresentationApiRef);\n  const { value: entities, loading } = useAsync(async () => {\n    const { items } = await catalogApi.getEntities(\n      catalogFilter ? { filter: catalogFilter } : undefined,\n    );\n    const entityRefToPresentation = new Map<\n      string,\n      EntityRefPresentationSnapshot\n    >(\n      await Promise.all(\n        items.map(async item => {\n          const presentation = await entityPresentationApi.forEntity(item)\n            .promise;\n          return [stringifyEntityRef(item), presentation] as [\n            string,\n            EntityRefPresentationSnapshot,\n          ];\n        }),\n      ),\n    );\n    return { entities: items, entityRefToPresentation };\n  });\n  const allowArbitraryValues =\n    uiSchema['ui:options']?.allowArbitraryValues ?? true;\n\n  // if not specified, maxItems defaults to undefined\n  const maxItems = props.schema.maxItems;\n\n  const onSelect = useCallback(\n    (_: any, refs: (string | Entity)[], reason: AutocompleteChangeReason) => {\n      const values = refs\n        .map(ref => {\n          if (typeof ref !== 'string') {\n            // if ref does not exist: pass 'undefined' to trigger validation for required value\n            return ref ? stringifyEntityRef(ref as Entity) : undefined;\n          }\n          if (reason === 'blur' || reason === 'create-option') {\n            // Add in default namespace, etc.\n            let entityRef = ref;\n            try {\n              // Attempt to parse the entity ref into it's full form.\n              entityRef = stringifyEntityRef(\n                parseEntityRef(ref as string, {\n                  defaultKind,\n                  defaultNamespace,\n                }),\n              );\n            } catch (err) {\n              // If the passed in value isn't an entity ref, do nothing.\n            }\n\n            // We need to check against formData here as that's the previous value for this field.\n            if (formData?.includes(ref) || allowArbitraryValues) {\n              return entityRef;\n            }\n          }\n\n          return undefined;\n        })\n        .filter(ref => ref !== undefined) as string[];\n\n      setNoOfItemsSelected(values.length);\n      onChange(values);\n    },\n    [onChange, formData, defaultKind, defaultNamespace, allowArbitraryValues],\n  );\n\n  useEffect(() => {\n    if (required && !allowArbitraryValues && entities?.entities?.length === 1) {\n      onChange([stringifyEntityRef(entities?.entities[0])]);\n    }\n  }, [entities, onChange, required, allowArbitraryValues]);\n\n  return (\n    <ScaffolderField\n      rawErrors={rawErrors}\n      rawDescription={uiSchema['ui:description'] ?? description}\n      required={required}\n      disabled={isDisabled}\n      errors={errors}\n    >\n      <Autocomplete\n        multiple\n        filterSelectedOptions\n        disabled={\n          isDisabled ||\n          (required &&\n            !allowArbitraryValues &&\n            entities?.entities?.length === 1)\n        }\n        id={idSchema?.$id}\n        defaultValue={formData}\n        loading={loading}\n        onChange={onSelect}\n        options={entities?.entities || []}\n        renderOption={option => <EntityDisplayName entityRef={option} />}\n        getOptionLabel={option =>\n          // option can be a string due to freeSolo.\n          typeof option === 'string'\n            ? option\n            : entities?.entityRefToPresentation.get(stringifyEntityRef(option))\n                ?.entityRef!\n        }\n        getOptionDisabled={_options =>\n          maxItems ? noOfItemsSelected >= maxItems : false\n        }\n        autoSelect\n        freeSolo={allowArbitraryValues}\n        renderInput={params => (\n          <TextField\n            {...params}\n            label={title}\n            disabled={isDisabled}\n            margin=\"dense\"\n            FormHelperTextProps={{\n              margin: 'dense',\n              style: { marginLeft: 0 },\n            }}\n            variant=\"outlined\"\n            required={required}\n            InputProps={{\n              ...params.InputProps,\n              required: formData?.length === 0 && required,\n            }}\n          />\n        )}\n        ListboxComponent={VirtualizedListbox}\n      />\n    </ScaffolderField>\n  );\n};\n\nexport const validateMultiEntityPickerValidation = (\n  values: string[],\n  validation: FieldValidation,\n) => {\n  values.forEach(value => {\n    try {\n      parseEntityRef(value);\n    } catch {\n      validation.addError(`${value} is not a valid entity ref`);\n    }\n  });\n};\n\n/**\n * Converts a special `{exists: true}` value to the `CATALOG_FILTER_EXISTS` symbol.\n *\n * @param value - The value to convert.\n * @returns The converted value.\n */\nfunction convertOpsValues(\n  value: Exclude<MultiEntityPickerFilterQueryValue, Array<any>>,\n): string | symbol {\n  if (typeof value === 'object' && value.exists) {\n    return CATALOG_FILTER_EXISTS;\n  }\n  return value?.toString();\n}\n\n/**\n * Converts schema filters to entity filter query, replacing `{exists:true}` values\n * with the constant `CATALOG_FILTER_EXISTS`.\n *\n * @param schemaFilters - An object containing schema filters with keys as filter names\n * and values as filter values.\n * @returns An object with the same keys as the input object, but with `{exists:true}` values\n * transformed to `CATALOG_FILTER_EXISTS` symbol.\n */\nfunction convertSchemaFiltersToQuery(\n  schemaFilters: MultiEntityPickerFilterQuery,\n): Exclude<EntityFilterQuery, Array<any>> {\n  const query: EntityFilterQuery = {};\n\n  for (const [key, value] of Object.entries(schemaFilters)) {\n    if (Array.isArray(value)) {\n      query[key] = value;\n    } else {\n      query[key] = convertOpsValues(value);\n    }\n  }\n\n  return query;\n}\n\n/**\n * Builds an `EntityFilterQuery` based on the `uiSchema` passed in.\n * If `catalogFilter` is specified in the `uiSchema`, it is converted to a `EntityFilterQuery`.\n *\n * @param uiSchema The `uiSchema` of an `EntityPicker` component.\n * @returns An `EntityFilterQuery` based on the `uiSchema`, or `undefined` if `catalogFilter` is not specified in the `uiSchema`.\n */\nfunction buildCatalogFilter(\n  uiSchema: MultiEntityPickerProps['uiSchema'],\n): EntityFilterQuery | undefined {\n  const catalogFilter: MultiEntityPickerUiOptions['catalogFilter'] | undefined =\n    uiSchema['ui:options']?.catalogFilter;\n\n  if (!catalogFilter) {\n    return undefined;\n  }\n\n  if (Array.isArray(catalogFilter)) {\n    return catalogFilter.map(convertSchemaFiltersToQuery);\n  }\n\n  return convertSchemaFiltersToQuery(catalogFilter);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAuDa,MAAA,iBAAA,GAAoB,CAAC,KAAkC,KAAA;AAClE,EAAA,MAAM,EAAE,CAAA,EAAM,GAAA,iBAAA,CAAkB,wBAAwB,CAAA;AACxD,EAAM,MAAA;AAAA,IACJ,QAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,KAAA,GAAQ,EAAE,gCAAgC,CAAA;AAAA,MAC1C,WAAA,GAAc,EAAE,sCAAsC;AAAA,KACxD;AAAA,IACA,QAAA;AAAA,IACA,QAAA;AAAA,IACA,SAAA;AAAA,IACA,QAAA;AAAA,IACA,QAAA;AAAA,IACA;AAAA,GACE,GAAA,KAAA;AAEJ,EAAM,MAAA,aAAA,GAAgB,mBAAmB,QAAQ,CAAA;AACjD,EAAM,MAAA,WAAA,GAAc,QAAS,CAAA,YAAY,CAAG,EAAA,WAAA;AAC5C,EAAA,MAAM,gBACJ,GAAA,QAAA,CAAS,YAAY,CAAA,EAAG,gBAAoB,IAAA,KAAA,CAAA;AAC9C,EAAM,MAAA,UAAA,GAAa,QAAW,GAAA,aAAa,CAAK,IAAA,KAAA;AAChD,EAAA,MAAM,CAAC,iBAAA,EAAmB,oBAAoB,CAAA,GAAI,SAAS,CAAC,CAAA;AAE5D,EAAM,MAAA,UAAA,GAAa,OAAO,aAAa,CAAA;AACvC,EAAM,MAAA,qBAAA,GAAwB,OAAO,wBAAwB,CAAA;AAC7D,EAAA,MAAM,EAAE,KAAO,EAAA,QAAA,EAAU,OAAQ,EAAA,GAAI,SAAS,YAAY;AACxD,IAAA,MAAM,EAAE,KAAA,EAAU,GAAA,MAAM,UAAW,CAAA,WAAA;AAAA,MACjC,aAAgB,GAAA,EAAE,MAAQ,EAAA,aAAA,EAAkB,GAAA,KAAA;AAAA,KAC9C;AACA,IAAA,MAAM,0BAA0B,IAAI,GAAA;AAAA,MAIlC,MAAM,OAAQ,CAAA,GAAA;AAAA,QACZ,KAAA,CAAM,GAAI,CAAA,OAAM,IAAQ,KAAA;AACtB,UAAA,MAAM,YAAe,GAAA,MAAM,qBAAsB,CAAA,SAAA,CAAU,IAAI,CAC5D,CAAA,OAAA;AACH,UAAA,OAAO,CAAC,kBAAA,CAAmB,IAAI,CAAA,EAAG,YAAY,CAAA;AAAA,SAI/C;AAAA;AACH,KACF;AACA,IAAO,OAAA,EAAE,QAAU,EAAA,KAAA,EAAO,uBAAwB,EAAA;AAAA,GACnD,CAAA;AACD,EAAA,MAAM,oBACJ,GAAA,QAAA,CAAS,YAAY,CAAA,EAAG,oBAAwB,IAAA,IAAA;AAGlD,EAAM,MAAA,QAAA,GAAW,MAAM,MAAO,CAAA,QAAA;AAE9B,EAAA,MAAM,QAAW,GAAA,WAAA;AAAA,IACf,CAAC,CAAQ,EAAA,IAAA,EAA2B,MAAqC,KAAA;AACvE,MAAM,MAAA,MAAA,GAAS,IACZ,CAAA,GAAA,CAAI,CAAO,GAAA,KAAA;AACV,QAAI,IAAA,OAAO,QAAQ,QAAU,EAAA;AAE3B,UAAO,OAAA,GAAA,GAAM,kBAAmB,CAAA,GAAa,CAAI,GAAA,KAAA,CAAA;AAAA;AAEnD,QAAI,IAAA,MAAA,KAAW,MAAU,IAAA,MAAA,KAAW,eAAiB,EAAA;AAEnD,UAAA,IAAI,SAAY,GAAA,GAAA;AAChB,UAAI,IAAA;AAEF,YAAY,SAAA,GAAA,kBAAA;AAAA,cACV,eAAe,GAAe,EAAA;AAAA,gBAC5B,WAAA;AAAA,gBACA;AAAA,eACD;AAAA,aACH;AAAA,mBACO,GAAK,EAAA;AAAA;AAKd,UAAA,IAAI,QAAU,EAAA,QAAA,CAAS,GAAG,CAAA,IAAK,oBAAsB,EAAA;AACnD,YAAO,OAAA,SAAA;AAAA;AACT;AAGF,QAAO,OAAA,KAAA,CAAA;AAAA,OACR,CAAA,CACA,MAAO,CAAA,CAAA,GAAA,KAAO,QAAQ,KAAS,CAAA,CAAA;AAElC,MAAA,oBAAA,CAAqB,OAAO,MAAM,CAAA;AAClC,MAAA,QAAA,CAAS,MAAM,CAAA;AAAA,KACjB;AAAA,IACA,CAAC,QAAA,EAAU,QAAU,EAAA,WAAA,EAAa,kBAAkB,oBAAoB;AAAA,GAC1E;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,YAAY,CAAC,oBAAA,IAAwB,QAAU,EAAA,QAAA,EAAU,WAAW,CAAG,EAAA;AACzE,MAAA,QAAA,CAAS,CAAC,kBAAmB,CAAA,QAAA,EAAU,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;AAAA;AACtD,KACC,CAAC,QAAA,EAAU,QAAU,EAAA,QAAA,EAAU,oBAAoB,CAAC,CAAA;AAEvD,EACE,uBAAA,GAAA;AAAA,IAAC,eAAA;AAAA,IAAA;AAAA,MACC,SAAA;AAAA,MACA,cAAA,EAAgB,QAAS,CAAA,gBAAgB,CAAK,IAAA,WAAA;AAAA,MAC9C,QAAA;AAAA,MACA,QAAU,EAAA,UAAA;AAAA,MACV,MAAA;AAAA,MAEA,QAAA,kBAAA,GAAA;AAAA,QAAC,YAAA;AAAA,QAAA;AAAA,UACC,QAAQ,EAAA,IAAA;AAAA,UACR,qBAAqB,EAAA,IAAA;AAAA,UACrB,UACE,UACC,IAAA,QAAA,IACC,CAAC,oBACD,IAAA,QAAA,EAAU,UAAU,MAAW,KAAA,CAAA;AAAA,UAEnC,IAAI,QAAU,EAAA,GAAA;AAAA,UACd,YAAc,EAAA,QAAA;AAAA,UACd,OAAA;AAAA,UACA,QAAU,EAAA,QAAA;AAAA,UACV,OAAA,EAAS,QAAU,EAAA,QAAA,IAAY,EAAC;AAAA,UAChC,YAAc,EAAA,CAAA,MAAA,qBAAW,GAAA,CAAA,iBAAA,EAAA,EAAkB,WAAW,MAAQ,EAAA,CAAA;AAAA,UAC9D,cAAgB,EAAA,CAAA,MAAA;AAAA;AAAA,YAEd,OAAO,MAAW,KAAA,QAAA,GACd,MACA,GAAA,QAAA,EAAU,wBAAwB,GAAI,CAAA,kBAAA,CAAmB,MAAM,CAAC,CAC5D,EAAA;AAAA,WAAA;AAAA,UAEV,iBAAmB,EAAA,CAAA,QAAA,KACjB,QAAW,GAAA,iBAAA,IAAqB,QAAW,GAAA,KAAA;AAAA,UAE7C,UAAU,EAAA,IAAA;AAAA,UACV,QAAU,EAAA,oBAAA;AAAA,UACV,aAAa,CACX,MAAA,qBAAA,GAAA;AAAA,YAAC,SAAA;AAAA,YAAA;AAAA,cACE,GAAG,MAAA;AAAA,cACJ,KAAO,EAAA,KAAA;AAAA,cACP,QAAU,EAAA,UAAA;AAAA,cACV,MAAO,EAAA,OAAA;AAAA,cACP,mBAAqB,EAAA;AAAA,gBACnB,MAAQ,EAAA,OAAA;AAAA,gBACR,KAAA,EAAO,EAAE,UAAA,EAAY,CAAE;AAAA,eACzB;AAAA,cACA,OAAQ,EAAA,UAAA;AAAA,cACR,QAAA;AAAA,cACA,UAAY,EAAA;AAAA,gBACV,GAAG,MAAO,CAAA,UAAA;AAAA,gBACV,QAAA,EAAU,QAAU,EAAA,MAAA,KAAW,CAAK,IAAA;AAAA;AACtC;AAAA,WACF;AAAA,UAEF,gBAAkB,EAAA;AAAA;AAAA;AACpB;AAAA,GACF;AAEJ;AAEa,MAAA,mCAAA,GAAsC,CACjD,MAAA,EACA,UACG,KAAA;AACH,EAAA,MAAA,CAAO,QAAQ,CAAS,KAAA,KAAA;AACtB,IAAI,IAAA;AACF,MAAA,cAAA,CAAe,KAAK,CAAA;AAAA,KACd,CAAA,MAAA;AACN,MAAW,UAAA,CAAA,QAAA,CAAS,CAAG,EAAA,KAAK,CAA4B,0BAAA,CAAA,CAAA;AAAA;AAC1D,GACD,CAAA;AACH;AAQA,SAAS,iBACP,KACiB,EAAA;AACjB,EAAA,IAAI,OAAO,KAAA,KAAU,QAAY,IAAA,KAAA,CAAM,MAAQ,EAAA;AAC7C,IAAO,OAAA,qBAAA;AAAA;AAET,EAAA,OAAO,OAAO,QAAS,EAAA;AACzB;AAWA,SAAS,4BACP,aACwC,EAAA;AACxC,EAAA,MAAM,QAA2B,EAAC;AAElC,EAAA,KAAA,MAAW,CAAC,GAAK,EAAA,KAAK,KAAK,MAAO,CAAA,OAAA,CAAQ,aAAa,CAAG,EAAA;AACxD,IAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,KAAK,CAAG,EAAA;AACxB,MAAA,KAAA,CAAM,GAAG,CAAI,GAAA,KAAA;AAAA,KACR,MAAA;AACL,MAAM,KAAA,CAAA,GAAG,CAAI,GAAA,gBAAA,CAAiB,KAAK,CAAA;AAAA;AACrC;AAGF,EAAO,OAAA,KAAA;AACT;AASA,SAAS,mBACP,QAC+B,EAAA;AAC/B,EAAM,MAAA,aAAA,GACJ,QAAS,CAAA,YAAY,CAAG,EAAA,aAAA;AAE1B,EAAA,IAAI,CAAC,aAAe,EAAA;AAClB,IAAO,OAAA,KAAA,CAAA;AAAA;AAGT,EAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,aAAa,CAAG,EAAA;AAChC,IAAO,OAAA,aAAA,CAAc,IAAI,2BAA2B,CAAA;AAAA;AAGtD,EAAA,OAAO,4BAA4B,aAAa,CAAA;AAClD;;;;"}