{"version":3,"file":"TemplateGlobals.esm.js","sources":["../../../src/components/TemplatingExtensionsPage/TemplateGlobals.tsx"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CodeSnippet, Link, MarkdownContent } from '@backstage/core-components';\nimport {\n  ListTemplatingExtensionsResponse,\n  TemplateGlobalFunction,\n} from '@backstage/plugin-scaffolder-react';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Box from '@material-ui/core/Box';\nimport { ClassNameMap } from '@material-ui/core/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport classNames from 'classnames';\nimport { cloneElement, Fragment, ReactElement, useState } from 'react';\nimport { scaffolderTranslationRef } from '../../translation';\nimport { Expanded, RenderSchema, SchemaRenderContext } from '../RenderSchema';\nimport { ScaffolderUsageExamplesTable } from '../ScaffolderUsageExamplesTable';\nimport { inspectFunctionArgSchema } from './functionArgs';\nimport { Extension, renderFragment } from './navigation';\nimport { TranslationMessages } from './types';\n\nconst FunctionDetailContent = ({\n  classes,\n  name,\n  fn,\n  t,\n}: {\n  classes: ClassNameMap;\n  name: string;\n  fn: TemplateGlobalFunction;\n  t: TranslationMessages<typeof scaffolderTranslationRef>;\n}) => {\n  const expanded = useState<Expanded>({});\n  if (!Object.keys(fn).length) {\n    return (\n      <Typography\n        style={{ fontStyle: 'italic' }}\n        data-testid={`${name}.metadataAbsent`}\n      >\n        {t('templatingExtensions.content.functions.metadataAbsent')}\n      </Typography>\n    );\n  }\n  const schema = fn.schema;\n  const partialSchemaRenderContext: Omit<SchemaRenderContext, 'parentId'> = {\n    classes,\n    expanded,\n    headings: [<Typography variant=\"h6\" component=\"h4\" />],\n  };\n  return (\n    <Fragment key={`${name}.detail`}>\n      {fn.description && <MarkdownContent content={fn.description} />}\n      {schema?.arguments?.length && (\n        <Box key={`${name}.args`} pb={2}>\n          <Typography variant=\"h5\" component=\"h3\">\n            {t('templatingExtensions.content.functions.schema.arguments')}\n          </Typography>\n          {schema.arguments.map((arg, i) => {\n            const [argSchema, required] = inspectFunctionArgSchema(arg);\n\n            return (\n              <Fragment key={i}>\n                <div\n                  className={classNames({ [classes.argRequired]: required })}\n                >\n                  <Typography\n                    variant=\"h6\"\n                    component=\"h4\"\n                  >{`[${i}]`}</Typography>\n                </div>\n                <RenderSchema\n                  strategy=\"root\"\n                  context={{\n                    parentId: `${name}.arg${i}`,\n                    ...partialSchemaRenderContext,\n                    headings: [<Typography variant=\"h6\" component=\"h5\" />],\n                  }}\n                  schema={argSchema}\n                />\n              </Fragment>\n            );\n          })}\n        </Box>\n      )}\n      <Box pb={2}>\n        <Typography variant=\"h5\" component=\"h3\">\n          {t('templatingExtensions.content.functions.schema.output')}\n        </Typography>\n        <RenderSchema\n          strategy=\"root\"\n          context={{\n            parentId: `${name}.output`,\n            ...partialSchemaRenderContext,\n          }}\n          schema={schema?.output ?? {}}\n        />\n      </Box>\n      {fn.examples && (\n        <Accordion>\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography variant=\"h5\" component=\"h3\">\n              {t('templatingExtensions.content.functions.examples')}\n            </Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Box pb={2}>\n              <ScaffolderUsageExamplesTable examples={fn.examples} />\n            </Box>\n          </AccordionDetails>\n        </Accordion>\n      )}\n    </Fragment>\n  );\n};\n\nexport const TemplateGlobalFunctions = ({\n  classes,\n  functions,\n  t,\n  baseLink,\n  selectedItem,\n}: {\n  classes: ClassNameMap;\n  functions: ListTemplatingExtensionsResponse['globals']['functions'];\n  t: TranslationMessages<typeof scaffolderTranslationRef>;\n  baseLink: ReactElement<Parameters<typeof Link>[0]>;\n  selectedItem: Extension | null;\n}) => {\n  if (selectedItem && selectedItem.kind !== 'function') {\n    return <></>;\n  }\n  if (!Object.keys(functions).length) {\n    return (\n      <div data-testid=\"no-functions\">\n        {t('templatingExtensions.content.functions.notAvailable')}\n      </div>\n    );\n  }\n  return (\n    <div data-testid=\"functions\">\n      {Object.entries(\n        selectedItem\n          ? { [selectedItem.name]: functions[selectedItem.name] }\n          : functions,\n      ).map(([name, fn]) => {\n        const fragment = renderFragment({ kind: 'function', name });\n        return (\n          <Box pb={4} key={name} data-testid={name}>\n            <Typography\n              id={fragment}\n              variant=\"h4\"\n              component=\"h2\"\n              className={classes.code}\n            >\n              {name}\n            </Typography>\n            {cloneElement(baseLink, {\n              to: `${baseLink.props.to}#${fragment}`,\n            })}\n            <FunctionDetailContent {...{ classes, name, fn, t }} />\n          </Box>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const TemplateGlobalValues = ({\n  classes,\n  t,\n  values,\n  baseLink,\n  selectedItem,\n}: {\n  classes: ClassNameMap;\n  t: TranslationMessages<typeof scaffolderTranslationRef>;\n  values: ListTemplatingExtensionsResponse['globals']['values'];\n  baseLink: ReactElement<Parameters<typeof Link>[0]>;\n  selectedItem: Extension | null;\n}) => {\n  if (selectedItem && selectedItem.kind !== 'value') {\n    return <></>;\n  }\n  if (!Object.keys(values).length) {\n    return (\n      <div data-testid=\"no-values\">\n        {t('templatingExtensions.content.values.notAvailable')}\n      </div>\n    );\n  }\n  return (\n    <div data-testid=\"values\">\n      {Object.entries(\n        selectedItem\n          ? { [selectedItem.name]: values[selectedItem.name] }\n          : values,\n      ).map(([name, gv]) => {\n        const fragment = renderFragment({ kind: 'value', name });\n        return (\n          <Box pb={4} key={name} data-testid={name}>\n            <Typography\n              id={fragment}\n              variant=\"h4\"\n              component=\"h2\"\n              className={classes.code}\n            >\n              {name}\n            </Typography>\n            {cloneElement(baseLink, {\n              to: `${baseLink.props.to}#${fragment}`,\n            })}\n            {gv.description && <MarkdownContent content={gv.description} />}\n            <Box padding={1} data-testid={`${name}.value`}>\n              <CodeSnippet\n                text={JSON.stringify(gv.value, null, 2)}\n                showCopyCodeButton\n                language=\"json\"\n              />\n            </Box>\n          </Box>\n        );\n      })}\n    </div>\n  );\n};\n"],"names":["Fragment"],"mappings":"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"}