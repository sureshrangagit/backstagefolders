{"version":3,"file":"DryRunResultsView.esm.js","sources":["../../../../../src/alpha/components/TemplateEditorPage/DryRunResults/DryRunResultsView.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogViewer } from '@backstage/core-components';\nimport { StreamLanguage } from '@codemirror/language';\nimport { yaml as yamlSupport } from '@codemirror/legacy-modes/mode/yaml';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDryRun } from '../DryRunContext';\nimport { DryRunResultsSplitView } from './DryRunResultsSplitView';\nimport { FileBrowser } from '../../../../components/FileBrowser';\nimport { TaskPageLinks } from './TaskPageLinks';\nimport { TaskStatusStepper } from './TaskStatusStepper';\nimport { useTranslationRef } from '@backstage/core-plugin-api/alpha';\nimport { scaffolderTranslationRef } from '../../../../translation';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexFlow: 'column nowrap',\n  },\n  contentWrapper: {\n    flex: 1,\n    position: 'relative',\n  },\n  content: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n\n    display: 'flex',\n    '& > *': {\n      flex: 1,\n    },\n  },\n  codeMirror: {\n    height: '100%',\n    overflowY: 'auto',\n  },\n});\n\nfunction FilesContent() {\n  const classes = useStyles();\n  const { selectedResult } = useDryRun();\n  const [selectedPath, setSelectedPath] = useState<string>('');\n  const selectedFile = selectedResult?.directoryContents.find(\n    f => f.path === selectedPath,\n  );\n\n  useEffect(() => {\n    if (selectedResult) {\n      const [firstFile] = selectedResult.directoryContents;\n      if (firstFile) {\n        setSelectedPath(firstFile.path);\n      } else {\n        setSelectedPath('');\n      }\n    }\n    return undefined;\n  }, [selectedResult]);\n\n  if (!selectedResult) {\n    return null;\n  }\n  return (\n    <DryRunResultsSplitView>\n      <FileBrowser\n        selected={selectedPath}\n        onSelect={setSelectedPath}\n        filePaths={selectedResult.directoryContents.map(file => file.path)}\n      />\n      <CodeMirror\n        className={classes.codeMirror}\n        theme=\"dark\"\n        height=\"100%\"\n        extensions={[StreamLanguage.define(yamlSupport)]}\n        readOnly\n        value={\n          selectedFile?.base64Content ? atob(selectedFile.base64Content) : ''\n        }\n      />\n    </DryRunResultsSplitView>\n  );\n}\nfunction LogContent() {\n  const { selectedResult } = useDryRun();\n  const [currentStepId, setUserSelectedStepId] = useState<string>();\n\n  const steps = useMemo(() => {\n    if (!selectedResult) {\n      return [];\n    }\n    return (\n      selectedResult.steps.map(step => {\n        const stepLog = selectedResult.log.filter(\n          l => l.body.stepId === step.id,\n        );\n        return {\n          id: step.id,\n          name: step.name,\n          logString: stepLog.map(l => l.body.message).join('\\n'),\n          status: stepLog[stepLog.length - 1]?.body.status ?? 'completed',\n        };\n      }) ?? []\n    );\n  }, [selectedResult]);\n\n  if (!selectedResult) {\n    return null;\n  }\n\n  const selectedStep = steps.find(s => s.id === currentStepId) ?? steps[0];\n\n  return (\n    <DryRunResultsSplitView>\n      <TaskStatusStepper\n        steps={steps}\n        currentStepId={selectedStep.id}\n        onUserStepChange={setUserSelectedStepId}\n      />\n      <LogViewer text={selectedStep?.logString ?? ''} />\n    </DryRunResultsSplitView>\n  );\n}\n\nfunction OutputContent() {\n  const classes = useStyles();\n  const { selectedResult } = useDryRun();\n\n  if (!selectedResult) {\n    return null;\n  }\n\n  return (\n    <DryRunResultsSplitView>\n      <Box pt={2}>\n        {selectedResult.output?.links?.length && (\n          <TaskPageLinks output={selectedResult.output} />\n        )}\n      </Box>\n      <CodeMirror\n        className={classes.codeMirror}\n        theme=\"dark\"\n        height=\"100%\"\n        extensions={[StreamLanguage.define(yamlSupport)]}\n        readOnly\n        value={JSON.stringify(selectedResult.output, null, 2)}\n      />\n    </DryRunResultsSplitView>\n  );\n}\n\nexport function DryRunResultsView() {\n  const classes = useStyles();\n  const [selectedTab, setSelectedTab] = useState<'files' | 'log' | 'output'>(\n    'files',\n  );\n  const { t } = useTranslationRef(scaffolderTranslationRef);\n\n  return (\n    <div className={classes.root}>\n      <Tabs value={selectedTab} onChange={(_, v) => setSelectedTab(v)}>\n        <Tab\n          value=\"files\"\n          label={t('templateEditorPage.dryRunResultsView.tab.files')}\n        />\n        <Tab\n          value=\"log\"\n          label={t('templateEditorPage.dryRunResultsView.tab.log')}\n        />\n        <Tab\n          value=\"output\"\n          label={t('templateEditorPage.dryRunResultsView.tab.output')}\n        />\n      </Tabs>\n      <Divider />\n\n      <div className={classes.contentWrapper}>\n        <div className={classes.content}>\n          {selectedTab === 'files' && <FilesContent />}\n          {selectedTab === 'log' && <LogContent />}\n          {selectedTab === 'output' && <OutputContent />}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["yamlSupport"],"mappings":";;;;;;;;;;;;;;;;;;;AAkCA,MAAM,YAAY,UAAW,CAAA;AAAA,EAC3B,IAAM,EAAA;AAAA,IACJ,OAAS,EAAA,MAAA;AAAA,IACT,QAAU,EAAA;AAAA,GACZ;AAAA,EACA,cAAgB,EAAA;AAAA,IACd,IAAM,EAAA,CAAA;AAAA,IACN,QAAU,EAAA;AAAA,GACZ;AAAA,EACA,OAAS,EAAA;AAAA,IACP,QAAU,EAAA,UAAA;AAAA,IACV,GAAK,EAAA,CAAA;AAAA,IACL,IAAM,EAAA,CAAA;AAAA,IACN,KAAO,EAAA,CAAA;AAAA,IACP,MAAQ,EAAA,CAAA;AAAA,IAER,OAAS,EAAA,MAAA;AAAA,IACT,OAAS,EAAA;AAAA,MACP,IAAM,EAAA;AAAA;AACR,GACF;AAAA,EACA,UAAY,EAAA;AAAA,IACV,MAAQ,EAAA,MAAA;AAAA,IACR,SAAW,EAAA;AAAA;AAEf,CAAC,CAAA;AAED,SAAS,YAAe,GAAA;AACtB,EAAA,MAAM,UAAU,SAAU,EAAA;AAC1B,EAAM,MAAA,EAAE,cAAe,EAAA,GAAI,SAAU,EAAA;AACrC,EAAA,MAAM,CAAC,YAAA,EAAc,eAAe,CAAA,GAAI,SAAiB,EAAE,CAAA;AAC3D,EAAM,MAAA,YAAA,GAAe,gBAAgB,iBAAkB,CAAA,IAAA;AAAA,IACrD,CAAA,CAAA,KAAK,EAAE,IAAS,KAAA;AAAA,GAClB;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,cAAgB,EAAA;AAClB,MAAM,MAAA,CAAC,SAAS,CAAA,GAAI,cAAe,CAAA,iBAAA;AACnC,MAAA,IAAI,SAAW,EAAA;AACb,QAAA,eAAA,CAAgB,UAAU,IAAI,CAAA;AAAA,OACzB,MAAA;AACL,QAAA,eAAA,CAAgB,EAAE,CAAA;AAAA;AACpB;AAEF,IAAO,OAAA,KAAA,CAAA;AAAA,GACT,EAAG,CAAC,cAAc,CAAC,CAAA;AAEnB,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAO,OAAA,IAAA;AAAA;AAET,EAAA,4BACG,sBACC,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAA,GAAA;AAAA,MAAC,WAAA;AAAA,MAAA;AAAA,QACC,QAAU,EAAA,YAAA;AAAA,QACV,QAAU,EAAA,eAAA;AAAA,QACV,WAAW,cAAe,CAAA,iBAAA,CAAkB,GAAI,CAAA,CAAA,IAAA,KAAQ,KAAK,IAAI;AAAA;AAAA,KACnE;AAAA,oBACA,GAAA;AAAA,MAAC,UAAA;AAAA,MAAA;AAAA,QACC,WAAW,OAAQ,CAAA,UAAA;AAAA,QACnB,KAAM,EAAA,MAAA;AAAA,QACN,MAAO,EAAA,MAAA;AAAA,QACP,UAAY,EAAA,CAAC,cAAe,CAAA,MAAA,CAAOA,IAAW,CAAC,CAAA;AAAA,QAC/C,QAAQ,EAAA,IAAA;AAAA,QACR,OACE,YAAc,EAAA,aAAA,GAAgB,IAAK,CAAA,YAAA,CAAa,aAAa,CAAI,GAAA;AAAA;AAAA;AAErE,GACF,EAAA,CAAA;AAEJ;AACA,SAAS,UAAa,GAAA;AACpB,EAAM,MAAA,EAAE,cAAe,EAAA,GAAI,SAAU,EAAA;AACrC,EAAA,MAAM,CAAC,aAAA,EAAe,qBAAqB,CAAA,GAAI,QAAiB,EAAA;AAEhE,EAAM,MAAA,KAAA,GAAQ,QAAQ,MAAM;AAC1B,IAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,MAAA,OAAO,EAAC;AAAA;AAEV,IACE,OAAA,cAAA,CAAe,KAAM,CAAA,GAAA,CAAI,CAAQ,IAAA,KAAA;AAC/B,MAAM,MAAA,OAAA,GAAU,eAAe,GAAI,CAAA,MAAA;AAAA,QACjC,CAAK,CAAA,KAAA,CAAA,CAAE,IAAK,CAAA,MAAA,KAAW,IAAK,CAAA;AAAA,OAC9B;AACA,MAAO,OAAA;AAAA,QACL,IAAI,IAAK,CAAA,EAAA;AAAA,QACT,MAAM,IAAK,CAAA,IAAA;AAAA,QACX,SAAA,EAAW,QAAQ,GAAI,CAAA,CAAA,CAAA,KAAK,EAAE,IAAK,CAAA,OAAO,CAAE,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA,QACrD,QAAQ,OAAQ,CAAA,OAAA,CAAQ,SAAS,CAAC,CAAA,EAAG,KAAK,MAAU,IAAA;AAAA,OACtD;AAAA,KACD,KAAK,EAAC;AAAA,GAEX,EAAG,CAAC,cAAc,CAAC,CAAA;AAEnB,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAO,OAAA,IAAA;AAAA;AAGT,EAAM,MAAA,YAAA,GAAe,MAAM,IAAK,CAAA,CAAA,CAAA,KAAK,EAAE,EAAO,KAAA,aAAa,CAAK,IAAA,KAAA,CAAM,CAAC,CAAA;AAEvE,EAAA,4BACG,sBACC,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAA,GAAA;AAAA,MAAC,iBAAA;AAAA,MAAA;AAAA,QACC,KAAA;AAAA,QACA,eAAe,YAAa,CAAA,EAAA;AAAA,QAC5B,gBAAkB,EAAA;AAAA;AAAA,KACpB;AAAA,oBACC,GAAA,CAAA,SAAA,EAAA,EAAU,IAAM,EAAA,YAAA,EAAc,aAAa,EAAI,EAAA;AAAA,GAClD,EAAA,CAAA;AAEJ;AAEA,SAAS,aAAgB,GAAA;AACvB,EAAA,MAAM,UAAU,SAAU,EAAA;AAC1B,EAAM,MAAA,EAAE,cAAe,EAAA,GAAI,SAAU,EAAA;AAErC,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAO,OAAA,IAAA;AAAA;AAGT,EAAA,4BACG,sBACC,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAA,GAAA,CAAC,GAAI,EAAA,EAAA,EAAA,EAAI,CACN,EAAA,QAAA,EAAA,cAAA,CAAe,MAAQ,EAAA,KAAA,EAAO,MAC7B,oBAAA,GAAA,CAAC,aAAc,EAAA,EAAA,MAAA,EAAQ,cAAe,CAAA,MAAA,EAAQ,CAElD,EAAA,CAAA;AAAA,oBACA,GAAA;AAAA,MAAC,UAAA;AAAA,MAAA;AAAA,QACC,WAAW,OAAQ,CAAA,UAAA;AAAA,QACnB,KAAM,EAAA,MAAA;AAAA,QACN,MAAO,EAAA,MAAA;AAAA,QACP,UAAY,EAAA,CAAC,cAAe,CAAA,MAAA,CAAOA,IAAW,CAAC,CAAA;AAAA,QAC/C,QAAQ,EAAA,IAAA;AAAA,QACR,OAAO,IAAK,CAAA,SAAA,CAAU,cAAe,CAAA,MAAA,EAAQ,MAAM,CAAC;AAAA;AAAA;AACtD,GACF,EAAA,CAAA;AAEJ;AAEO,SAAS,iBAAoB,GAAA;AAClC,EAAA,MAAM,UAAU,SAAU,EAAA;AAC1B,EAAM,MAAA,CAAC,WAAa,EAAA,cAAc,CAAI,GAAA,QAAA;AAAA,IACpC;AAAA,GACF;AACA,EAAA,MAAM,EAAE,CAAA,EAAM,GAAA,iBAAA,CAAkB,wBAAwB,CAAA;AAExD,EAAA,uBACG,IAAA,CAAA,KAAA,EAAA,EAAI,SAAW,EAAA,OAAA,CAAQ,IACtB,EAAA,QAAA,EAAA;AAAA,oBAAC,IAAA,CAAA,IAAA,EAAA,EAAK,OAAO,WAAa,EAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,KAAM,cAAe,CAAA,CAAC,CAC5D,EAAA,QAAA,EAAA;AAAA,sBAAA,GAAA;AAAA,QAAC,GAAA;AAAA,QAAA;AAAA,UACC,KAAM,EAAA,OAAA;AAAA,UACN,KAAA,EAAO,EAAE,gDAAgD;AAAA;AAAA,OAC3D;AAAA,sBACA,GAAA;AAAA,QAAC,GAAA;AAAA,QAAA;AAAA,UACC,KAAM,EAAA,KAAA;AAAA,UACN,KAAA,EAAO,EAAE,8CAA8C;AAAA;AAAA,OACzD;AAAA,sBACA,GAAA;AAAA,QAAC,GAAA;AAAA,QAAA;AAAA,UACC,KAAM,EAAA,QAAA;AAAA,UACN,KAAA,EAAO,EAAE,iDAAiD;AAAA;AAAA;AAC5D,KACF,EAAA,CAAA;AAAA,wBACC,OAAQ,EAAA,EAAA,CAAA;AAAA,oBAET,GAAA,CAAC,SAAI,SAAW,EAAA,OAAA,CAAQ,gBACtB,QAAC,kBAAA,IAAA,CAAA,KAAA,EAAA,EAAI,SAAW,EAAA,OAAA,CAAQ,OACrB,EAAA,QAAA,EAAA;AAAA,MAAgB,WAAA,KAAA,OAAA,wBAAY,YAAa,EAAA,EAAA,CAAA;AAAA,MACzC,WAAA,KAAgB,KAAS,oBAAA,GAAA,CAAC,UAAW,EAAA,EAAA,CAAA;AAAA,MACrC,WAAA,KAAgB,QAAY,oBAAA,GAAA,CAAC,aAAc,EAAA,EAAA;AAAA,KAAA,EAC9C,CACF,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ;;;;"}