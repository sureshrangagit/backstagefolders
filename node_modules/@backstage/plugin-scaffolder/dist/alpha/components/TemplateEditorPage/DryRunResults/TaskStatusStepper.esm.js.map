{"version":3,"file":"TaskStatusStepper.esm.js","sources":["../../../../../src/alpha/components/TemplateEditorPage/DryRunResults/TaskStatusStepper.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useState } from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { memo } from 'react';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Stepper from '@material-ui/core/Stepper';\nimport { ScaffolderTaskStatus } from '@backstage/plugin-scaffolder-react';\nimport StepButton from '@material-ui/core/StepButton';\nimport { StepIconProps } from '@material-ui/core/StepIcon';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Cancel from '@material-ui/icons/Cancel';\nimport Check from '@material-ui/icons/Check';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Typography from '@material-ui/core/Typography';\nimport { DateTime, Interval } from 'luxon';\nimport useInterval from 'react-use/esm/useInterval';\nimport humanizeDuration from 'humanize-duration';\nimport classNames from 'classnames';\nimport { useTranslationRef } from '@backstage/core-plugin-api/alpha';\nimport { scaffolderTranslationRef } from '../../../../translation';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    button: {\n      marginBottom: theme.spacing(2),\n      marginLeft: theme.spacing(2),\n    },\n    actionsContainer: {\n      marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n      padding: theme.spacing(3),\n    },\n    labelWrapper: {\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    stepWrapper: {\n      width: '100%',\n    },\n  }),\n);\n\ntype TaskStep = {\n  id: string;\n  name: string;\n  status: ScaffolderTaskStatus;\n  startedAt?: string;\n  endedAt?: string;\n};\n\nconst useStepIconStyles = makeStyles(theme =>\n  createStyles({\n    root: {\n      color: theme.palette.text.disabled,\n      display: 'flex',\n      height: 22,\n      alignItems: 'center',\n    },\n    completed: {\n      color: theme.palette.status.ok,\n    },\n    error: {\n      color: theme.palette.status.error,\n    },\n  }),\n);\n\nconst StepTimeTicker = ({ step }: { step: TaskStep }) => {\n  const [time, setTime] = useState('');\n\n  useInterval(() => {\n    if (!step.startedAt) {\n      setTime('');\n      return;\n    }\n\n    const end = step.endedAt\n      ? DateTime.fromISO(step.endedAt)\n      : DateTime.local();\n\n    const startedAt = DateTime.fromISO(step.startedAt);\n    const formatted = Interval.fromDateTimes(startedAt, end)\n      .toDuration()\n      .valueOf();\n\n    setTime(humanizeDuration(formatted, { round: true }));\n  }, 1000);\n\n  return <Typography variant=\"caption\">{time}</Typography>;\n};\n\nfunction TaskStepIconComponent(props: StepIconProps) {\n  const classes = useStepIconStyles();\n  const { active, completed, error } = props;\n\n  const getMiddle = () => {\n    if (active) {\n      return <CircularProgress size=\"24px\" />;\n    }\n    if (completed) {\n      return <Check />;\n    }\n    if (error) {\n      return <Cancel />;\n    }\n    return <FiberManualRecordIcon />;\n  };\n\n  return (\n    <div\n      className={classNames(classes.root, {\n        [classes.completed]: completed,\n        [classes.error]: error,\n      })}\n    >\n      {getMiddle()}\n    </div>\n  );\n}\n\nexport const TaskStatusStepper = memo(\n  (props: {\n    steps: TaskStep[];\n    currentStepId: string | undefined;\n    onUserStepChange: (id: string) => void;\n    classes?: {\n      root?: string;\n    };\n  }) => {\n    const { steps, currentStepId, onUserStepChange } = props;\n    const classes = useStyles(props);\n    const { t } = useTranslationRef(scaffolderTranslationRef);\n\n    return (\n      <div className={classes.root}>\n        <Stepper\n          activeStep={steps.findIndex(s => s.id === currentStepId)}\n          orientation=\"vertical\"\n          nonLinear\n        >\n          {steps.map((step, index) => {\n            const isCancelled = step.status === 'cancelled';\n            const isActive = step.status === 'processing';\n            const isCompleted = step.status === 'completed';\n            const isFailed = step.status === 'failed';\n            const isSkipped = step.status === 'skipped';\n\n            return (\n              <Step key={String(index)} expanded>\n                <StepButton onClick={() => onUserStepChange(step.id)}>\n                  <StepLabel\n                    StepIconProps={{\n                      completed: isCompleted,\n                      error: isFailed || isCancelled,\n                      active: isActive,\n                    }}\n                    StepIconComponent={TaskStepIconComponent}\n                    className={classes.stepWrapper}\n                  >\n                    <div className={classes.labelWrapper}>\n                      <Typography variant=\"subtitle2\">{step.name}</Typography>\n                      {isSkipped ? (\n                        <Typography variant=\"caption\">\n                          {t(\n                            'templateEditorPage.taskStatusStepper.skippedStepTitle',\n                          )}\n                        </Typography>\n                      ) : (\n                        <StepTimeTicker step={step} />\n                      )}\n                    </div>\n                  </StepLabel>\n                </StepButton>\n              </Step>\n            );\n          })}\n        </Stepper>\n      </div>\n    );\n  },\n);\n"],"names":["Check"],"mappings":"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"}