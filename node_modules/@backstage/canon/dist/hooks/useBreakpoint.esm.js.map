{"version":3,"file":"useBreakpoint.esm.js","sources":["../../src/hooks/useBreakpoint.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useMediaQuery } from './useMediaQuery';\nimport type { Breakpoint } from '../types';\n\nexport const breakpoints: { name: string; id: Breakpoint; value: number }[] = [\n  { name: 'Initial', id: 'initial', value: 0 },\n  { name: 'Extra Small', id: 'xs', value: 640 },\n  { name: 'Small', id: 'sm', value: 768 },\n  { name: 'Medium', id: 'md', value: 1024 },\n  { name: 'Large', id: 'lg', value: 1280 },\n  { name: 'Extra Large', id: 'xl', value: 1536 },\n];\n\n/** @public */\nexport const useBreakpoint = () => {\n  // Call all media queries at the top level\n  const matches = breakpoints.map(breakpoint => {\n    return useMediaQuery(`(min-width: ${breakpoint.value}px)`);\n  });\n\n  // Pre-calculate all the up/down values we need\n  const upMatches = new Map(\n    breakpoints.map(bp => [bp.id, useMediaQuery(`(min-width: ${bp.value}px)`)]),\n  );\n\n  const downMatches = new Map(\n    breakpoints.map(bp => [\n      bp.id,\n      useMediaQuery(`(max-width: ${bp.value - 1}px)`),\n    ]),\n  );\n\n  let breakpoint: Breakpoint = breakpoints[0].id;\n  for (let i = matches.length - 1; i >= 0; i--) {\n    if (matches[i]) {\n      breakpoint = breakpoints[i].id;\n      break;\n    }\n  }\n\n  return {\n    breakpoint,\n    up: (key: Breakpoint): boolean => {\n      return upMatches.get(key) ?? false;\n    },\n    down: (key: Breakpoint): boolean => {\n      return downMatches.get(key) ?? false;\n    },\n  };\n};\n"],"names":["breakpoint"],"mappings":";;AAkBO,MAAM,WAAiE,GAAA;AAAA,EAC5E,EAAE,IAAM,EAAA,SAAA,EAAW,EAAI,EAAA,SAAA,EAAW,OAAO,CAAE,EAAA;AAAA,EAC3C,EAAE,IAAM,EAAA,aAAA,EAAe,EAAI,EAAA,IAAA,EAAM,OAAO,GAAI,EAAA;AAAA,EAC5C,EAAE,IAAM,EAAA,OAAA,EAAS,EAAI,EAAA,IAAA,EAAM,OAAO,GAAI,EAAA;AAAA,EACtC,EAAE,IAAM,EAAA,QAAA,EAAU,EAAI,EAAA,IAAA,EAAM,OAAO,IAAK,EAAA;AAAA,EACxC,EAAE,IAAM,EAAA,OAAA,EAAS,EAAI,EAAA,IAAA,EAAM,OAAO,IAAK,EAAA;AAAA,EACvC,EAAE,IAAM,EAAA,aAAA,EAAe,EAAI,EAAA,IAAA,EAAM,OAAO,IAAK;AAC/C;AAGO,MAAM,gBAAgB,MAAM;AAEjC,EAAA,MAAM,OAAU,GAAA,WAAA,CAAY,GAAI,CAAA,CAAAA,WAAc,KAAA;AAC5C,IAAA,OAAO,aAAc,CAAA,CAAA,YAAA,EAAeA,WAAW,CAAA,KAAK,CAAK,GAAA,CAAA,CAAA;AAAA,GAC1D,CAAA;AAGD,EAAA,MAAM,YAAY,IAAI,GAAA;AAAA,IACpB,WAAY,CAAA,GAAA,CAAI,CAAM,EAAA,KAAA,CAAC,EAAG,CAAA,EAAA,EAAI,aAAc,CAAA,CAAA,YAAA,EAAe,EAAG,CAAA,KAAK,CAAK,GAAA,CAAA,CAAC,CAAC;AAAA,GAC5E;AAEA,EAAA,MAAM,cAAc,IAAI,GAAA;AAAA,IACtB,WAAA,CAAY,IAAI,CAAM,EAAA,KAAA;AAAA,MACpB,EAAG,CAAA,EAAA;AAAA,MACH,aAAc,CAAA,CAAA,YAAA,EAAe,EAAG,CAAA,KAAA,GAAQ,CAAC,CAAK,GAAA,CAAA;AAAA,KAC/C;AAAA,GACH;AAEA,EAAI,IAAA,UAAA,GAAyB,WAAY,CAAA,CAAC,CAAE,CAAA,EAAA;AAC5C,EAAA,KAAA,IAAS,IAAI,OAAQ,CAAA,MAAA,GAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CAAK,EAAA,EAAA;AAC5C,IAAI,IAAA,OAAA,CAAQ,CAAC,CAAG,EAAA;AACd,MAAa,UAAA,GAAA,WAAA,CAAY,CAAC,CAAE,CAAA,EAAA;AAC5B,MAAA;AAAA;AACF;AAGF,EAAO,OAAA;AAAA,IACL,UAAA;AAAA,IACA,EAAA,EAAI,CAAC,GAA6B,KAAA;AAChC,MAAO,OAAA,SAAA,CAAU,GAAI,CAAA,GAAG,CAAK,IAAA,KAAA;AAAA,KAC/B;AAAA,IACA,IAAA,EAAM,CAAC,GAA6B,KAAA;AAClC,MAAO,OAAA,WAAA,CAAY,GAAI,CAAA,GAAG,CAAK,IAAA,KAAA;AAAA;AACjC,GACF;AACF;;;;"}