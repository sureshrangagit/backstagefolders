import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef, useId, useState, useMemo, useCallback, useRef, useEffect } from 'react';
import clsx from 'clsx';
import { Icon } from '@backstage/canon';

const getListboxItemId = (listboxId, optionValue) => `${listboxId}-option-${optionValue}`;
function ComboboxItem({
  option,
  optionIndex,
  value,
  activeOptionIndex,
  onItemActive,
  onItemSelect,
  listboxId
}) {
  const isSelected = value?.includes(option.value) ?? false;
  const isHighlighted = optionIndex === activeOptionIndex;
  const itemId = getListboxItemId(listboxId, option.value);
  const itemRef = useRef(null);
  useEffect(() => {
    if (isHighlighted && itemRef.current) {
      itemRef.current.scrollIntoView({ block: "nearest" });
    }
  }, [isHighlighted]);
  return /* @__PURE__ */ jsxs(
    "div",
    {
      ref: itemRef,
      className: "canon-SubmenuComboboxItem",
      id: itemId,
      role: "option",
      "aria-selected": isSelected,
      "data-highlighted": isHighlighted ? true : void 0,
      "data-selected": isSelected ? true : void 0,
      "data-disabled": option.disabled ? true : void 0,
      onMouseOver: () => !option.disabled && onItemActive(optionIndex),
      onClick: () => !option.disabled && onItemSelect(option.value),
      children: [
        /* @__PURE__ */ jsx("div", { className: "canon-SubmenuComboboxItemCheckbox", children: isSelected && /* @__PURE__ */ jsx(Icon, { "aria-hidden": "true", name: "check", size: 12 }) }),
        /* @__PURE__ */ jsx("div", { className: "canon-SubmenuComboboxItemLabel", children: option.label })
      ]
    }
  );
}
const Combobox = forwardRef(
  (props, ref) => {
    const {
      options,
      value,
      onValueChange,
      multiselect = false,
      className,
      ...rest
    } = props;
    const triggerId = useId();
    const listboxId = `${triggerId}-listbox`;
    const [filterString, setFilterString] = useState("");
    const [activeOptionIndex, setActiveOptionIndex] = useState(0);
    const filteredOptions = useMemo(() => {
      if (!filterString) return options;
      const lowerFilterString = filterString.toLocaleLowerCase("en-US");
      return options.filter(
        (option) => option.label.toLocaleLowerCase("en-US").includes(lowerFilterString)
      );
    }, [filterString, options]);
    const activeDescendantId = activeOptionIndex >= 0 && filteredOptions.length > 0 ? getListboxItemId(listboxId, filteredOptions[activeOptionIndex].value) : void 0;
    const handleValueChange = useCallback(
      (toggledValue) => {
        let newValue;
        if (multiselect) {
          newValue = value?.includes(toggledValue) ? value.filter((v) => v !== toggledValue) : [...value ?? [], toggledValue];
        } else {
          newValue = value?.includes(toggledValue) ? [] : [toggledValue];
        }
        onValueChange?.(newValue);
      },
      [multiselect, onValueChange, value]
    );
    const handleSearchChange = useCallback(
      (e) => {
        setFilterString(e.target.value);
        setActiveOptionIndex(0);
        e.preventDefault();
      },
      []
    );
    const handleKeyDown = useCallback(
      (e) => {
        let wasEscapeKey = false;
        switch (e.key) {
          case "ArrowDown":
            e.preventDefault();
            setActiveOptionIndex(
              (prev) => Math.min(prev + 1, filteredOptions.length - 1)
            );
            break;
          case "ArrowUp":
            e.preventDefault();
            setActiveOptionIndex((prev) => Math.max(prev - 1, 0));
            break;
          case "Home":
            e.preventDefault();
            setActiveOptionIndex(0);
            break;
          case "End":
            e.preventDefault();
            setActiveOptionIndex(Math.max(filteredOptions.length - 1, 0));
            break;
          case "Enter":
            e.preventDefault();
            if (activeOptionIndex >= 0 && !filteredOptions[activeOptionIndex].disabled) {
              handleValueChange(filteredOptions[activeOptionIndex].value);
            }
            break;
          case "Escape":
            wasEscapeKey = true;
            break;
        }
        if (!wasEscapeKey) {
          e.stopPropagation();
        }
      },
      [filteredOptions, activeOptionIndex, handleValueChange]
    );
    return /* @__PURE__ */ jsxs(
      "div",
      {
        ref,
        role: "combobox",
        className: clsx("canon-MenuCombobox", className),
        ...rest,
        children: [
          /* @__PURE__ */ jsx(
            "input",
            {
              className: "canon-SubmenuComboboxSearch",
              type: "text",
              role: "combobox",
              placeholder: "Filter...",
              "aria-labelledby": triggerId,
              "aria-controls": listboxId,
              "aria-autocomplete": "list",
              "aria-activedescendant": activeDescendantId,
              "aria-expanded": "true",
              "aria-haspopup": "listbox",
              value: filterString,
              onKeyDown: handleKeyDown,
              onChange: handleSearchChange
            }
          ),
          /* @__PURE__ */ jsx(
            "div",
            {
              role: "listbox",
              id: listboxId,
              tabIndex: -1,
              "aria-multiselectable": multiselect ? true : void 0,
              className: "canon-SubmenuComboboxItems",
              children: filteredOptions.length === 0 ? /* @__PURE__ */ jsx("div", { className: "canon-SubmenuComboboxNoResults", children: "No results found" }) : filteredOptions.map((option, index) => /* @__PURE__ */ jsx(
                ComboboxItem,
                {
                  option,
                  optionIndex: index,
                  value,
                  activeOptionIndex,
                  onItemActive: setActiveOptionIndex,
                  onItemSelect: handleValueChange,
                  listboxId
                },
                option.value
              ))
            }
          )
        ]
      }
    );
  }
);
Combobox.displayName = "Combobox";

export { Combobox };
//# sourceMappingURL=Combobox.esm.js.map
