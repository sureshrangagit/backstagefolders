import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef, useId, useRef, useCallback } from 'react';
import { Select as Select$1 } from '@base-ui-components/react/select';
import '@remixicon/react';
import { Icon } from '../Icon/Icon.esm.js';
import '../Icon/context.esm.js';
import clsx from 'clsx';
import './Select.styles.css.esm.js';
import { useResponsiveValue } from '../../hooks/useResponsiveValue.esm.js';

const Select = forwardRef((props, ref) => {
  const {
    className,
    label,
    description,
    options,
    placeholder = "Select an option",
    size = "medium",
    required,
    error,
    style,
    ...rest
  } = props;
  const responsiveSize = useResponsiveValue(size);
  const selectId = useId();
  const descriptionId = useId();
  const errorId = useId();
  const triggerRef = useRef(null);
  const handleLabelClick = useCallback(
    (e) => {
      if (!props.disabled && triggerRef.current) {
        e.preventDefault();
        triggerRef.current.focus();
      }
    },
    [props.disabled]
  );
  return /* @__PURE__ */ jsxs("div", { className: clsx("canon-Select", className), style, ref, children: [
    label && /* @__PURE__ */ jsxs(
      "label",
      {
        className: "canon-SelectLabel",
        htmlFor: selectId,
        onClick: handleLabelClick,
        "data-disabled": props.disabled ? true : void 0,
        children: [
          label,
          required && /* @__PURE__ */ jsx("span", { "aria-hidden": "true", className: "canon-SelectRequired", children: "(Required)" })
        ]
      }
    ),
    /* @__PURE__ */ jsxs(Select$1.Root, { ...rest, children: [
      /* @__PURE__ */ jsxs(
        Select$1.Trigger,
        {
          ref: triggerRef,
          id: selectId,
          className: "canon-SelectTrigger",
          "data-size": responsiveSize,
          "data-invalid": error,
          children: [
            /* @__PURE__ */ jsx(
              Select$1.Value,
              {
                className: "canon-SelectValue",
                placeholder
              }
            ),
            /* @__PURE__ */ jsx(Select$1.Icon, { className: "canon-SelectIcon", children: /* @__PURE__ */ jsx(Icon, { name: "chevron-down" }) })
          ]
        }
      ),
      /* @__PURE__ */ jsxs(Select$1.Portal, { children: [
        /* @__PURE__ */ jsx(Select$1.Backdrop, {}),
        /* @__PURE__ */ jsx(Select$1.Positioner, { children: /* @__PURE__ */ jsx(Select$1.Popup, { className: "canon-SelectPopup", children: options?.map((option) => /* @__PURE__ */ jsxs(
          Select$1.Item,
          {
            value: option.value,
            disabled: option.disabled,
            className: "canon-SelectItem",
            children: [
              /* @__PURE__ */ jsx(Select$1.ItemIndicator, { className: "canon-SelectItemIndicator", children: /* @__PURE__ */ jsx(Icon, { name: "check" }) }),
              /* @__PURE__ */ jsx(Select$1.ItemText, { className: "canon-SelectItemText", children: option.label })
            ]
          },
          option.value
        )) }) })
      ] })
    ] }),
    description && /* @__PURE__ */ jsx("p", { className: "canon-SelectDescription", id: descriptionId, children: description }),
    error && /* @__PURE__ */ jsx("p", { className: "canon-SelectError", id: errorId, role: "alert", children: error })
  ] });
});
Select.displayName = "Select";

export { Select };
//# sourceMappingURL=Select.esm.js.map
