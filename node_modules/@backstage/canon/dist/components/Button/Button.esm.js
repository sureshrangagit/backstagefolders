import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { forwardRef, useRef } from 'react';
import clsx from 'clsx';
import { useResponsiveValue } from '../../hooks/useResponsiveValue.esm.js';
import { useRender } from '@base-ui-components/react/use-render';

const Button = forwardRef(
  (props, ref) => {
    const {
      size = "small",
      variant = "primary",
      iconStart,
      iconEnd,
      children,
      render = /* @__PURE__ */ jsx("button", {}),
      className,
      style,
      ...rest
    } = props;
    const responsiveSize = useResponsiveValue(size);
    const responsiveVariant = useResponsiveValue(variant);
    const internalRef = useRef(null);
    const { renderElement } = useRender({
      render,
      props: {
        className: clsx("canon-Button", className),
        ["data-variant"]: responsiveVariant,
        ["data-size"]: responsiveSize,
        ...rest,
        children: /* @__PURE__ */ jsxs(Fragment, { children: [
          iconStart && /* @__PURE__ */ jsx(
            "span",
            {
              className: "canon-ButtonIcon",
              "aria-hidden": "true",
              "data-size": responsiveSize,
              children: iconStart
            }
          ),
          children,
          iconEnd && /* @__PURE__ */ jsx(
            "span",
            {
              className: "canon-ButtonIcon",
              "aria-hidden": "true",
              "data-size": responsiveSize,
              children: iconEnd
            }
          )
        ] })
      },
      refs: [ref, internalRef]
    });
    return renderElement();
  }
);

export { Button, Button as default };
//# sourceMappingURL=Button.esm.js.map
