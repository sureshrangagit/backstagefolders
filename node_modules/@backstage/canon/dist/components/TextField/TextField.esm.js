import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef, useEffect } from 'react';
import { TextField as TextField$1, Input, FieldError } from 'react-aria-components';
import { useResponsiveValue } from '../../hooks/useResponsiveValue.esm.js';
import clsx from 'clsx';
import { FieldLabel } from '../FieldLabel/FieldLabel.esm.js';

const TextField = forwardRef(
  (props, ref) => {
    const {
      className,
      icon,
      size = "small",
      label,
      secondaryLabel,
      description,
      isRequired,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      ...rest
    } = props;
    useEffect(() => {
      if (!label && !ariaLabel && !ariaLabelledBy) {
        console.warn(
          "TextField requires either a visible label, aria-label, or aria-labelledby for accessibility"
        );
      }
    }, [label, ariaLabel, ariaLabelledBy]);
    const responsiveSize = useResponsiveValue(size);
    const secondaryLabelText = secondaryLabel || (isRequired ? "Required" : null);
    return /* @__PURE__ */ jsxs(
      TextField$1,
      {
        className: clsx("canon-TextField", className),
        "data-size": responsiveSize,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        ...rest,
        ref,
        children: [
          /* @__PURE__ */ jsx(
            FieldLabel,
            {
              label,
              secondaryLabel: secondaryLabelText,
              description
            }
          ),
          /* @__PURE__ */ jsxs("div", { className: "canon-TextFieldInputWrapper", "data-size": responsiveSize, children: [
            icon && /* @__PURE__ */ jsx(
              "div",
              {
                className: "canon-TextFieldIcon",
                "data-size": responsiveSize,
                "aria-hidden": "true",
                children: icon
              }
            ),
            /* @__PURE__ */ jsx(
              Input,
              {
                className: "canon-TextFieldInput",
                ...icon && { "data-icon": true }
              }
            )
          ] }),
          /* @__PURE__ */ jsx(FieldError, { className: "canon-TextFieldError" })
        ]
      }
    );
  }
);
TextField.displayName = "TextField";

export { TextField };
//# sourceMappingURL=TextField.esm.js.map
