import * as react from 'react';
import { ReactNode, ElementType, ComponentPropsWithRef, ReactElement, ComponentProps, ForwardRefExoticComponent, RefAttributes, CSSProperties, ChangeEvent, FocusEvent } from 'react';
import { RemixiconComponentType } from '@remixicon/react';
import { Avatar as Avatar$1 } from '@base-ui-components/react/avatar';
import { useRender } from '@base-ui-components/react/use-render';
import { Collapsible as Collapsible$1 } from '@base-ui-components/react/collapsible';
import { Table as Table$1 } from '@tanstack/react-table';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { Tabs as Tabs$1 } from '@base-ui-components/react/tabs';
import { TextFieldProps as TextFieldProps$1, SwitchProps as SwitchProps$1 } from 'react-aria-components';
import { Tooltip as Tooltip$1 } from '@base-ui-components/react/tooltip';
import { Menu as Menu$1 } from '@base-ui-components/react/menu';
import { ScrollArea as ScrollArea$1 } from '@base-ui-components/react/scroll-area';
import { Breakpoint as Breakpoint$1 } from '@backstage/canon';

/** @public */
type IconNames = 'account-circle' | 'alert' | 'arrow-down' | 'arrow-down-circle' | 'caret-down' | 'caret-left' | 'caret-right' | 'caret-up' | 'arrow-left' | 'arrow-left-circle' | 'arrow-left-down' | 'arrow-left-up' | 'arrow-right' | 'arrow-right-circle' | 'arrow-right-down' | 'arrow-right-up' | 'arrow-up' | 'arrow-up-circle' | 'braces' | 'brackets' | 'bug' | 'check' | 'check-double' | 'chevron-down' | 'chevron-left' | 'chevron-right' | 'chevron-up' | 'close' | 'cloud' | 'code' | 'discord' | 'download' | 'external-link' | 'eye' | 'eye-off' | 'filter' | 'flower' | 'github' | 'git-repository' | 'group' | 'heart' | 'moon' | 'plus' | 'search' | 'sidebar-fold' | 'sidebar-unfold' | 'sparkling' | 'star' | 'sun' | 'terminal' | 'trash' | 'upload' | 'user' | 'youtube' | 'zoom-in' | 'zoom-out';
/** @public */
type IconMap = Partial<Record<IconNames, RemixiconComponentType>>;
/** @public */
type IconProps = {
    name: IconNames;
    size?: number;
    className?: string;
    style?: React.CSSProperties;
};
/** @public */
interface IconContextProps {
    icons: IconMap;
}
/** @public */
interface IconProviderProps {
    children?: ReactNode;
    overrides?: Partial<Record<IconNames, RemixiconComponentType>>;
}

/** @public */
declare const IconContext: react.Context<IconContextProps>;
/** @public */
declare const useIcons: () => IconContextProps;

/** @public */
type AsProps = 'div' | 'span' | 'p' | 'article' | 'section' | 'main' | 'nav' | 'aside' | 'ul' | 'ol' | 'li' | 'details' | 'summary' | 'dd' | 'dl' | 'dt';
/** @public */
type Breakpoint = 'initial' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
/** @public */
type Responsive<T> = T | Partial<Record<Breakpoint, T>>;
/** @public */
type Space = '0.5' | '1' | '1.5' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | string;
/** @public */
type Display = 'none' | 'flex' | 'block' | 'inline';
/** @public */
type FlexDirection = 'row' | 'column';
/** @public */
type FlexWrap = 'wrap' | 'nowrap' | 'wrap-reverse';
/** @public */
type JustifyContent = 'stretch' | 'start' | 'center' | 'end' | 'around' | 'between';
/** @public */
type AlignItems = 'stretch' | 'start' | 'center' | 'end';
/** @public */
type BorderRadius = 'none' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
/** @public */
type Border = 'none' | 'base' | 'error' | 'warning' | 'selected';
/** @public */
type Columns = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 'auto';
/** @public */
interface SpaceProps {
    m?: Responsive<Space>;
    mb?: Responsive<Space>;
    ml?: Responsive<Space>;
    mr?: Responsive<Space>;
    mt?: Responsive<Space>;
    mx?: Responsive<Space>;
    my?: Responsive<Space>;
    p?: Responsive<Space>;
    pb?: Responsive<Space>;
    pl?: Responsive<Space>;
    pr?: Responsive<Space>;
    pt?: Responsive<Space>;
    px?: Responsive<Space>;
    py?: Responsive<Space>;
}
/** @public */
interface UtilityProps extends SpaceProps {
    alignItems?: Responsive<AlignItems>;
    border?: Responsive<Border>;
    borderRadius?: Responsive<BorderRadius>;
    colEnd?: Responsive<Columns | 'auto'>;
    colSpan?: Responsive<Columns | 'full'>;
    colStart?: Responsive<Columns | 'auto'>;
    columns?: Responsive<Columns>;
    display?: Responsive<Display>;
    flexDirection?: Responsive<FlexDirection>;
    flexWrap?: Responsive<FlexWrap>;
    gap?: Responsive<Space>;
    justifyContent?: Responsive<JustifyContent>;
    rowSpan?: Responsive<Columns | 'full'>;
}

/** @public */
declare const breakpoints: Breakpoint[];
/** @public */
type BooleanPropDef = {
    type: 'boolean';
    default?: boolean;
    required?: boolean;
    className?: string;
};
/** @public */
type StringPropDef = {
    type: 'string';
    default?: string;
    required?: boolean;
};
/** @public */
type ReactNodePropDef = {
    type: 'ReactNode';
    default?: ReactNode;
    required?: boolean;
};
/** @public */
type EnumPropDef<T> = {
    type: 'enum';
    values: readonly T[];
    default?: T;
    required?: boolean;
};
/** @public */
type EnumOrStringPropDef<T> = {
    type: 'enum | string';
    values: readonly T[];
    default?: T | string;
    required?: boolean;
};
/** @public */
type NonStylingPropDef = {
    className?: never;
    customProperties?: never;
    parseValue?: never;
};
/** @public */
type StylingPropDef = {
    className: string;
    parseValue?: (value: string) => string | undefined;
};
/** @public */
type ArbitraryStylingPropDef = {
    className: string;
    customProperties: `--${string}`[];
    parseValue?: (value: string) => string | undefined;
};
/** @public */
type RegularPropDef<T> = ReactNodePropDef | BooleanPropDef | (StringPropDef & ArbitraryStylingPropDef) | (StringPropDef & NonStylingPropDef) | (EnumPropDef<T> & StylingPropDef) | (EnumPropDef<T> & NonStylingPropDef) | (EnumOrStringPropDef<T> & ArbitraryStylingPropDef) | (EnumOrStringPropDef<T> & NonStylingPropDef);
/** @public */
type ResponsivePropDef<T = any> = RegularPropDef<T> & {
    responsive: true;
};
/** @public */
type PropDef<T = any> = RegularPropDef<T> | ResponsivePropDef<T>;
/** @public */
type GetPropDefType<Def> = Def extends BooleanPropDef ? Def extends ResponsivePropDef ? Responsive<boolean> : boolean : Def extends StringPropDef ? Def extends ResponsivePropDef ? Responsive<string> : string : Def extends ReactNodePropDef ? Def extends ResponsivePropDef ? Responsive<ReactNode> : ReactNode : Def extends EnumOrStringPropDef<infer Type> ? Def extends ResponsivePropDef<infer Type extends string> ? Responsive<string | Type> : string | Type : Def extends EnumPropDef<infer Type> ? Def extends ResponsivePropDef<infer Type> ? Responsive<Type> : Type : never;
/** @public */
type GetPropDefTypes<P> = {
    [K in keyof P]?: GetPropDefType<P[K]>;
};

/** @public */
declare const heightPropDefs: {
    height: {
        type: "string";
        className: string;
        customProperties: "--height"[];
        responsive: true;
    };
    minHeight: {
        type: "string";
        className: string;
        customProperties: "--min-height"[];
        responsive: true;
    };
    maxHeight: {
        type: "string";
        className: string;
        customProperties: "--max-height"[];
        responsive: true;
    };
};
/** @public */
type HeightProps = GetPropDefTypes<typeof heightPropDefs>;

/** @public */
declare const widthPropDefs: {
    width: {
        type: "string";
        className: string;
        customProperties: "--width"[];
        responsive: true;
    };
    minWidth: {
        type: "string";
        className: string;
        customProperties: "--min-width"[];
        responsive: true;
    };
    maxWidth: {
        type: "string";
        className: string;
        customProperties: "--max-width"[];
        responsive: true;
    };
};
/** @public */
type WidthProps = GetPropDefTypes<typeof widthPropDefs>;

/** @public */
declare const positionPropDefs: {
    position: {
        type: "enum";
        className: string;
        values: readonly ["static", "relative", "absolute", "fixed", "sticky"];
        responsive: true;
    };
};
/** @public */
type PositionProps = GetPropDefTypes<typeof positionPropDefs>;

/** @public */
declare const displayPropDefs: {
    display: {
        type: "enum";
        className: string;
        values: readonly ["none", "inline", "inline-block", "block"];
        responsive: true;
    };
};
/** @public */
type DisplayProps = GetPropDefTypes<typeof displayPropDefs>;

/** @public */
declare const boxPropDefs: {
    as: {
        type: "enum";
        values: readonly ["div", "span"];
        default: "div";
    };
};
/** @public */
type BoxOwnProps = GetPropDefTypes<typeof boxPropDefs>;

/** @public */
interface BoxProps extends SpaceProps {
    display?: DisplayProps['display'];
    as?: BoxOwnProps['as'];
    width?: WidthProps['width'];
    minWidth?: WidthProps['minWidth'];
    maxWidth?: WidthProps['maxWidth'];
    height?: HeightProps['height'];
    minHeight?: HeightProps['minHeight'];
    maxHeight?: HeightProps['maxHeight'];
    position?: PositionProps['position'];
    children?: React.ReactNode;
    className?: string;
    style?: React.CSSProperties;
}

/** @public */
declare const Box: react.ForwardRefExoticComponent<BoxProps & react.RefAttributes<HTMLDivElement>>;

/** @public */
declare const gapPropDefs: {
    gap: {
        type: "enum | string";
        className: string;
        customProperties: "--gap"[];
        values: string[];
        responsive: true;
        default: string;
    };
};
/** @public */
type GapProps = GetPropDefTypes<typeof gapPropDefs>;

/** @public */
declare const gridPropDefs: {
    columns: {
        type: "enum | string";
        className: string;
        customProperties: "--columns"[];
        values: readonly ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "auto"];
        responsive: true;
        default: string;
    };
};
/** @public */
declare const gridItemPropDefs: {
    colSpan: {
        type: "enum | string";
        className: string;
        customProperties: "--col-span"[];
        values: readonly ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "auto"];
        responsive: true;
    };
    colEnd: {
        type: "enum | string";
        className: string;
        customProperties: "--col-end"[];
        values: readonly ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "auto"];
        responsive: true;
    };
    colStart: {
        type: "enum | string";
        className: string;
        customProperties: "--col-start"[];
        values: readonly ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "auto"];
        responsive: true;
    };
    rowSpan: {
        type: "enum | string";
        className: string;
        customProperties: "--row-span"[];
        values: readonly ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "auto"];
        responsive: true;
    };
};
/** @public */
type GridOwnProps = GetPropDefTypes<typeof gridPropDefs>;
/** @public */
type GridItemOwnProps = GetPropDefTypes<typeof gridItemPropDefs>;

/** @public */
interface GridProps extends SpaceProps {
    children?: React.ReactNode;
    className?: string;
    columns?: GridOwnProps['columns'];
    gap?: GapProps['gap'];
    style?: React.CSSProperties;
}
/** @public */
interface GridItemProps {
    children?: React.ReactNode;
    className?: string;
    colSpan?: GridItemOwnProps['colSpan'];
    colEnd?: GridItemOwnProps['colEnd'];
    colStart?: GridItemOwnProps['colStart'];
    rowSpan?: GridItemOwnProps['rowSpan'];
    style?: React.CSSProperties;
}

/** @public */
declare const Grid: {
    Root: react.ForwardRefExoticComponent<GridProps & react.RefAttributes<HTMLDivElement>>;
    Item: react.ForwardRefExoticComponent<GridItemProps & react.RefAttributes<HTMLDivElement>>;
};

/** @public */
declare const flexPropDefs: {
    align: {
        type: "enum";
        className: string;
        values: readonly ["start", "center", "end", "baseline", "stretch"];
        responsive: true;
    };
    direction: {
        type: "enum";
        className: string;
        values: readonly ["row", "column", "row-reverse", "column-reverse"];
        responsive: true;
    };
    justify: {
        type: "enum";
        className: string;
        values: readonly ["start", "center", "end", "between"];
        responsive: true;
    };
};
/** @public */
type FlexOwnProps = GetPropDefTypes<typeof flexPropDefs>;

/** @public */
interface FlexProps extends SpaceProps {
    children: React.ReactNode;
    gap?: GapProps['gap'];
    align?: FlexOwnProps['align'];
    justify?: FlexOwnProps['justify'];
    direction?: FlexOwnProps['direction'];
    className?: string;
    style?: React.CSSProperties;
}

/** @public */
declare const Flex: react.ForwardRefExoticComponent<FlexProps & react.RefAttributes<HTMLDivElement>>;

/** @public */
interface ContainerProps {
    children?: React.ReactNode;
    className?: string;
    my?: SpaceProps['my'];
    mb?: SpaceProps['mb'];
    mt?: SpaceProps['mt'];
    py?: SpaceProps['py'];
    pb?: SpaceProps['pb'];
    pt?: SpaceProps['pt'];
    style?: React.CSSProperties;
}

/** @public */
declare const Container: react.ForwardRefExoticComponent<ContainerProps & react.RefAttributes<HTMLDivElement>>;

/** @public */
type TextOwnProps = {
    as?: 'p' | 'span' | 'label';
    variant?: 'subtitle' | 'body' | 'caption' | 'label' | Partial<Record<Breakpoint, 'subtitle' | 'body' | 'caption' | 'label'>>;
    weight?: 'regular' | 'bold' | Partial<Record<Breakpoint, 'regular' | 'bold'>>;
    color?: 'primary' | 'secondary' | 'danger' | 'warning' | 'success' | Partial<Record<Breakpoint, 'primary' | 'secondary' | 'danger' | 'warning' | 'success'>>;
    truncate?: boolean;
    className?: string;
    style?: React.CSSProperties;
};
/** @public */
type TextProps<T extends ElementType = 'p'> = TextOwnProps & Omit<ComponentPropsWithRef<T>, keyof TextOwnProps>;

/** @public */
declare const Text: <T extends ElementType = "p">(props: TextProps<T> & {
    ref?: React.Ref<any>;
}) => React.ReactElement | null;

/** @public */
type HeadingOwnProps = {
    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    variant?: 'display' | 'title1' | 'title2' | 'title3' | 'title4' | 'title5' | Partial<Record<Breakpoint, 'display' | 'title1' | 'title2' | 'title3' | 'title4' | 'title5'>>;
    color?: 'primary' | 'secondary' | Partial<Record<Breakpoint, 'primary' | 'secondary'>>;
    truncate?: boolean;
    className?: string;
    style?: React.CSSProperties;
};
/** @public */
type HeadingProps<T extends ElementType = 'h1'> = HeadingOwnProps & Omit<ComponentPropsWithRef<T>, keyof HeadingOwnProps>;

/** @public */
declare const Heading: <T extends ElementType = "h1">(props: HeadingProps<T> & {
    ref?: React.Ref<any>;
}) => React.ReactElement | null;

/** @public */
interface AvatarProps extends React.ComponentPropsWithoutRef<typeof Avatar$1.Root> {
    src: string;
    name: string;
    size?: 'small' | 'medium' | 'large';
}

/** @public */
declare const Avatar: react.ForwardRefExoticComponent<AvatarProps & react.RefAttributes<HTMLSpanElement>>;

/** @public */
declare const buttonPropDefs: {
    variant: {
        type: "enum";
        values: ("primary" | "secondary")[];
        className: string;
        default: "primary";
        responsive: true;
    };
    size: {
        type: "enum";
        values: ("small" | "medium")[];
        className: string;
        default: "medium";
        responsive: true;
    };
};
/** @public */
type ButtonOwnProps = GetPropDefTypes<typeof buttonPropDefs>;

/**
 * Properties for {@link Button}
 *
 * @public
 */
interface ButtonProps extends useRender.ComponentProps<'button'> {
    /**
     * The size of the button
     * @defaultValue 'medium'
     */
    size?: ButtonOwnProps['size'];
    /**
     * The visual variant of the button
     * @defaultValue 'primary'
     */
    variant?: ButtonOwnProps['variant'];
    /**
     * Optional icon to display at the start of the button
     */
    iconStart?: ReactElement;
    /**
     * Optional icon to display at the end of the button
     */
    iconEnd?: ReactElement;
}

/** @public */
declare const Button: react.ForwardRefExoticComponent<Omit<ButtonProps, "ref"> & react.RefAttributes<HTMLButtonElement>>;

/**
 * Collapsible is a component that allows you to collapse and expand content.
 * It is a wrapper around the CollapsiblePrimitive component from base-ui-components.
 *
 * @public
 */
declare const Collapsible: {
    Root: react.ForwardRefExoticComponent<Omit<Collapsible$1.Root.Props & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
    Trigger: react.ForwardRefExoticComponent<Omit<Collapsible$1.Trigger.Props & react.RefAttributes<HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
    Panel: react.ForwardRefExoticComponent<Omit<Collapsible$1.Panel.Props & react.RefAttributes<HTMLButtonElement>, "ref"> & react.RefAttributes<HTMLButtonElement>>;
};

/**
 * Table component for displaying tabular data
 * @public
 */
declare const Table: {
    Root: react.ForwardRefExoticComponent<react.HTMLAttributes<HTMLTableElement> & react.RefAttributes<HTMLTableElement>>;
    Header: react.ForwardRefExoticComponent<react.HTMLAttributes<HTMLTableSectionElement> & react.RefAttributes<HTMLTableSectionElement>>;
    Body: react.ForwardRefExoticComponent<react.HTMLAttributes<HTMLTableSectionElement> & react.RefAttributes<HTMLTableSectionElement>>;
    Head: react.ForwardRefExoticComponent<react.ThHTMLAttributes<HTMLTableCellElement> & react.RefAttributes<HTMLTableCellElement>>;
    Row: react.ForwardRefExoticComponent<react.HTMLAttributes<HTMLTableRowElement> & react.RefAttributes<HTMLTableRowElement>>;
    Cell: react.ForwardRefExoticComponent<react.TdHTMLAttributes<HTMLTableCellElement> & react.RefAttributes<HTMLTableCellElement>>;
    CellText: react.ForwardRefExoticComponent<TableCellTextProps & react.RefAttributes<HTMLDivElement>>;
    CellLink: react.ForwardRefExoticComponent<TableCellLinkProps & react.RefAttributes<HTMLDivElement>>;
    CellProfile: react.ForwardRefExoticComponent<TableCellProfileProps & react.RefAttributes<HTMLDivElement>>;
    Caption: react.ForwardRefExoticComponent<react.HTMLAttributes<HTMLTableCaptionElement> & react.RefAttributes<HTMLTableCaptionElement>>;
};

/** @public */
interface TableCellTextProps extends React.HTMLAttributes<HTMLDivElement> {
    title: string;
    description?: string;
}

/** @public */
interface TableCellLinkProps extends React.HTMLAttributes<HTMLDivElement> {
    title: string;
    description?: string;
    href: string;
    render?: useRender.ComponentProps<'a'>['render'];
}

/** @public */
interface TableCellProfileProps extends React.HTMLAttributes<HTMLDivElement> {
    src?: string;
    name?: string;
    to?: string;
    withImage?: boolean;
}

/**
 * DataTable component for displaying tabular data with pagination
 * @public
 */
declare const DataTable: {
    Root: <TData>(props: {
        table: Table$1<TData>;
    } & React.HTMLAttributes<HTMLDivElement>) => JSX.Element;
    Pagination: react.ForwardRefExoticComponent<DataTablePaginationProps & react.RefAttributes<HTMLDivElement>>;
    Table: react.ForwardRefExoticComponent<DataTableTableProps & react.RefAttributes<HTMLTableElement>>;
    TableRoot: react.ForwardRefExoticComponent<Omit<react.HTMLAttributes<HTMLTableElement> & react.RefAttributes<HTMLTableElement>, "ref"> & react.RefAttributes<HTMLTableElement>>;
    TableHeader: react.ForwardRefExoticComponent<react.HTMLAttributes<HTMLTableSectionElement> & react.RefAttributes<HTMLTableSectionElement>>;
    TableBody: react.ForwardRefExoticComponent<react.HTMLAttributes<HTMLTableSectionElement> & react.RefAttributes<HTMLTableSectionElement>>;
    TableRow: react.ForwardRefExoticComponent<react.HTMLAttributes<HTMLTableRowElement> & react.RefAttributes<HTMLTableRowElement>>;
    TableCell: react.ForwardRefExoticComponent<react.TdHTMLAttributes<HTMLTableCellElement> & react.RefAttributes<HTMLTableCellElement>>;
    TableCellText: react.ForwardRefExoticComponent<TableCellTextProps & react.RefAttributes<HTMLDivElement>>;
    TableCellLink: react.ForwardRefExoticComponent<TableCellLinkProps & react.RefAttributes<HTMLDivElement>>;
    TableCellProfile: react.ForwardRefExoticComponent<TableCellProfileProps & react.RefAttributes<HTMLDivElement>>;
    TableHead: react.ForwardRefExoticComponent<react.ThHTMLAttributes<HTMLTableCellElement> & react.RefAttributes<HTMLTableCellElement>>;
};

/** @public */
interface DataTableRootProps<TData> extends React.HTMLAttributes<HTMLDivElement> {
    /**
     * The table instance.
     */
    table: Table$1<TData>;
}

/** @public */
interface DataTablePaginationProps extends React.HTMLAttributes<HTMLDivElement> {
}

/** @public */
interface DataTableTableProps extends React.HTMLAttributes<HTMLTableElement> {
}

/** @public */
interface FieldLabelProps {
    /**
     * The label of the text field
     */
    label?: string | null;
    /**
     * The secondary label of the text field
     */
    secondaryLabel?: string | null;
    /**
     * The description of the text field
     */
    description?: string | null;
    /**
     * The HTML for attribute of the text field
     */
    htmlFor?: string;
    /**
     * The id of the text field
     */
    id?: string;
}

/** @public */
declare const FieldLabel: react.ForwardRefExoticComponent<FieldLabelProps & react.RefAttributes<HTMLDivElement>>;

/** @public */
declare const icons: IconMap;

/** @public */
declare const Icon: (props: IconProps) => react_jsx_runtime.JSX.Element | null;

/** @public */
declare const IconProvider: (props: IconProviderProps) => react_jsx_runtime.JSX.Element;

/** @public */
declare const iconButtonPropDefs: {
    variant: {
        type: "enum";
        values: ("primary" | "secondary")[];
        className: string;
        default: "primary";
        responsive: true;
    };
    size: {
        type: "enum";
        values: ("small" | "medium")[];
        className: string;
        default: "medium";
        responsive: true;
    };
};
/** @public */
type IconButtonOwnProps = GetPropDefTypes<typeof iconButtonPropDefs>;

/**
 * Properties for {@link IconButton}
 *
 * @public
 */
interface IconButtonProps extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'children'> {
    /**
     * The size of the button
     * @defaultValue 'medium'
     */
    size?: IconButtonOwnProps['size'];
    /**
     * The visual variant of the button
     * @defaultValue 'primary'
     */
    variant?: IconButtonOwnProps['variant'];
    /**
     * Icon to display in the button
     */
    icon: ReactElement;
}

/** @public */
declare const IconButton: react.ForwardRefExoticComponent<IconButtonProps & react.RefAttributes<HTMLButtonElement>>;

/** @public */
interface CheckboxProps {
    label?: string;
    defaultChecked?: boolean;
    checked?: boolean;
    onChange?: (checked: boolean) => void;
    disabled?: boolean;
    required?: boolean;
    className?: string;
    name?: string;
    value?: string;
    style?: React.CSSProperties;
}

/** @public */
declare const Checkbox: react.ForwardRefExoticComponent<CheckboxProps & react.RefAttributes<HTMLButtonElement>>;

/** @public */
interface TabsRootWithoutOrientation extends Omit<React.ComponentPropsWithoutRef<typeof Tabs$1.Root>, 'orientation'> {
}

/** @public */
declare const Tabs: {
    Root: react.ForwardRefExoticComponent<TabsRootWithoutOrientation & react.RefAttributes<HTMLDivElement>>;
    List: react.ForwardRefExoticComponent<Omit<Tabs$1.List.Props & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
    Tab: react.ForwardRefExoticComponent<Omit<Tabs$1.Tab.Props & react.RefAttributes<Element>, "ref"> & react.RefAttributes<Element>>;
    Panel: react.ForwardRefExoticComponent<Omit<Tabs$1.Panel.Props & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
};

/** @public */
interface TextFieldProps extends TextFieldProps$1, Omit<FieldLabelProps, 'htmlFor' | 'id'> {
    /**
     * An icon to render before the input
     */
    icon?: ReactNode;
    /**
     * The size of the text field
     * @defaultValue 'medium'
     */
    size?: 'small' | 'medium' | Partial<Record<Breakpoint, 'small' | 'medium'>>;
}

/** @public */
declare const TextField: react.ForwardRefExoticComponent<TextFieldProps & react.RefAttributes<HTMLDivElement>>;

/** @public */
declare const Tooltip: {
    Provider: react.FC<Tooltip$1.Provider.Props>;
    Root: react.FC<Tooltip$1.Root.Props>;
    Trigger: react.ForwardRefExoticComponent<Omit<Tooltip$1.Trigger.Props & react.RefAttributes<any>, "ref"> & react.RefAttributes<any>>;
    Portal: typeof Tooltip$1.Portal;
    Positioner: react.ForwardRefExoticComponent<Omit<Tooltip$1.Positioner.Props & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
    Popup: react.ForwardRefExoticComponent<Omit<Tooltip$1.Popup.Props & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
    Arrow: react.ForwardRefExoticComponent<Omit<Tooltip$1.Arrow.Props & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
};

/** @public */
type MenuComboboxOption = {
    label: string;
    value: string;
    disabled?: boolean;
};
/** @public */
interface MenuComboboxProps extends ComponentProps<'div'> {
    options: MenuComboboxOption[];
    value?: string[];
    onValueChange?: (value: string[]) => void;
    multiselect?: boolean;
    closeParentOnEsc?: boolean;
}
/** @public */
type MenuComponent = {
    Root: typeof Menu$1.Root;
    Trigger: typeof Menu$1.Trigger;
    Portal: typeof Menu$1.Portal;
    Backdrop: typeof Menu$1.Backdrop;
    Positioner: typeof Menu$1.Positioner;
    Popup: typeof Menu$1.Popup;
    Arrow: typeof Menu$1.Arrow;
    Item: typeof Menu$1.Item;
    Group: typeof Menu$1.Group;
    GroupLabel: typeof Menu$1.GroupLabel;
    RadioGroup: typeof Menu$1.RadioGroup;
    RadioItem: typeof Menu$1.RadioItem;
    RadioItemIndicator: typeof Menu$1.RadioItemIndicator;
    CheckboxItem: typeof Menu$1.CheckboxItem;
    CheckboxItemIndicator: typeof Menu$1.CheckboxItemIndicator;
    SubmenuTrigger: typeof Menu$1.SubmenuTrigger;
    Separator: typeof Menu$1.Separator;
    Combobox: ForwardRefExoticComponent<MenuComboboxProps & RefAttributes<HTMLDivElement>>;
};

/** @public */
declare const Menu: MenuComponent;

/** @public */
declare const ScrollArea: {
    Root: react.ForwardRefExoticComponent<Omit<ScrollArea$1.Root.Props & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
    Viewport: react.ForwardRefExoticComponent<Omit<ScrollArea$1.Viewport.Props & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
    Scrollbar: react.ForwardRefExoticComponent<Omit<ScrollArea$1.Scrollbar.Props & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
    Thumb: react.ForwardRefExoticComponent<Omit<ScrollArea$1.Thumb.Props & react.RefAttributes<HTMLDivElement>, "ref"> & react.RefAttributes<HTMLDivElement>>;
};

/** @public */
interface LinkProps extends useRender.ComponentProps<'a'> {
    children: ReactNode;
    to?: string;
    variant?: 'subtitle' | 'body' | 'caption' | 'label' | Partial<Record<Breakpoint, 'subtitle' | 'body' | 'caption' | 'label'>>;
    weight?: 'regular' | 'bold' | Partial<Record<Breakpoint, 'regular' | 'bold'>>;
    className?: string;
    style?: CSSProperties;
}

/** @public */
declare const Link: react.ForwardRefExoticComponent<Omit<LinkProps, "ref"> & react.RefAttributes<HTMLElement>>;

/** @public */
interface SelectProps {
    /**
     * The class name of the select field
     */
    className?: string;
    /**
     * The size of the select field
     * @defaultValue 'medium'
     */
    size?: 'small' | 'medium' | Partial<Record<Breakpoint$1, 'small' | 'medium'>>;
    /**
     * The label of the select field
     */
    label?: string;
    /**
     * The description of the select field
     */
    description?: string;
    /**
     * The name of the select field
     */
    name: string;
    /**
     * Whether the select field should ignore user input
     * @defaultValue false
     */
    disabled?: boolean;
    /**
     * Whether the select field is required
     * @defaultValue false
     */
    required?: boolean;
    /**
     * The options of the select field
     */
    options?: Array<{
        value: string;
        label: string;
        disabled?: boolean;
    }>;
    /**
     * The current value of the select field
     */
    value?: string;
    /**
     * The default value of the select field, if nothing has been selected yet
     */
    defaultValue?: string;
    /**
     * A placeholder text to show if nothing has been selected and there's no default value
     * @defaultValue 'Select an option'
     */
    placeholder?: string;
    /**
     * Callback that is called when the value of the select field changes
     */
    onValueChange?: (value: string) => void;
    /**
     * Callback that is called when the select field is opened or closed
     */
    onOpenChange?: (open: boolean) => void;
    /**
     * The style of the select field
     */
    style?: React.CSSProperties;
    /**
     * The error message of the select field
     */
    error?: string;
    /**
     * onChange handler for form integration
     */
    onChange?: (event: ChangeEvent<HTMLSelectElement>) => void;
    /**
     * onBlur handler for form integration
     */
    onBlur?: (event: FocusEvent<HTMLSelectElement>) => void;
}

/** @public */
declare const Select: react.ForwardRefExoticComponent<SelectProps & react.RefAttributes<HTMLDivElement>>;

/** @public */
interface SwitchProps extends SwitchProps$1 {
    /**
     * The label of the switch
     */
    label?: string;
}

/** @public */
declare const Switch: react.ForwardRefExoticComponent<SwitchProps & react.RefAttributes<HTMLLabelElement>>;

/** @public */
declare const marginPropDefs: (spacingValues: string[]) => {
    m: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--m"[];
        responsive: true;
    };
    mx: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--mx"[];
        responsive: true;
    };
    my: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--my"[];
        responsive: true;
    };
    mt: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--mt"[];
        responsive: true;
    };
    mr: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--mr"[];
        responsive: true;
    };
    mb: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--mb"[];
        responsive: true;
    };
    ml: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--ml"[];
        responsive: true;
    };
};
/** @public */
type MarginProps = GetPropDefTypes<typeof marginPropDefs>;

/** @public */
declare const paddingPropDefs: (spacingValues: string[]) => {
    p: {
        type: "enum | string";
        className: string;
        customProperties: "--p"[];
        values: string[];
        responsive: true;
    };
    px: {
        type: "enum | string";
        className: string;
        customProperties: "--px"[];
        values: string[];
        responsive: true;
    };
    py: {
        type: "enum | string";
        className: string;
        customProperties: "--py"[];
        values: string[];
        responsive: true;
    };
    pt: {
        type: "enum | string";
        className: string;
        customProperties: "--pt"[];
        values: string[];
        responsive: true;
    };
    pr: {
        type: "enum | string";
        className: string;
        customProperties: "--pr"[];
        values: string[];
        responsive: true;
    };
    pb: {
        type: "enum | string";
        className: string;
        customProperties: "--pb"[];
        values: string[];
        responsive: true;
    };
    pl: {
        type: "enum | string";
        className: string;
        customProperties: "--pl"[];
        values: string[];
        responsive: true;
    };
};
/** @public */
type PaddingProps = GetPropDefTypes<typeof paddingPropDefs>;

/** @public */
declare const useBreakpoint: () => {
    breakpoint: Breakpoint;
    up: (key: Breakpoint) => boolean;
    down: (key: Breakpoint) => boolean;
};

export { type AlignItems, type ArbitraryStylingPropDef, type AsProps, Avatar, type AvatarProps, type BooleanPropDef, type Border, type BorderRadius, Box, type BoxOwnProps, type BoxProps, type Breakpoint, Button, type ButtonOwnProps, type ButtonProps, Checkbox, type CheckboxProps, Collapsible, type Columns, Container, type ContainerProps, DataTable, type DataTablePaginationProps, type DataTableRootProps, type DataTableTableProps, type Display, type DisplayProps, type EnumOrStringPropDef, type EnumPropDef, FieldLabel, type FieldLabelProps, Flex, type FlexDirection, type FlexOwnProps, type FlexProps, type FlexWrap, type GapProps, type GetPropDefType, type GetPropDefTypes, Grid, type GridItemOwnProps, type GridItemProps, type GridOwnProps, type GridProps, Heading, type HeadingOwnProps, type HeadingProps, type HeightProps, Icon, IconButton, type IconButtonOwnProps, type IconButtonProps, IconContext, type IconContextProps, type IconMap, type IconNames, type IconProps, IconProvider, type IconProviderProps, type JustifyContent, Link, type LinkProps, type MarginProps, Menu, type MenuComboboxOption, type MenuComboboxProps, type MenuComponent, type NonStylingPropDef, type PaddingProps, type PositionProps, type PropDef, type ReactNodePropDef, type RegularPropDef, type Responsive, type ResponsivePropDef, ScrollArea, Select, type SelectProps, type Space, type SpaceProps, type StringPropDef, type StylingPropDef, Switch, type SwitchProps, Table, type TableCellLinkProps, type TableCellProfileProps, type TableCellTextProps, Tabs, type TabsRootWithoutOrientation, Text, TextField, type TextFieldProps, type TextOwnProps, type TextProps, Tooltip, type UtilityProps, type WidthProps, boxPropDefs, breakpoints, buttonPropDefs, displayPropDefs, flexPropDefs, gapPropDefs, gridItemPropDefs, gridPropDefs, heightPropDefs, iconButtonPropDefs, icons, marginPropDefs, paddingPropDefs, positionPropDefs, useBreakpoint, useIcons, widthPropDefs };
