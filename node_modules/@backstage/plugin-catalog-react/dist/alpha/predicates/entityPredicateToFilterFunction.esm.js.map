{"version":3,"file":"entityPredicateToFilterFunction.esm.js","sources":["../../../src/alpha/predicates/entityPredicateToFilterFunction.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonValue } from '@backstage/types';\nimport {\n  EntityPredicate,\n  EntityPredicatePrimitive,\n  EntityPredicateValue,\n} from './types';\nimport { valueAtPath } from './valueAtPath';\n\n/**\n * Convert an entity predicate to a filter function that can be used to filter entities.\n * @alpha\n */\nexport function entityPredicateToFilterFunction<T extends JsonValue>(\n  entityPredicate: EntityPredicate,\n): (value: T) => boolean {\n  return value => evaluateEntityPredicate(entityPredicate, value);\n}\n\n/**\n * Evaluate a entity predicate against a value, typically an entity.\n *\n * @internal\n */\nfunction evaluateEntityPredicate(\n  filter: EntityPredicate,\n  value: JsonValue,\n): boolean {\n  if (typeof filter !== 'object' || filter === null || Array.isArray(filter)) {\n    return valuesAreEqual(value, filter);\n  }\n\n  if ('$all' in filter) {\n    return filter.$all.every(f => evaluateEntityPredicate(f, value));\n  }\n  if ('$any' in filter) {\n    return filter.$any.some(f => evaluateEntityPredicate(f, value));\n  }\n  if ('$not' in filter) {\n    return !evaluateEntityPredicate(filter.$not, value);\n  }\n\n  for (const filterKey in filter) {\n    if (!Object.hasOwn(filter, filterKey)) {\n      continue;\n    }\n    if (filterKey.startsWith('$')) {\n      return false;\n    }\n    if (\n      !evaluatePredicateValue(filter[filterKey], valueAtPath(value, filterKey))\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Evaluate a single value against a predicate value.\n *\n * @internal\n */\nfunction evaluatePredicateValue(\n  filter: EntityPredicateValue,\n  value: JsonValue | undefined,\n): boolean {\n  if (typeof filter !== 'object' || filter === null || Array.isArray(filter)) {\n    return valuesAreEqual(value, filter);\n  }\n\n  if ('$contains' in filter) {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n    return value.some(v => evaluateEntityPredicate(filter.$contains, v));\n  }\n  if ('$in' in filter) {\n    return filter.$in.includes(value as EntityPredicatePrimitive);\n  }\n  if ('$exists' in filter) {\n    if (filter.$exists === true) {\n      return value !== undefined;\n    }\n    return value === undefined;\n  }\n\n  return false;\n}\n\nfunction valuesAreEqual(\n  a: JsonValue | undefined,\n  b: JsonValue | undefined,\n): boolean {\n  if (a === null || b === null) {\n    return false;\n  }\n  if (a === b) {\n    return true;\n  }\n  if (typeof a === 'string' && typeof b === 'string') {\n    return a.toLocaleUpperCase('en-US') === b.toLocaleUpperCase('en-US');\n  }\n  if (typeof a === 'number' || typeof b === 'number') {\n    return String(a) === String(b);\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every((v, i) => valuesAreEqual(v, b[i]));\n  }\n  return false;\n}\n"],"names":[],"mappings":"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"}