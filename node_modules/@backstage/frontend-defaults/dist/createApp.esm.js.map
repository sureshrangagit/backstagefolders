{"version":3,"file":"createApp.esm.js","sources":["../src/createApp.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JSX, lazy, ReactNode, Suspense } from 'react';\nimport {\n  ConfigApi,\n  coreExtensionData,\n  ExtensionFactoryMiddleware,\n  FrontendFeature,\n  FrontendFeatureLoader,\n} from '@backstage/frontend-plugin-api';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { defaultConfigLoaderSync } from '../../core-app-api/src/app/defaultConfigLoader';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { overrideBaseUrlConfigs } from '../../core-app-api/src/app/overrideBaseUrlConfigs';\nimport { ConfigReader } from '@backstage/config';\nimport {\n  CreateAppRouteBinder,\n  createSpecializedApp,\n  FrontendPluginInfoResolver,\n} from '@backstage/frontend-app-api';\nimport appPlugin from '@backstage/plugin-app';\nimport { discoverAvailableFeatures } from './discovery';\nimport { resolveAsyncFeatures } from './resolution';\n\n/**\n * A source of dynamically loaded frontend features.\n *\n * @public\n * @deprecated Use the {@link @backstage/frontend-plugin-api#createFrontendFeatureLoader} function instead.\n */\nexport interface CreateAppFeatureLoader {\n  /**\n   * Returns name of this loader. suitable for showing to users.\n   */\n  getLoaderName(): string;\n\n  /**\n   * Loads a number of features dynamically.\n   */\n  load(options: { config: ConfigApi }): Promise<{\n    features: FrontendFeature[];\n  }>;\n}\n\n/**\n * Options for {@link createApp}.\n *\n * @public\n */\nexport interface CreateAppOptions {\n  features?: (\n    | FrontendFeature\n    | FrontendFeatureLoader\n    | CreateAppFeatureLoader\n  )[];\n  configLoader?: () => Promise<{ config: ConfigApi }>;\n  bindRoutes?(context: { bind: CreateAppRouteBinder }): void;\n  /**\n   * The component to render while loading the app (waiting for config, features, etc)\n   *\n   * Is the text \"Loading...\" by default.\n   * If set to \"null\" then no loading fallback component is rendered.   *\n   */\n  loadingComponent?: ReactNode;\n  extensionFactoryMiddleware?:\n    | ExtensionFactoryMiddleware\n    | ExtensionFactoryMiddleware[];\n  pluginInfoResolver?: FrontendPluginInfoResolver;\n}\n\n/**\n * Creates a new Backstage frontend app instance. See https://backstage.io/docs/frontend-system/building-apps/index\n *\n * @public\n */\nexport function createApp(options?: CreateAppOptions): {\n  createRoot(): JSX.Element;\n} {\n  let suspenseFallback = options?.loadingComponent;\n  if (suspenseFallback === undefined) {\n    suspenseFallback = 'Loading...';\n  }\n\n  async function appLoader() {\n    const config =\n      (await options?.configLoader?.().then(c => c.config)) ??\n      ConfigReader.fromConfigs(\n        overrideBaseUrlConfigs(defaultConfigLoaderSync()),\n      );\n\n    const { features: discoveredFeaturesAndLoaders } =\n      discoverAvailableFeatures(config);\n    const { features: loadedFeatures } = await resolveAsyncFeatures({\n      config,\n      features: [...discoveredFeaturesAndLoaders, ...(options?.features ?? [])],\n    });\n\n    const app = createSpecializedApp({\n      config,\n      features: [appPlugin, ...loadedFeatures],\n      bindRoutes: options?.bindRoutes,\n      extensionFactoryMiddleware: options?.extensionFactoryMiddleware,\n      pluginInfoResolver: options?.pluginInfoResolver,\n    });\n\n    const rootEl = app.tree.root.instance!.getData(\n      coreExtensionData.reactElement,\n    );\n\n    return { default: () => rootEl };\n  }\n\n  return {\n    createRoot() {\n      const LazyApp = lazy(appLoader);\n      return (\n        <Suspense fallback={suspenseFallback}>\n          <LazyApp />\n        </Suspense>\n      );\n    },\n  };\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAyFO,SAAS,UAAU,OAExB,EAAA;AACA,EAAA,IAAI,mBAAmB,OAAS,EAAA,gBAAA;AAChC,EAAA,IAAI,qBAAqB,KAAW,CAAA,EAAA;AAClC,IAAmB,gBAAA,GAAA,YAAA;AAAA;AAGrB,EAAA,eAAe,SAAY,GAAA;AACzB,IAAM,MAAA,MAAA,GACH,MAAM,OAAA,EAAS,YAAe,IAAA,CAAE,KAAK,CAAK,CAAA,KAAA,CAAA,CAAE,MAAM,CAAA,IACnD,YAAa,CAAA,WAAA;AAAA,MACX,sBAAA,CAAuB,yBAAyB;AAAA,KAClD;AAEF,IAAA,MAAM,EAAE,QAAA,EAAU,4BAA6B,EAAA,GAC7C,0BAA0B,MAAM,CAAA;AAClC,IAAA,MAAM,EAAE,QAAA,EAAU,cAAe,EAAA,GAAI,MAAM,oBAAqB,CAAA;AAAA,MAC9D,MAAA;AAAA,MACA,QAAA,EAAU,CAAC,GAAG,4BAAA,EAA8B,GAAI,OAAS,EAAA,QAAA,IAAY,EAAG;AAAA,KACzE,CAAA;AAED,IAAA,MAAM,MAAM,oBAAqB,CAAA;AAAA,MAC/B,MAAA;AAAA,MACA,QAAU,EAAA,CAAC,SAAW,EAAA,GAAG,cAAc,CAAA;AAAA,MACvC,YAAY,OAAS,EAAA,UAAA;AAAA,MACrB,4BAA4B,OAAS,EAAA,0BAAA;AAAA,MACrC,oBAAoB,OAAS,EAAA;AAAA,KAC9B,CAAA;AAED,IAAA,MAAM,MAAS,GAAA,GAAA,CAAI,IAAK,CAAA,IAAA,CAAK,QAAU,CAAA,OAAA;AAAA,MACrC,iBAAkB,CAAA;AAAA,KACpB;AAEA,IAAO,OAAA,EAAE,OAAS,EAAA,MAAM,MAAO,EAAA;AAAA;AAGjC,EAAO,OAAA;AAAA,IACL,UAAa,GAAA;AACX,MAAM,MAAA,OAAA,GAAU,KAAK,SAAS,CAAA;AAC9B,MAAA,2BACG,QAAS,EAAA,EAAA,QAAA,EAAU,gBAClB,EAAA,QAAA,kBAAA,GAAA,CAAC,WAAQ,CACX,EAAA,CAAA;AAAA;AAEJ,GACF;AACF;;;;"}