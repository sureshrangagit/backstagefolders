{"version":3,"file":"githubActionsDispatch.cjs.js","sources":["../../src/actions/githubActionsDispatch.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { Octokit } from 'octokit';\nimport { getOctokitOptions } from '../util';\nimport { examples } from './githubActionsDispatch.examples';\n\n/**\n * Creates a new action that dispatches a GitHub Action workflow for a given branch or tag.\n * @public\n */\nexport function createGithubActionsDispatchAction(options: {\n  integrations: ScmIntegrations;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction({\n    id: 'github:actions:dispatch',\n    description:\n      'Dispatches a GitHub Action workflow for a given branch or tag',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description:\n              'Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the new repository name and `owner` is an organization or username',\n          }),\n        workflowId: z =>\n          z.string({\n            description: 'The GitHub Action Workflow filename',\n          }),\n        branchOrTagName: z =>\n          z.string({\n            description:\n              'The git branch or tag name used to dispatch the workflow',\n          }),\n        workflowInputs: z =>\n          z\n            .record(z.string(), {\n              description:\n                'Inputs keys and values to send to GitHub Action configured on the workflow file. The maximum number of properties is 10.',\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description:\n                'The `GITHUB_TOKEN` to use for authorization to GitHub',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        workflowId,\n        branchOrTagName,\n        workflowInputs,\n        token: providedToken,\n      } = ctx.input;\n\n      ctx.logger.info(\n        `Dispatching workflow ${workflowId} for repo ${repoUrl} on ${branchOrTagName}`,\n      );\n\n      const { host, owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        host,\n        owner,\n        repo,\n        credentialsProvider: githubCredentialsProvider,\n        token: providedToken,\n      });\n      const client = new Octokit({\n        ...octokitOptions,\n        log: ctx.logger,\n      });\n\n      await ctx.checkpoint({\n        key: `create.workflow.dispatch.${owner}.${repo}.${workflowId}`,\n        fn: async () => {\n          await client.rest.actions.createWorkflowDispatch({\n            owner,\n            repo,\n            workflow_id: workflowId,\n            ref: branchOrTagName,\n            inputs: workflowInputs,\n          });\n\n          ctx.logger.info(`Workflow ${workflowId} dispatched successfully`);\n        },\n      });\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","getOctokitOptions","Octokit"],"mappings":";;;;;;;;AAiCO,SAAS,kCAAkC,OAG/C,EAAA;AACD,EAAM,MAAA,EAAE,YAAc,EAAA,yBAAA,EAA8B,GAAA,OAAA;AAEpD,EAAA,OAAOA,yCAAqB,CAAA;AAAA,IAC1B,EAAI,EAAA,yBAAA;AAAA,IACJ,WACE,EAAA,+DAAA;AAAA,cACFC,uCAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,KAAO,EAAA;AAAA,QACL,OAAA,EAAS,CACP,CAAA,KAAA,CAAA,CAAE,MAAO,CAAA;AAAA,UACP,WACE,EAAA;AAAA,SACH,CAAA;AAAA,QACH,UAAA,EAAY,CACV,CAAA,KAAA,CAAA,CAAE,MAAO,CAAA;AAAA,UACP,WAAa,EAAA;AAAA,SACd,CAAA;AAAA,QACH,eAAA,EAAiB,CACf,CAAA,KAAA,CAAA,CAAE,MAAO,CAAA;AAAA,UACP,WACE,EAAA;AAAA,SACH,CAAA;AAAA,QACH,gBAAgB,CACd,CAAA,KAAA,CAAA,CACG,MAAO,CAAA,CAAA,CAAE,QAAU,EAAA;AAAA,UAClB,WACE,EAAA;AAAA,SACH,EACA,QAAS,EAAA;AAAA,QACd,KAAA,EAAO,CACL,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WACE,EAAA;AAAA,SACH,EACA,QAAS;AAAA;AAChB,KACF;AAAA,IACA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAM,MAAA;AAAA,QACJ,OAAA;AAAA,QACA,UAAA;AAAA,QACA,eAAA;AAAA,QACA,cAAA;AAAA,QACA,KAAO,EAAA;AAAA,UACL,GAAI,CAAA,KAAA;AAER,MAAA,GAAA,CAAI,MAAO,CAAA,IAAA;AAAA,QACT,CAAwB,qBAAA,EAAA,UAAU,CAAa,UAAA,EAAA,OAAO,OAAO,eAAe,CAAA;AAAA,OAC9E;AAEA,MAAA,MAAM,EAAE,IAAM,EAAA,KAAA,EAAO,MAAS,GAAAC,iCAAA,CAAa,SAAS,YAAY,CAAA;AAEhE,MAAA,IAAI,CAAC,KAAO,EAAA;AACV,QAAM,MAAA,IAAIC,kBAAW,8CAA8C,CAAA;AAAA;AAGrE,MAAM,MAAA,cAAA,GAAiB,MAAMC,sBAAkB,CAAA;AAAA,QAC7C,YAAA;AAAA,QACA,IAAA;AAAA,QACA,KAAA;AAAA,QACA,IAAA;AAAA,QACA,mBAAqB,EAAA,yBAAA;AAAA,QACrB,KAAO,EAAA;AAAA,OACR,CAAA;AACD,MAAM,MAAA,MAAA,GAAS,IAAIC,eAAQ,CAAA;AAAA,QACzB,GAAG,cAAA;AAAA,QACH,KAAK,GAAI,CAAA;AAAA,OACV,CAAA;AAED,MAAA,MAAM,IAAI,UAAW,CAAA;AAAA,QACnB,KAAK,CAA4B,yBAAA,EAAA,KAAK,CAAI,CAAA,EAAA,IAAI,IAAI,UAAU,CAAA,CAAA;AAAA,QAC5D,IAAI,YAAY;AACd,UAAM,MAAA,MAAA,CAAO,IAAK,CAAA,OAAA,CAAQ,sBAAuB,CAAA;AAAA,YAC/C,KAAA;AAAA,YACA,IAAA;AAAA,YACA,WAAa,EAAA,UAAA;AAAA,YACb,GAAK,EAAA,eAAA;AAAA,YACL,MAAQ,EAAA;AAAA,WACT,CAAA;AAED,UAAA,GAAA,CAAI,MAAO,CAAA,IAAA,CAAK,CAAY,SAAA,EAAA,UAAU,CAA0B,wBAAA,CAAA,CAAA;AAAA;AAClE,OACD,CAAA;AAAA;AACH,GACD,CAAA;AACH;;;;"}