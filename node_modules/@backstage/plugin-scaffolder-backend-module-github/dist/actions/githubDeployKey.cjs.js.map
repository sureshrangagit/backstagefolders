{"version":3,"file":"githubDeployKey.cjs.js","sources":["../../src/actions/githubDeployKey.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { getOctokitOptions } from '../util';\nimport { Octokit } from 'octokit';\nimport Sodium from 'libsodium-wrappers';\nimport { examples } from './githubDeployKey.examples';\n\n/**\n * Creates an `github:deployKey:create` Scaffolder action that creates a Deploy Key\n *\n * @public\n */\nexport function createGithubDeployKeyAction(options: {\n  integrations: ScmIntegrationRegistry;\n}) {\n  const { integrations } = options;\n  // For more information on how to define custom actions, see\n  //   https://backstage.io/docs/features/software-templates/writing-custom-actions\n  return createTemplateAction({\n    id: 'github:deployKey:create',\n    description: 'Creates and stores Deploy Keys',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description:\n              'Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the new repository name and `owner` is an organization or username',\n          }),\n        publicKey: z =>\n          z.string({\n            description:\n              'Generated from `ssh-keygen`.  Begins with `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp521`, `ssh-ed25519`, `sk-ecdsa-sha2-nistp256@openssh.com`, or `sk-ssh-ed25519@openssh.com`.',\n          }),\n        privateKey: z =>\n          z.string({\n            description: 'SSH Private Key generated from `ssh-keygen`',\n          }),\n        deployKeyName: z =>\n          z.string({\n            description: `Name of the Deploy Key`,\n          }),\n        privateKeySecretName: z =>\n          z\n            .string({\n              description:\n                'Name of the GitHub Secret to store the private key related to the Deploy Key.  Defaults to: `KEY_NAME_PRIVATE_KEY` where `KEY_NAME` is the name of the Deploy Key',\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitHub',\n            })\n            .optional(),\n      },\n      output: {\n        privateKeySecretName: z =>\n          z.string({\n            description:\n              'The GitHub Action Repo Secret Name for the Private Key',\n          }),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        publicKey,\n        privateKey,\n        deployKeyName,\n        privateKeySecretName = `${deployKeyName\n          .split(' ')\n          .join('_')\n          .toLocaleUpperCase('en-US')}_PRIVATE_KEY`,\n        token: providedToken,\n      } = ctx.input;\n\n      const { host, owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(`No owner provided for repo ${repoUrl}`);\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        token: providedToken,\n        host,\n        owner,\n        repo,\n      });\n\n      const client = new Octokit({\n        ...octokitOptions,\n        log: ctx.logger,\n      });\n\n      await ctx.checkpoint({\n        key: `create.deploy.key.${owner}.${repo}.${publicKey}`,\n        fn: async () => {\n          await client.rest.repos.createDeployKey({\n            owner: owner,\n            repo: repo,\n            title: deployKeyName,\n            key: publicKey,\n          });\n        },\n      });\n\n      const { key, keyId } = await ctx.checkpoint({\n        key: `get.repo.public.key.${owner}.${repo}`,\n        fn: async () => {\n          const publicKeyResponse = await client.rest.actions.getRepoPublicKey({\n            owner: owner,\n            repo: repo,\n          });\n          return {\n            key: publicKeyResponse.data.key,\n            keyId: publicKeyResponse.data.key_id,\n          };\n        },\n      });\n\n      await Sodium.ready;\n      const binaryKey = Sodium.from_base64(\n        key,\n        Sodium.base64_variants.ORIGINAL,\n      );\n      const binarySecret = Sodium.from_string(privateKey);\n      const encryptedBinarySecret = Sodium.crypto_box_seal(\n        binarySecret,\n        binaryKey,\n      );\n      const encryptedBase64Secret = Sodium.to_base64(\n        encryptedBinarySecret,\n        Sodium.base64_variants.ORIGINAL,\n      );\n\n      await ctx.checkpoint({\n        key: `create.or.update.repo.secret.${owner}.${repo}.${keyId}`,\n        fn: async () => {\n          await client.rest.actions.createOrUpdateRepoSecret({\n            owner: owner,\n            repo: repo,\n            secret_name: privateKeySecretName,\n            encrypted_value: encryptedBase64Secret,\n            key_id: keyId,\n          });\n        },\n      });\n\n      ctx.output('privateKeySecretName', privateKeySecretName);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","getOctokitOptions","Octokit","Sodium"],"mappings":"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"}