{"version":3,"file":"githubEnvironment.cjs.js","sources":["../../src/actions/githubEnvironment.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { getOctokitOptions } from '../util';\nimport { Octokit } from 'octokit';\nimport Sodium from 'libsodium-wrappers';\nimport { examples } from './gitHubEnvironment.examples';\nimport { Entity } from '@backstage/catalog-model';\nimport { CatalogService } from '@backstage/plugin-catalog-node';\n\n/**\n * Creates an `github:environment:create` Scaffolder action that creates a Github Environment.\n *\n * @public\n */\nexport function createGithubEnvironmentAction(options: {\n  integrations: ScmIntegrationRegistry;\n  catalog: CatalogService;\n}) {\n  const { integrations, catalog } = options;\n  // For more information on how to define custom actions, see\n  //   https://backstage.io/docs/features/software-templates/writing-custom-actions\n  return createTemplateAction({\n    id: 'github:environment:create',\n    description: 'Creates Deployment Environments',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description:\n              'Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the new repository name and `owner` is an organization or username',\n          }),\n        name: z =>\n          z.string({\n            description: `Name of the deployment environment to create`,\n          }),\n        deploymentBranchPolicy: z =>\n          z\n            .object(\n              {\n                protected_branches: z.boolean({\n                  description:\n                    'Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.',\n                }),\n                custom_branch_policies: z.boolean({\n                  description:\n                    'Whether only branches that match the specified name patterns can deploy to this environment. If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.',\n                }),\n              },\n              {\n                description:\n                  'The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.',\n              },\n            )\n            .optional(),\n        customBranchPolicyNames: z =>\n          z\n            .array(z.string(), {\n              description: `The name pattern that branches must match in order to deploy to the environment.\n\nWildcard characters will not match \\`/\\`. For example, to match branches that begin with \\`release/\\` and contain an additional single slash, use \\`release/*/*\\`. For more information about pattern matching syntax, see the Ruby File.fnmatch documentation.`,\n            })\n            .optional(),\n        customTagPolicyNames: z =>\n          z\n            .array(z.string(), {\n              description: `The name pattern that tags must match in order to deploy to the environment.\n\nWildcard characters will not match \\`/\\`. For example, to match tags that begin with \\`release/\\` and contain an additional single slash, use \\`release/*/*\\`. For more information about pattern matching syntax, see the Ruby File.fnmatch documentation.`,\n            })\n            .optional(),\n        environmentVariables: z =>\n          z\n            .record(z.string(), {\n              description: `Environment variables attached to the deployment environment`,\n            })\n            .optional(),\n        secrets: z =>\n          z\n            .record(z.string(), {\n              description: `Secrets attached to the deployment environment`,\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitHub',\n            })\n            .optional(),\n        waitTimer: z =>\n          z\n            .number({\n              description:\n                'The time to wait before creating or updating the environment (in milliseconds)',\n            })\n            .optional(),\n        preventSelfReview: z =>\n          z\n            .boolean({\n              description:\n                'Whether to prevent self-review for this environment',\n            })\n            .optional(),\n        reviewers: z =>\n          z\n            .array(z.string(), {\n              description:\n                'Reviewers for this environment. Must be a list of Backstage entity references.',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        name,\n        deploymentBranchPolicy,\n        customBranchPolicyNames,\n        customTagPolicyNames,\n        environmentVariables,\n        secrets,\n        token: providedToken,\n        waitTimer,\n        preventSelfReview,\n        reviewers,\n      } = ctx.input;\n\n      // When environment creation step is executed right after a repo publish step, the repository might not be available immediately.\n      // Add a 2-second delay before initiating the steps in this action.\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      const { host, owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(`No owner provided for repo ${repoUrl}`);\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        token: providedToken,\n        host,\n        owner,\n        repo,\n      });\n      const client = new Octokit({\n        ...octokitOptions,\n        log: ctx.logger,\n      });\n\n      const repositoryId = await ctx.checkpoint({\n        key: `get.repo.${owner}.${repo}`,\n        fn: async () => {\n          const repository = await client.rest.repos.get({\n            owner: owner,\n            repo: repo,\n          });\n          return repository.data.id;\n        },\n      });\n\n      // convert reviewers from catalog entity to Github user or team\n      const githubReviewers: { type: 'User' | 'Team'; id: number }[] = [];\n      if (reviewers) {\n        let reviewersEntityRefs: Array<Entity | undefined> = [];\n        // Fetch reviewers from Catalog\n        const catalogResponse = await catalog.getEntitiesByRefs(\n          {\n            entityRefs: reviewers,\n          },\n          {\n            credentials: await ctx.getInitiatorCredentials(),\n          },\n        );\n        if (catalogResponse?.items?.length) {\n          reviewersEntityRefs = catalogResponse.items;\n        }\n\n        for (const reviewerEntityRef of reviewersEntityRefs) {\n          if (reviewerEntityRef?.kind === 'User') {\n            try {\n              const userId = await ctx.checkpoint({\n                key: `get.user.${reviewerEntityRef.metadata.name}`,\n                fn: async () => {\n                  const user = await client.rest.users.getByUsername({\n                    username: reviewerEntityRef.metadata.name,\n                  });\n                  return user.data.id;\n                },\n              });\n\n              githubReviewers.push({\n                type: 'User',\n                id: userId,\n              });\n            } catch (error) {\n              ctx.logger.error('User not found:', error);\n            }\n          } else if (reviewerEntityRef?.kind === 'Group') {\n            try {\n              const teamId = await ctx.checkpoint({\n                key: `get.team.${reviewerEntityRef.metadata.name}`,\n                fn: async () => {\n                  const team = await client.rest.teams.getByName({\n                    org: owner,\n                    team_slug: reviewerEntityRef.metadata.name,\n                  });\n                  return team.data.id;\n                },\n              });\n\n              githubReviewers.push({\n                type: 'Team',\n                id: teamId,\n              });\n            } catch (error) {\n              ctx.logger.error('Team not found:', error);\n            }\n          }\n        }\n      }\n\n      await ctx.checkpoint({\n        key: `create.or.update.environment.${owner}.${repo}.${name}`,\n        fn: async () => {\n          await client.rest.repos.createOrUpdateEnvironment({\n            owner: owner,\n            repo: repo,\n            environment_name: name,\n            deployment_branch_policy: deploymentBranchPolicy ?? undefined,\n            wait_timer: waitTimer ?? undefined,\n            prevent_self_review: preventSelfReview ?? undefined,\n            reviewers: githubReviewers.length ? githubReviewers : undefined,\n          });\n        },\n      });\n\n      if (customBranchPolicyNames) {\n        for (const item of customBranchPolicyNames) {\n          await ctx.checkpoint({\n            key: `create.deployment.branch.policy.branch.${owner}.${repo}.${name}.${item}`,\n            fn: async () => {\n              await client.rest.repos.createDeploymentBranchPolicy({\n                owner: owner,\n                repo: repo,\n                type: 'branch',\n                environment_name: name,\n                name: item,\n              });\n            },\n          });\n        }\n      }\n\n      if (customTagPolicyNames) {\n        for (const item of customTagPolicyNames) {\n          await ctx.checkpoint({\n            key: `create.deployment.branch.policy.tag.${owner}.${repo}.${name}.${item}`,\n            fn: async () => {\n              await client.rest.repos.createDeploymentBranchPolicy({\n                owner: owner,\n                repo: repo,\n                type: 'tag',\n                environment_name: name,\n                name: item,\n              });\n            },\n          });\n        }\n      }\n\n      for (const [key, value] of Object.entries(environmentVariables ?? {})) {\n        await ctx.checkpoint({\n          key: `create.env.variable.${owner}.${repo}.${name}.${key}`,\n          fn: async () => {\n            await client.rest.actions.createEnvironmentVariable({\n              repository_id: repositoryId,\n              owner: owner,\n              repo: repo,\n              environment_name: name,\n              name: key,\n              value,\n            });\n          },\n        });\n      }\n\n      if (secrets) {\n        const { publicKey, publicKeyId } = await ctx.checkpoint({\n          key: `get.env.public.key.${owner}.${repo}.${name}`,\n          fn: async () => {\n            const publicKeyResponse =\n              await client.rest.actions.getEnvironmentPublicKey({\n                repository_id: repositoryId,\n                owner: owner,\n                repo: repo,\n                environment_name: name,\n              });\n            return {\n              publicKey: publicKeyResponse.data.key,\n              publicKeyId: publicKeyResponse.data.key_id,\n            };\n          },\n        });\n\n        await Sodium.ready;\n        const binaryKey = Sodium.from_base64(\n          publicKey,\n          Sodium.base64_variants.ORIGINAL,\n        );\n        for (const [key, value] of Object.entries(secrets)) {\n          const binarySecret = Sodium.from_string(value);\n          const encryptedBinarySecret = Sodium.crypto_box_seal(\n            binarySecret,\n            binaryKey,\n          );\n          const encryptedBase64Secret = Sodium.to_base64(\n            encryptedBinarySecret,\n            Sodium.base64_variants.ORIGINAL,\n          );\n\n          await ctx.checkpoint({\n            key: `create.or.update.env.secret.${owner}.${repo}.${name}.${key}`,\n            fn: async () => {\n              await client.rest.actions.createOrUpdateEnvironmentSecret({\n                repository_id: repositoryId,\n                owner: owner,\n                repo: repo,\n                environment_name: name,\n                secret_name: key,\n                encrypted_value: encryptedBase64Secret,\n                key_id: publicKeyId,\n              });\n            },\n          });\n        }\n      }\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","getOctokitOptions","Octokit","Sodium"],"mappings":"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"}