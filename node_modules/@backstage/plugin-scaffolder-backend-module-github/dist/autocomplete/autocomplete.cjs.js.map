{"version":3,"file":"autocomplete.cjs.js","sources":["../../src/autocomplete/autocomplete.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { getOctokitOptions } from '../util';\nimport { Octokit } from 'octokit';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\n\nexport function createHandleAutocompleteRequest(options: {\n  integrations: ScmIntegrationRegistry;\n}) {\n  return async function handleAutocompleteRequest({\n    resource,\n    token,\n    context,\n  }: {\n    resource: string;\n    token: string;\n    context: Record<string, string>;\n  }): Promise<{ results: { title?: string; id: string }[] }> {\n    const { integrations } = options;\n    const octokitOptions = await getOctokitOptions({\n      integrations,\n      token,\n      host: context.host ?? 'github.com',\n    });\n    const client = new Octokit(octokitOptions);\n\n    switch (resource) {\n      case 'repositoriesWithOwner': {\n        const repositoriesWithOwner = await client.paginate(\n          client.rest.repos.listForAuthenticatedUser,\n        );\n\n        const results = repositoriesWithOwner.map(r => ({ id: r.full_name }));\n\n        return { results };\n      }\n      case 'branches': {\n        if (!context.owner || !context.repository)\n          throw new InputError(\n            'Missing owner and/or repository context parameter',\n          );\n\n        const branches = await client.paginate(client.rest.repos.listBranches, {\n          owner: context.owner,\n          repo: context.repository,\n        });\n\n        const results = branches.map(r => ({ id: r.name }));\n\n        return { results };\n      }\n      default:\n        throw new InputError(`Invalid resource: ${resource}`);\n    }\n  };\n}\n"],"names":["getOctokitOptions","Octokit","InputError"],"mappings":";;;;;;AAqBO,SAAS,gCAAgC,OAE7C,EAAA;AACD,EAAA,OAAO,eAAe,yBAA0B,CAAA;AAAA,IAC9C,QAAA;AAAA,IACA,KAAA;AAAA,IACA;AAAA,GAKyD,EAAA;AACzD,IAAM,MAAA,EAAE,cAAiB,GAAA,OAAA;AACzB,IAAM,MAAA,cAAA,GAAiB,MAAMA,sBAAkB,CAAA;AAAA,MAC7C,YAAA;AAAA,MACA,KAAA;AAAA,MACA,IAAA,EAAM,QAAQ,IAAQ,IAAA;AAAA,KACvB,CAAA;AACD,IAAM,MAAA,MAAA,GAAS,IAAIC,eAAA,CAAQ,cAAc,CAAA;AAEzC,IAAA,QAAQ,QAAU;AAAA,MAChB,KAAK,uBAAyB,EAAA;AAC5B,QAAM,MAAA,qBAAA,GAAwB,MAAM,MAAO,CAAA,QAAA;AAAA,UACzC,MAAA,CAAO,KAAK,KAAM,CAAA;AAAA,SACpB;AAEA,QAAM,MAAA,OAAA,GAAU,sBAAsB,GAAI,CAAA,CAAA,CAAA,MAAM,EAAE,EAAI,EAAA,CAAA,CAAE,WAAY,CAAA,CAAA;AAEpE,QAAA,OAAO,EAAE,OAAQ,EAAA;AAAA;AACnB,MACA,KAAK,UAAY,EAAA;AACf,QAAA,IAAI,CAAC,OAAA,CAAQ,KAAS,IAAA,CAAC,OAAQ,CAAA,UAAA;AAC7B,UAAA,MAAM,IAAIC,iBAAA;AAAA,YACR;AAAA,WACF;AAEF,QAAA,MAAM,WAAW,MAAM,MAAA,CAAO,SAAS,MAAO,CAAA,IAAA,CAAK,MAAM,YAAc,EAAA;AAAA,UACrE,OAAO,OAAQ,CAAA,KAAA;AAAA,UACf,MAAM,OAAQ,CAAA;AAAA,SACf,CAAA;AAED,QAAM,MAAA,OAAA,GAAU,SAAS,GAAI,CAAA,CAAA,CAAA,MAAM,EAAE,EAAI,EAAA,CAAA,CAAE,MAAO,CAAA,CAAA;AAElD,QAAA,OAAO,EAAE,OAAQ,EAAA;AAAA;AACnB,MACA;AACE,QAAA,MAAM,IAAIA,iBAAA,CAAW,CAAqB,kBAAA,EAAA,QAAQ,CAAE,CAAA,CAAA;AAAA;AACxD,GACF;AACF;;;;"}