{"version":3,"file":"gitlabIssueCreate.cjs.js","sources":["../../src/actions/gitlabIssueCreate.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { IssueType } from '../commonGitlabConfig';\nimport { examples } from './gitlabIssueCreate.examples';\nimport { checkEpicScope, convertDate, getClient, parseRepoUrl } from '../util';\nimport { CreateIssueOptions, IssueSchema } from '@gitbeaker/rest';\nimport { getErrorMessage } from './helpers';\n\n/**\n * Creates a `gitlab:issues:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabIssueAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:issues:create',\n    description: 'Creates a Gitlab issue.',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          }),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        projectId: z =>\n          z.number({\n            description: 'Project Id',\n          }),\n        title: z =>\n          z.string({\n            description: 'Title of the issue',\n          }),\n        assignees: z =>\n          z\n            .array(z.number(), {\n              description: 'IDs of the users to assign the issue to.',\n            })\n            .optional(),\n        confidential: z =>\n          z\n            .boolean({\n              description: 'Issue Confidentiality',\n            })\n            .optional(),\n        description: z =>\n          z\n            .string({\n              description: 'Issue description',\n            })\n            .max(1048576)\n            .optional(),\n        createdAt: z =>\n          z\n            .string({\n              description: 'Creation date/time',\n            })\n            .regex(\n              /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/,\n              'Invalid date format. Use YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.SSSZ',\n            )\n            .optional(),\n        dueDate: z =>\n          z\n            .string({\n              description: 'Due date/time',\n            })\n            .regex(\n              /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/,\n              'Invalid date format. Use YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.SSSZ',\n            )\n            .optional(),\n        discussionToResolve: z =>\n          z\n            .string({\n              description:\n                'Id of a discussion to resolve. Use in combination with \"merge_request_to_resolve_discussions_of\"',\n            })\n            .optional(),\n        epicId: z =>\n          z\n            .number({\n              description: 'Id of the linked Epic',\n            })\n            .min(0, 'Valid values should be equal or greater than zero')\n            .optional(),\n        labels: z =>\n          z\n            .string({\n              description: 'Labels to apply',\n            })\n            .optional(),\n        issueType: z =>\n          z\n            .nativeEnum(IssueType, {\n              description: 'Type of the issue',\n            })\n            .optional(),\n        mergeRequestToResolveDiscussionsOf: z =>\n          z\n            .number({\n              description:\n                'IID of a merge request in which to resolve all issues',\n            })\n            .optional(),\n        milestoneId: z =>\n          z\n            .number({\n              description: 'Global ID of a milestone to assign the issue',\n            })\n            .optional(),\n        weight: z =>\n          z\n            .number({\n              description: 'The issue weight',\n            })\n            .min(0)\n            .refine(\n              value => {\n                return value >= 0;\n              },\n              {\n                message: 'Valid values should be equal or greater than zero',\n              },\n            )\n            .optional(),\n      },\n      output: {\n        issueUrl: z =>\n          z.string({\n            description: 'Issue Url',\n          }),\n        issueId: z =>\n          z.number({\n            description: 'Issue Id',\n          }),\n        issueIid: z =>\n          z.number({\n            description: 'Issue Iid',\n          }),\n      },\n    },\n    async handler(ctx) {\n      try {\n        const {\n          repoUrl,\n          projectId,\n          title,\n          description = '',\n          confidential = false,\n          assignees = [],\n          createdAt = '',\n          dueDate,\n          discussionToResolve = '',\n          epicId,\n          labels = '',\n          issueType,\n          mergeRequestToResolveDiscussionsOf,\n          milestoneId,\n          weight,\n          token,\n        } = ctx.input;\n\n        const { host } = parseRepoUrl(repoUrl, integrations);\n        const api = getClient({ host, integrations, token });\n\n        let isEpicScoped = false;\n\n        isEpicScoped = await ctx.checkpoint({\n          key: `is.epic.scoped.${projectId}.${title}`,\n          fn: async () => {\n            if (epicId) {\n              isEpicScoped = await checkEpicScope(api, projectId, epicId);\n\n              if (isEpicScoped) {\n                ctx.logger.info('Epic is within Project Scope');\n              } else {\n                ctx.logger.warn(\n                  'Chosen epic is not within the Project Scope. The issue will be created without an associated epic.',\n                );\n              }\n            }\n            return isEpicScoped;\n          },\n        });\n\n        const mappedCreatedAt = convertDate(\n          String(createdAt),\n          new Date().toISOString(),\n        );\n        const mappedDueDate = dueDate\n          ? convertDate(String(dueDate), new Date().toISOString())\n          : undefined;\n\n        const issueOptions: CreateIssueOptions = {\n          description,\n          assigneeIds: assignees,\n          confidential,\n          epicId: isEpicScoped ? epicId : undefined,\n          labels,\n          createdAt: mappedCreatedAt,\n          dueDate: mappedDueDate,\n          discussionToResolve,\n          issueType,\n          mergeRequestToResolveDiscussionsOf,\n          milestoneId,\n          weight,\n        };\n\n        const response = await ctx.checkpoint({\n          key: `issue.${projectId}.${title}`,\n          fn: async () => {\n            const issue = (await api.Issues.create(\n              projectId,\n              title,\n              issueOptions,\n            )) as IssueSchema;\n\n            return {\n              id: issue.id,\n              web_url: issue.web_url,\n              iid: issue.iid,\n            };\n          },\n        });\n\n        ctx.output('issueId', response.id);\n        ctx.output('issueUrl', response.web_url);\n        ctx.output('issueIid', response.iid);\n      } catch (error: any) {\n        // Handling other errors\n        throw new InputError(\n          `Failed to create GitLab issue: ${getErrorMessage(error)}`,\n        );\n      }\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","IssueType","parseRepoUrl","getClient","checkEpicScope","convertDate","InputError","getErrorMessage"],"mappings":"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"}