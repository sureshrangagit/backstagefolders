{"version":3,"file":"gitlabProjectAccessTokenCreate.cjs.js","sources":["../../src/actions/gitlabProjectAccessTokenCreate.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { AccessTokenScopes, Gitlab } from '@gitbeaker/rest';\nimport { DateTime } from 'luxon';\nimport { getToken } from '../util';\nimport { examples } from './gitlabProjectAccessTokenCreate.examples';\n\n/**\n * Creates a `gitlab:projectAccessToken:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\n\nexport const createGitlabProjectAccessTokenAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:projectAccessToken:create',\n    examples,\n    schema: {\n      input: {\n        projectId: z =>\n          z.union([z.number(), z.string()], {\n            description: 'Project ID/Name(slug) of the Gitlab Project',\n          }),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        name: z =>\n          z\n            .string({\n              description: 'Name of Access Key',\n            })\n            .optional(),\n        repoUrl: z =>\n          z.string({\n            description: 'URL to gitlab instance',\n          }),\n        accessLevel: z =>\n          z\n            .number({\n              description:\n                'Access Level of the Token, 10 (Guest), 20 (Reporter), 30 (Developer), 40 (Maintainer), and 50 (Owner)',\n            })\n            .optional(),\n        scopes: z =>\n          z\n            .string({\n              description: 'Scopes for a project access token',\n            })\n            .array()\n            .optional(),\n        expiresAt: z =>\n          z\n            .string({\n              description:\n                'Expiration date of the access token in ISO format (YYYY-MM-DD). If Empty, it will set to the maximum of 365 days.',\n            })\n            .optional(),\n      },\n      output: {\n        access_token: z =>\n          z.string({\n            description: 'Access Token',\n          }),\n      },\n    },\n    async handler(ctx) {\n      ctx.logger.info(`Creating Token for Project \"${ctx.input.projectId}\"`);\n      const {\n        projectId,\n        name = 'tokenname',\n        accessLevel = 40,\n        scopes = ['read_repository'],\n        expiresAt,\n      } = ctx.input;\n\n      const { token, integrationConfig } = getToken(ctx.input, integrations);\n\n      if (!integrationConfig.config.token && token) {\n        throw new InputError(\n          `No token available for host ${integrationConfig.config.baseUrl}`,\n        );\n      }\n\n      let api;\n\n      if (!ctx.input.token) {\n        api = new Gitlab({\n          host: integrationConfig.config.baseUrl,\n          token: token,\n        });\n      } else {\n        api = new Gitlab({\n          host: integrationConfig.config.baseUrl,\n          oauthToken: token,\n        });\n      }\n\n      const projectAccessToken = await ctx.checkpoint({\n        key: `project.access.token.${projectId}.${name}`,\n        fn: async () => {\n          const response = await api.ProjectAccessTokens.create(\n            projectId,\n            name,\n            scopes as AccessTokenScopes[],\n            expiresAt || DateTime.now().plus({ days: 365 }).toISODate()!,\n            {\n              accessLevel,\n            },\n          );\n          return response.token;\n        },\n      });\n\n      if (!projectAccessToken) {\n        throw new Error('Could not create project access token');\n      }\n\n      ctx.output('access_token', projectAccessToken);\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","getToken","InputError","Gitlab","DateTime"],"mappings":"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"}