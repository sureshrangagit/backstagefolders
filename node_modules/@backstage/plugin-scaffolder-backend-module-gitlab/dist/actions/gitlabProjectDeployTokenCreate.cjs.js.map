{"version":3,"file":"gitlabProjectDeployTokenCreate.cjs.js","sources":["../../src/actions/gitlabProjectDeployTokenCreate.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { DeployTokenScope, Gitlab } from '@gitbeaker/rest';\nimport { getToken } from '../util';\nimport { examples } from './gitlabProjectDeployTokenCreate.examples';\n\n/**\n * Creates a `gitlab:projectDeployToken:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabProjectDeployTokenAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:projectDeployToken:create',\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          }),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        projectId: z =>\n          z.union([z.number(), z.string()], {\n            description: 'Project ID',\n          }),\n        name: z =>\n          z.string({\n            description: 'Deploy Token Name',\n          }),\n        username: z =>\n          z\n            .string({\n              description: 'Deploy Token Username',\n            })\n            .optional(),\n        scopes: z =>\n          z.array(z.string(), {\n            description: 'Scopes',\n          }),\n      },\n      output: {\n        deploy_token: z =>\n          z.string({\n            description: 'Deploy Token',\n          }),\n        user: z =>\n          z.string({\n            description: 'User',\n          }),\n      },\n    },\n    async handler(ctx) {\n      ctx.logger.info(`Creating Token for Project \"${ctx.input.projectId}\"`);\n      const { projectId, name, username, scopes } = ctx.input;\n      const { token, integrationConfig } = getToken(ctx.input, integrations);\n\n      if (scopes.length === 0) {\n        throw new InputError(\n          `Could not create token for project \"${ctx.input.projectId}\": scopes cannot be empty.`,\n        );\n      }\n\n      const api = new Gitlab({\n        host: integrationConfig.config.baseUrl,\n        token: token,\n      });\n\n      const { deployToken, deployUsername } = await ctx.checkpoint({\n        key: `create.deploy.token.${projectId}.${name}`,\n        fn: async () => {\n          const res = await api.DeployTokens.create(\n            name,\n            scopes as DeployTokenScope[],\n            {\n              projectId,\n              username,\n            },\n          );\n\n          if (!res.hasOwnProperty('token')) {\n            throw new InputError(`No deploy_token given from gitlab instance`);\n          }\n\n          return {\n            deployToken: res.token as string,\n            deployUsername: res.username,\n          };\n        },\n      });\n\n      ctx.output('deploy_token', deployToken);\n      ctx.output('user', deployUsername);\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","getToken","InputError","Gitlab"],"mappings":";;;;;;;;AA6Ba,MAAA,oCAAA,GAAuC,CAAC,OAE/C,KAAA;AACJ,EAAM,MAAA,EAAE,cAAiB,GAAA,OAAA;AACzB,EAAA,OAAOA,yCAAqB,CAAA;AAAA,IAC1B,EAAI,EAAA,kCAAA;AAAA,cACJC,gDAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,KAAO,EAAA;AAAA,QACL,OAAA,EAAS,CACP,CAAA,KAAA,CAAA,CAAE,MAAO,CAAA;AAAA,UACP,WAAa,EAAA,CAAA,sJAAA;AAAA,SACd,CAAA;AAAA,QACH,KAAA,EAAO,CACL,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WAAa,EAAA;AAAA,SACd,EACA,QAAS,EAAA;AAAA,QACd,SAAA,EAAW,CACT,CAAA,KAAA,CAAA,CAAE,KAAM,CAAA,CAAC,CAAE,CAAA,MAAA,EAAU,EAAA,CAAA,CAAE,MAAO,EAAC,CAAG,EAAA;AAAA,UAChC,WAAa,EAAA;AAAA,SACd,CAAA;AAAA,QACH,IAAA,EAAM,CACJ,CAAA,KAAA,CAAA,CAAE,MAAO,CAAA;AAAA,UACP,WAAa,EAAA;AAAA,SACd,CAAA;AAAA,QACH,QAAA,EAAU,CACR,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WAAa,EAAA;AAAA,SACd,EACA,QAAS,EAAA;AAAA,QACd,QAAQ,CACN,CAAA,KAAA,CAAA,CAAE,KAAM,CAAA,CAAA,CAAE,QAAU,EAAA;AAAA,UAClB,WAAa,EAAA;AAAA,SACd;AAAA,OACL;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,YAAA,EAAc,CACZ,CAAA,KAAA,CAAA,CAAE,MAAO,CAAA;AAAA,UACP,WAAa,EAAA;AAAA,SACd,CAAA;AAAA,QACH,IAAA,EAAM,CACJ,CAAA,KAAA,CAAA,CAAE,MAAO,CAAA;AAAA,UACP,WAAa,EAAA;AAAA,SACd;AAAA;AACL,KACF;AAAA,IACA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAA,GAAA,CAAI,OAAO,IAAK,CAAA,CAAA,4BAAA,EAA+B,GAAI,CAAA,KAAA,CAAM,SAAS,CAAG,CAAA,CAAA,CAAA;AACrE,MAAA,MAAM,EAAE,SAAW,EAAA,IAAA,EAAM,QAAU,EAAA,MAAA,KAAW,GAAI,CAAA,KAAA;AAClD,MAAA,MAAM,EAAE,KAAO,EAAA,iBAAA,KAAsBC,aAAS,CAAA,GAAA,CAAI,OAAO,YAAY,CAAA;AAErE,MAAI,IAAA,MAAA,CAAO,WAAW,CAAG,EAAA;AACvB,QAAA,MAAM,IAAIC,iBAAA;AAAA,UACR,CAAA,oCAAA,EAAuC,GAAI,CAAA,KAAA,CAAM,SAAS,CAAA,0BAAA;AAAA,SAC5D;AAAA;AAGF,MAAM,MAAA,GAAA,GAAM,IAAIC,WAAO,CAAA;AAAA,QACrB,IAAA,EAAM,kBAAkB,MAAO,CAAA,OAAA;AAAA,QAC/B;AAAA,OACD,CAAA;AAED,MAAA,MAAM,EAAE,WAAa,EAAA,cAAA,EAAmB,GAAA,MAAM,IAAI,UAAW,CAAA;AAAA,QAC3D,GAAK,EAAA,CAAA,oBAAA,EAAuB,SAAS,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA;AAAA,QAC7C,IAAI,YAAY;AACd,UAAM,MAAA,GAAA,GAAM,MAAM,GAAA,CAAI,YAAa,CAAA,MAAA;AAAA,YACjC,IAAA;AAAA,YACA,MAAA;AAAA,YACA;AAAA,cACE,SAAA;AAAA,cACA;AAAA;AACF,WACF;AAEA,UAAA,IAAI,CAAC,GAAA,CAAI,cAAe,CAAA,OAAO,CAAG,EAAA;AAChC,YAAM,MAAA,IAAID,kBAAW,CAA4C,0CAAA,CAAA,CAAA;AAAA;AAGnE,UAAO,OAAA;AAAA,YACL,aAAa,GAAI,CAAA,KAAA;AAAA,YACjB,gBAAgB,GAAI,CAAA;AAAA,WACtB;AAAA;AACF,OACD,CAAA;AAED,MAAI,GAAA,CAAA,MAAA,CAAO,gBAAgB,WAAW,CAAA;AACtC,MAAI,GAAA,CAAA,MAAA,CAAO,QAAQ,cAAc,CAAA;AAAA;AACnC,GACD,CAAA;AACH;;;;"}