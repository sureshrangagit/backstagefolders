{"version":3,"file":"gitlabGroupEnsureExists.cjs.js","sources":["../../src/actions/gitlabGroupEnsureExists.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { GroupSchema } from '@gitbeaker/rest';\nimport { getClient, parseRepoUrl } from '../util';\nimport { examples } from './gitlabGroupEnsureExists.examples';\n\n/**\n * Creates an `gitlab:group:ensureExists` Scaffolder action.\n *\n * @public\n */\nexport const createGitlabGroupEnsureExistsAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction({\n    id: 'gitlab:group:ensureExists',\n    description: 'Ensures a Gitlab group exists',\n    supportsDryRun: true,\n    examples,\n    schema: {\n      input: {\n        repoUrl: z =>\n          z.string({\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          }),\n        token: z =>\n          z\n            .string({\n              description: 'The token to use for authorization to GitLab',\n            })\n            .optional(),\n        path: z =>\n          z\n            .array(\n              z.string().or(\n                z.object({\n                  name: z.string(),\n                  slug: z.string(),\n                }),\n              ),\n              {\n                description:\n                  'A path of group names or objects (name and slug) that is ensured to exist',\n              },\n            )\n            .min(1),\n      },\n      output: {\n        groupId: z =>\n          z\n            .number({\n              description: 'The id of the innermost sub-group',\n            })\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      if (ctx.isDryRun) {\n        ctx.output('groupId', 42);\n        return;\n      }\n\n      const { token, repoUrl, path } = ctx.input;\n\n      const { host } = parseRepoUrl(repoUrl, integrations);\n\n      const api = getClient({ host, integrations, token });\n\n      let currentPath: string | null = null;\n      let parentId: number | null = null;\n      for (const { name, slug } of pathIterator(path)) {\n        const fullPath: string = currentPath ? `${currentPath}/${slug}` : slug;\n        const result = (await api.Groups.search(\n          fullPath,\n        )) as unknown as Array<GroupSchema>; // recast since the return type for search is wrong in the gitbeaker typings\n        const subGroup = result.find(\n          searchPathElem => searchPathElem.full_path === fullPath,\n        );\n        if (!subGroup) {\n          ctx.logger.info(`creating missing group ${fullPath}`);\n\n          parentId = await ctx.checkpoint({\n            key: `ensure.${name}.${slug}.${parentId}`,\n            // eslint-disable-next-line no-loop-func\n            fn: async () => {\n              return (\n                await api.Groups.create(\n                  name,\n                  slug,\n                  parentId\n                    ? {\n                        parentId: parentId,\n                      }\n                    : {},\n                )\n              )?.id;\n            },\n          });\n        } else {\n          parentId = subGroup.id;\n        }\n        currentPath = fullPath;\n      }\n      if (parentId !== null) {\n        ctx.output('groupId', parentId);\n      }\n    },\n  });\n};\n\ntype PathPart = { name: string; slug: string };\ntype PathItem = string | PathPart;\n\nfunction* pathIterator(items: PathItem[]): Generator<PathPart> {\n  for (const item of items) {\n    if (typeof item === 'string') {\n      const parts = item.split('/');\n      for (const part of parts) {\n        yield { name: part, slug: part };\n      }\n    } else {\n      yield item;\n    }\n  }\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","getClient"],"mappings":"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"}