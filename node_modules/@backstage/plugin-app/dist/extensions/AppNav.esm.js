import { jsxs, jsx } from 'react/jsx-runtime';
import { createElement } from 'react';
import { createExtension, createExtensionInput, NavItemBlueprint, NavLogoBlueprint, coreExtensionData, useRouteRef } from '@backstage/frontend-plugin-api';
import { makeStyles } from '@material-ui/core/styles';
import { sidebarConfig, Sidebar, SidebarDivider, useSidebarOpenState, Link, SidebarItem } from '@backstage/core-components';
import LogoIcon from '../packages/app/src/components/Root/LogoIcon.esm.js';
import LogoFull from '../packages/app/src/components/Root/LogoFull.esm.js';

const useSidebarLogoStyles = makeStyles({
  root: {
    width: sidebarConfig.drawerWidthClosed,
    height: 3 * sidebarConfig.logoHeight,
    display: "flex",
    flexFlow: "row nowrap",
    alignItems: "center",
    marginBottom: -14
  },
  link: {
    width: sidebarConfig.drawerWidthClosed,
    marginLeft: 24
  }
});
const SidebarLogo = (props) => {
  const classes = useSidebarLogoStyles();
  const { isOpen } = useSidebarOpenState();
  return /* @__PURE__ */ jsx("div", { className: classes.root, children: /* @__PURE__ */ jsx(Link, { to: "/", underline: "none", className: classes.link, "aria-label": "Home", children: isOpen ? props?.logoFull ?? /* @__PURE__ */ jsx(LogoFull, {}) : props?.logoIcon ?? /* @__PURE__ */ jsx(LogoIcon, {}) }) });
};
const SidebarNavItem = (props) => {
  const { icon: Icon, title, routeRef } = props;
  const link = useRouteRef(routeRef);
  if (!link) {
    return null;
  }
  return /* @__PURE__ */ jsx(SidebarItem, { to: link(), icon: Icon, text: title });
};
const AppNav = createExtension({
  name: "nav",
  attachTo: { id: "app/layout", input: "nav" },
  inputs: {
    items: createExtensionInput([NavItemBlueprint.dataRefs.target]),
    logos: createExtensionInput([NavLogoBlueprint.dataRefs.logoElements], {
      singleton: true,
      optional: true
    })
  },
  output: [coreExtensionData.reactElement],
  factory: ({ inputs }) => [
    coreExtensionData.reactElement(
      /* @__PURE__ */ jsxs(Sidebar, { children: [
        /* @__PURE__ */ jsx(
          SidebarLogo,
          {
            ...inputs.logos?.get(NavLogoBlueprint.dataRefs.logoElements)
          }
        ),
        /* @__PURE__ */ jsx(SidebarDivider, {}),
        inputs.items.map((item, index) => /* @__PURE__ */ createElement(
          SidebarNavItem,
          {
            ...item.get(NavItemBlueprint.dataRefs.target),
            key: index
          }
        ))
      ] })
    )
  ]
});

export { AppNav };
//# sourceMappingURL=AppNav.esm.js.map
