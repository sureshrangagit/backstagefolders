{"version":3,"file":"DialogDisplay.esm.js","sources":["../../src/extensions/DialogDisplay.tsx"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Fragment, useEffect, useState } from 'react';\nimport {\n  AppRootElementBlueprint,\n  DialogApi,\n  DialogApiDialog,\n  dialogApiRef,\n} from '@backstage/frontend-plugin-api';\nimport { createDeferred } from '@backstage/types';\nimport { OnShowDialog } from '../apis/DefaultDialogApi';\nimport Dialog from '@material-ui/core/Dialog';\n\nlet dialogId = 0;\nfunction getDialogId() {\n  dialogId += 1;\n  return dialogId.toString(36);\n}\n\ntype DialogState = DialogApiDialog & {\n  id: string;\n  modal: boolean;\n};\n\n/**\n * The other half of the default implementation of the {@link DialogApi}.\n *\n * This component is responsible for rendering the dialogs in the React tree and managing a stack of dialogs.\n * It expects the implementation of the {@link DialogApi} to be the `DefaultDialogApi`. If one is replaced the other must be too.\n * @internal\n */\nfunction DialogDisplay({\n  dialogApi,\n}: {\n  dialogApi: DialogApi & { connect(onShow: OnShowDialog): void };\n}) {\n  const [dialogs, setDialogs] = useState<\n    { dialog: DialogState; element: React.JSX.Element }[]\n  >([]);\n\n  useEffect(() => {\n    dialogApi.connect(options => {\n      const id = getDialogId();\n      const deferred = createDeferred<unknown>();\n      const dialog: DialogState = {\n        id,\n        modal: options.modal,\n        close(result) {\n          deferred.resolve(result);\n          setDialogs(ds => ds.filter(d => d.dialog.id !== id));\n        },\n        update(ElementOrComponent) {\n          const element =\n            typeof ElementOrComponent === 'function' ? (\n              <ElementOrComponent dialog={dialog} />\n            ) : (\n              ElementOrComponent\n            );\n          setDialogs(ds =>\n            ds.map(d => (d.dialog.id === id ? { dialog, element } : d)),\n          );\n        },\n        async result() {\n          return deferred;\n        },\n      };\n      const element = <options.component dialog={dialog} />;\n      setDialogs(ds => [...ds, { dialog, element }]);\n      return dialog;\n    });\n  }, [dialogApi]);\n\n  if (dialogs.length > 0) {\n    const lastDialog = dialogs[dialogs.length - 1];\n    return (\n      <Dialog\n        open\n        onClose={() => {\n          if (!lastDialog.dialog.modal) {\n            lastDialog.dialog.close();\n          }\n        }}\n      >\n        {lastDialog.element}\n      </Dialog>\n    );\n  }\n\n  return null;\n}\n\nexport const dialogDisplayAppRootElement =\n  AppRootElementBlueprint.makeWithOverrides({\n    name: 'dialog-display',\n    factory(originalFactory, { apis }) {\n      const dialogApi = apis.get(dialogApiRef);\n      if (!isInternalDialogApi(dialogApi)) {\n        return originalFactory({\n          element: <Fragment />,\n        });\n      }\n      return originalFactory({\n        element: <DialogDisplay dialogApi={dialogApi} />,\n      });\n    },\n  });\n\nfunction isInternalDialogApi(\n  dialogApi?: DialogApi,\n): dialogApi is DialogApi & { connect(onShow: OnShowDialog): void } {\n  if (!dialogApi) {\n    return false;\n  }\n  return 'connect' in dialogApi;\n}\n"],"names":["element"],"mappings":";;;;;;AA2BA,IAAI,QAAW,GAAA,CAAA;AACf,SAAS,WAAc,GAAA;AACrB,EAAY,QAAA,IAAA,CAAA;AACZ,EAAO,OAAA,QAAA,CAAS,SAAS,EAAE,CAAA;AAC7B;AAcA,SAAS,aAAc,CAAA;AAAA,EACrB;AACF,CAEG,EAAA;AACD,EAAA,MAAM,CAAC,OAAS,EAAA,UAAU,CAAI,GAAA,QAAA,CAE5B,EAAE,CAAA;AAEJ,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,SAAA,CAAU,QAAQ,CAAW,OAAA,KAAA;AAC3B,MAAA,MAAM,KAAK,WAAY,EAAA;AACvB,MAAA,MAAM,WAAW,cAAwB,EAAA;AACzC,MAAA,MAAM,MAAsB,GAAA;AAAA,QAC1B,EAAA;AAAA,QACA,OAAO,OAAQ,CAAA,KAAA;AAAA,QACf,MAAM,MAAQ,EAAA;AACZ,UAAA,QAAA,CAAS,QAAQ,MAAM,CAAA;AACvB,UAAW,UAAA,CAAA,CAAA,EAAA,KAAM,GAAG,MAAO,CAAA,CAAA,CAAA,KAAK,EAAE,MAAO,CAAA,EAAA,KAAO,EAAE,CAAC,CAAA;AAAA,SACrD;AAAA,QACA,OAAO,kBAAoB,EAAA;AACzB,UAAA,MAAMA,WACJ,OAAO,kBAAA,KAAuB,6BAC3B,GAAA,CAAA,kBAAA,EAAA,EAAmB,QAAgB,CAEpC,GAAA,kBAAA;AAEJ,UAAA,UAAA;AAAA,YAAW,CACT,EAAA,KAAA,EAAA,CAAG,GAAI,CAAA,CAAA,CAAA,KAAM,CAAE,CAAA,MAAA,CAAO,EAAO,KAAA,EAAA,GAAK,EAAE,MAAA,EAAQ,OAAAA,EAAAA,QAAAA,KAAY,CAAE;AAAA,WAC5D;AAAA,SACF;AAAA,QACA,MAAM,MAAS,GAAA;AACb,UAAO,OAAA,QAAA;AAAA;AACT,OACF;AACA,MAAA,MAAM,OAAU,mBAAA,GAAA,CAAC,OAAQ,CAAA,SAAA,EAAR,EAAkB,MAAgB,EAAA,CAAA;AACnD,MAAW,UAAA,CAAA,CAAA,EAAA,KAAM,CAAC,GAAG,EAAA,EAAI,EAAE,MAAQ,EAAA,OAAA,EAAS,CAAC,CAAA;AAC7C,MAAO,OAAA,MAAA;AAAA,KACR,CAAA;AAAA,GACH,EAAG,CAAC,SAAS,CAAC,CAAA;AAEd,EAAI,IAAA,OAAA,CAAQ,SAAS,CAAG,EAAA;AACtB,IAAA,MAAM,UAAa,GAAA,OAAA,CAAQ,OAAQ,CAAA,MAAA,GAAS,CAAC,CAAA;AAC7C,IACE,uBAAA,GAAA;AAAA,MAAC,MAAA;AAAA,MAAA;AAAA,QACC,IAAI,EAAA,IAAA;AAAA,QACJ,SAAS,MAAM;AACb,UAAI,IAAA,CAAC,UAAW,CAAA,MAAA,CAAO,KAAO,EAAA;AAC5B,YAAA,UAAA,CAAW,OAAO,KAAM,EAAA;AAAA;AAC1B,SACF;AAAA,QAEC,QAAW,EAAA,UAAA,CAAA;AAAA;AAAA,KACd;AAAA;AAIJ,EAAO,OAAA,IAAA;AACT;AAEa,MAAA,2BAAA,GACX,wBAAwB,iBAAkB,CAAA;AAAA,EACxC,IAAM,EAAA,gBAAA;AAAA,EACN,OAAQ,CAAA,eAAA,EAAiB,EAAE,IAAA,EAAQ,EAAA;AACjC,IAAM,MAAA,SAAA,GAAY,IAAK,CAAA,GAAA,CAAI,YAAY,CAAA;AACvC,IAAI,IAAA,CAAC,mBAAoB,CAAA,SAAS,CAAG,EAAA;AACnC,MAAA,OAAO,eAAgB,CAAA;AAAA,QACrB,OAAA,sBAAU,QAAS,EAAA,EAAA;AAAA,OACpB,CAAA;AAAA;AAEH,IAAA,OAAO,eAAgB,CAAA;AAAA,MACrB,OAAA,kBAAU,GAAA,CAAA,aAAA,EAAA,EAAc,SAAsB,EAAA;AAAA,KAC/C,CAAA;AAAA;AAEL,CAAC;AAEH,SAAS,oBACP,SACkE,EAAA;AAClE,EAAA,IAAI,CAAC,SAAW,EAAA;AACd,IAAO,OAAA,KAAA;AAAA;AAET,EAAA,OAAO,SAAa,IAAA,SAAA;AACtB;;;;"}