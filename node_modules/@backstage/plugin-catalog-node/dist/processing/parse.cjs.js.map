{"version":3,"file":"parse.cjs.js","sources":["../../src/processing/parse.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyLocationRef } from '@backstage/catalog-model';\nimport lodash from 'lodash';\nimport yaml from 'yaml';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { CatalogProcessorResult } from '../api/processor';\nimport { processingResult } from '../api/processingResult';\n\n/**\n * A helper function that parses a YAML file, properly handling multiple\n * documents in a single file.\n *\n * @public\n * @remarks\n *\n * Each document is expected to be a valid Backstage entity. Each item in the\n * iterable is in the form of an entity result if the document seemed like a\n * valid object, or in the form of an error result if it seemed incorrect. This\n * way, you can choose to retain a partial result if you want.\n *\n * Note that this function does NOT perform any validation of the entities. No\n * assumptions whatsoever can be made on the emnitted entities except that they\n * are valid JSON objects.\n */\nexport function* parseEntityYaml(\n  data: string | Buffer,\n  location: LocationSpec,\n): Iterable<CatalogProcessorResult> {\n  let documents: yaml.Document.Parsed[];\n  try {\n    documents = yaml\n      .parseAllDocuments(\n        typeof data === 'string' ? data : data.toString('utf8'),\n      )\n      .filter(d => d);\n  } catch (e) {\n    const loc = stringifyLocationRef(location);\n    const message = `Failed to parse YAML at ${loc}, ${e}`;\n    yield processingResult.generalError(location, message);\n    return;\n  }\n\n  for (const document of documents) {\n    if (document.errors?.length) {\n      const loc = stringifyLocationRef(location);\n      const message = `YAML error at ${loc}, ${document.errors[0]}`;\n      yield processingResult.generalError(location, message);\n    } else {\n      const json = document.toJSON();\n      if (lodash.isPlainObject(json)) {\n        yield processingResult.entity(location, json as Entity);\n      } else if (json === null) {\n        // Ignore null values, these happen if there is an empty document in the\n        // YAML file, for example if --- is added to the end of the file.\n      } else {\n        const message = `Expected object at root, got ${typeof json}`;\n        yield processingResult.generalError(location, message);\n      }\n    }\n  }\n}\n"],"names":["yaml","stringifyLocationRef","processingResult","lodash"],"mappings":";;;;;;;;;;;;AAuCiB,UAAA,eAAA,CACf,MACA,QACkC,EAAA;AAClC,EAAI,IAAA,SAAA;AACJ,EAAI,IAAA;AACF,IAAA,SAAA,GAAYA,qBACT,CAAA,iBAAA;AAAA,MACC,OAAO,IAAS,KAAA,QAAA,GAAW,IAAO,GAAA,IAAA,CAAK,SAAS,MAAM;AAAA,KACxD,CACC,MAAO,CAAA,CAAA,CAAA,KAAK,CAAC,CAAA;AAAA,WACT,CAAG,EAAA;AACV,IAAM,MAAA,GAAA,GAAMC,kCAAqB,QAAQ,CAAA;AACzC,IAAA,MAAM,OAAU,GAAA,CAAA,wBAAA,EAA2B,GAAG,CAAA,EAAA,EAAK,CAAC,CAAA,CAAA;AACpD,IAAM,MAAAC,iCAAA,CAAiB,YAAa,CAAA,QAAA,EAAU,OAAO,CAAA;AACrD,IAAA;AAAA;AAGF,EAAA,KAAA,MAAW,YAAY,SAAW,EAAA;AAChC,IAAI,IAAA,QAAA,CAAS,QAAQ,MAAQ,EAAA;AAC3B,MAAM,MAAA,GAAA,GAAMD,kCAAqB,QAAQ,CAAA;AACzC,MAAA,MAAM,UAAU,CAAiB,cAAA,EAAA,GAAG,KAAK,QAAS,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAA;AAC3D,MAAM,MAAAC,iCAAA,CAAiB,YAAa,CAAA,QAAA,EAAU,OAAO,CAAA;AAAA,KAChD,MAAA;AACL,MAAM,MAAA,IAAA,GAAO,SAAS,MAAO,EAAA;AAC7B,MAAI,IAAAC,uBAAA,CAAO,aAAc,CAAA,IAAI,CAAG,EAAA;AAC9B,QAAM,MAAAD,iCAAA,CAAiB,MAAO,CAAA,QAAA,EAAU,IAAc,CAAA;AAAA,OACxD,MAAA,IAAW,SAAS,IAAM,EAAA,CAGnB,MAAA;AACL,QAAM,MAAA,OAAA,GAAU,CAAgC,6BAAA,EAAA,OAAO,IAAI,CAAA,CAAA;AAC3D,QAAM,MAAAA,iCAAA,CAAiB,YAAa,CAAA,QAAA,EAAU,OAAO,CAAA;AAAA;AACvD;AACF;AAEJ;;;;"}