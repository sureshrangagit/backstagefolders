{"version":3,"file":"ScaffolderPlugin.cjs.js","sources":["../src/ScaffolderPlugin.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { catalogServiceRef } from '@backstage/plugin-catalog-node';\nimport { eventsServiceRef } from '@backstage/plugin-events-node';\nimport { TaskBroker, TemplateAction } from '@backstage/plugin-scaffolder-node';\nimport {\n  AutocompleteHandler,\n  CreatedTemplateFilter,\n  CreatedTemplateGlobal,\n  createTemplateFilter,\n  createTemplateGlobalFunction,\n  createTemplateGlobalValue,\n  scaffolderActionsExtensionPoint,\n  scaffolderAutocompleteExtensionPoint,\n  scaffolderTaskBrokerExtensionPoint,\n  scaffolderTemplatingExtensionPoint,\n  scaffolderWorkspaceProviderExtensionPoint,\n  WorkspaceProvider,\n} from '@backstage/plugin-scaffolder-node/alpha';\nimport {\n  createCatalogRegisterAction,\n  createCatalogWriteAction,\n  createDebugLogAction,\n  createFetchCatalogEntityAction,\n  createFetchPlainAction,\n  createFetchPlainFileAction,\n  createFetchTemplateAction,\n  createFetchTemplateFileAction,\n  createFilesystemDeleteAction,\n  createFilesystemReadDirAction,\n  createFilesystemRenameAction,\n  createWaitAction,\n} from './scaffolder';\nimport { createRouter } from './service/router';\nimport { loggerToWinstonLogger } from './util/loggerToWinstonLogger';\nimport {\n  convertFiltersToRecord,\n  convertGlobalsToRecord,\n} from './util/templating';\n\n/**\n * Scaffolder plugin\n *\n * @public\n */\nexport const scaffolderPlugin = createBackendPlugin({\n  pluginId: 'scaffolder',\n  register(env) {\n    const addedActions = new Array<TemplateAction<any, any>>();\n    env.registerExtensionPoint(scaffolderActionsExtensionPoint, {\n      addActions(...newActions: TemplateAction<any>[]) {\n        addedActions.push(...newActions);\n      },\n    });\n\n    let taskBroker: TaskBroker | undefined;\n    env.registerExtensionPoint(scaffolderTaskBrokerExtensionPoint, {\n      setTaskBroker(newTaskBroker) {\n        if (taskBroker) {\n          throw new Error('Task broker may only be set once');\n        }\n        taskBroker = newTaskBroker;\n      },\n    });\n\n    const additionalTemplateFilters: CreatedTemplateFilter<any, any>[] = [];\n    const additionalTemplateGlobals: CreatedTemplateGlobal[] = [];\n\n    env.registerExtensionPoint(scaffolderTemplatingExtensionPoint, {\n      addTemplateFilters(newFilters) {\n        additionalTemplateFilters.push(\n          ...(Array.isArray(newFilters)\n            ? newFilters\n            : Object.entries(newFilters).map(([id, filter]) =>\n                createTemplateFilter({\n                  id,\n                  filter,\n                }),\n              )),\n        );\n      },\n      addTemplateGlobals(newGlobals) {\n        additionalTemplateGlobals.push(\n          ...(Array.isArray(newGlobals)\n            ? newGlobals\n            : Object.entries(newGlobals).map(([id, global]) =>\n                typeof global === 'function'\n                  ? createTemplateGlobalFunction({ id, fn: global })\n                  : createTemplateGlobalValue({ id, value: global }),\n              )),\n        );\n      },\n    });\n\n    const autocompleteHandlers: Record<string, AutocompleteHandler> = {};\n    env.registerExtensionPoint(scaffolderAutocompleteExtensionPoint, {\n      addAutocompleteProvider(provider) {\n        autocompleteHandlers[provider.id] = provider.handler;\n      },\n    });\n\n    const additionalWorkspaceProviders: Record<string, WorkspaceProvider> = {};\n    env.registerExtensionPoint(scaffolderWorkspaceProviderExtensionPoint, {\n      addProviders(provider) {\n        Object.assign(additionalWorkspaceProviders, provider);\n      },\n    });\n\n    env.registerInit({\n      deps: {\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n        lifecycle: coreServices.rootLifecycle,\n        reader: coreServices.urlReader,\n        permissions: coreServices.permissions,\n        database: coreServices.database,\n        auth: coreServices.auth,\n        httpRouter: coreServices.httpRouter,\n        httpAuth: coreServices.httpAuth,\n        auditor: coreServices.auditor,\n        catalog: catalogServiceRef,\n        events: eventsServiceRef,\n      },\n      async init({\n        logger,\n        config,\n        lifecycle,\n        reader,\n        database,\n        auth,\n        httpRouter,\n        httpAuth,\n        catalog,\n        permissions,\n        events,\n        auditor,\n      }) {\n        const log = loggerToWinstonLogger(logger);\n        const integrations = ScmIntegrations.fromConfig(config);\n\n        const templateExtensions = {\n          additionalTemplateFilters: convertFiltersToRecord(\n            additionalTemplateFilters,\n          ),\n          additionalTemplateGlobals: convertGlobalsToRecord(\n            additionalTemplateGlobals,\n          ),\n        };\n        const actions = [\n          // actions provided from other modules\n          ...addedActions,\n\n          // built-in actions for the scaffolder\n          createFetchPlainAction({\n            reader,\n            integrations,\n          }),\n          createFetchPlainFileAction({\n            reader,\n            integrations,\n          }),\n          createFetchTemplateAction({\n            integrations,\n            reader,\n            ...templateExtensions,\n          }),\n          createFetchTemplateFileAction({\n            integrations,\n            reader,\n            ...templateExtensions,\n          }),\n          createDebugLogAction(),\n          createWaitAction(),\n          // todo(blam): maybe these should be a -catalog module?\n          createCatalogRegisterAction({ catalog, integrations }),\n          createFetchCatalogEntityAction({ catalog }),\n          createCatalogWriteAction(),\n          createFilesystemDeleteAction(),\n          createFilesystemRenameAction(),\n          createFilesystemReadDirAction(),\n        ];\n\n        const actionIds = actions.map(action => action.id).join(', ');\n\n        log.info(\n          `Starting scaffolder with the following actions enabled ${actionIds}`,\n        );\n\n        const router = await createRouter({\n          logger,\n          config,\n          database,\n          catalog,\n          lifecycle,\n          actions,\n          taskBroker,\n          additionalTemplateFilters,\n          additionalTemplateGlobals,\n          auth,\n          httpAuth,\n          permissions,\n          autocompleteHandlers,\n          additionalWorkspaceProviders,\n          events,\n          auditor,\n        });\n        httpRouter.use(router);\n      },\n    });\n  },\n});\n"],"names":["createBackendPlugin","scaffolderActionsExtensionPoint","scaffolderTaskBrokerExtensionPoint","scaffolderTemplatingExtensionPoint","createTemplateFilter","createTemplateGlobalFunction","createTemplateGlobalValue","scaffolderAutocompleteExtensionPoint","scaffolderWorkspaceProviderExtensionPoint","coreServices","catalogServiceRef","eventsServiceRef","log","loggerToWinstonLogger","ScmIntegrations","convertFiltersToRecord","convertGlobalsToRecord","createFetchPlainAction","createFetchPlainFileAction","createFetchTemplateAction","createFetchTemplateFileAction","createDebugLogAction","createWaitAction","createCatalogRegisterAction","createFetchCatalogEntityAction","createCatalogWriteAction","createFilesystemDeleteAction","createFilesystemRenameAction","createFilesystemReadDirAction","router","createRouter"],"mappings":"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"}