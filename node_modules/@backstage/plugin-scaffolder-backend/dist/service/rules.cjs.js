'use strict';

var pluginPermissionNode = require('@backstage/plugin-permission-node');
var alpha = require('@backstage/plugin-scaffolder-common/alpha');
var zod = require('zod');
var lodash = require('lodash');

const createTemplatePermissionRule = pluginPermissionNode.makeCreatePermissionRule();
const hasTag = createTemplatePermissionRule({
  name: "HAS_TAG",
  resourceType: alpha.RESOURCE_TYPE_SCAFFOLDER_TEMPLATE,
  description: `Match parameters or steps with the given tag`,
  paramsSchema: zod.z.object({
    tag: zod.z.string().describe("Name of the tag to match on")
  }),
  apply: (resource, { tag }) => {
    return resource["backstage:permissions"]?.tags?.includes(tag) ?? false;
  },
  toQuery: () => ({})
});
const createActionPermissionRule = pluginPermissionNode.makeCreatePermissionRule();
const hasActionId = createActionPermissionRule({
  name: "HAS_ACTION_ID",
  resourceType: alpha.RESOURCE_TYPE_SCAFFOLDER_ACTION,
  description: `Match actions with the given actionId`,
  paramsSchema: zod.z.object({
    actionId: zod.z.string().describe("Name of the actionId to match on")
  }),
  apply: (resource, { actionId }) => {
    return resource.action === actionId;
  },
  toQuery: () => ({})
});
buildHasProperty({
  name: "HAS_PROPERTY",
  valueSchema: zod.z.union([zod.z.string(), zod.z.number(), zod.z.boolean(), zod.z.null()]),
  validateProperty: false
});
const hasBooleanProperty = buildHasProperty({
  name: "HAS_BOOLEAN_PROPERTY",
  valueSchema: zod.z.boolean()
});
const hasNumberProperty = buildHasProperty({
  name: "HAS_NUMBER_PROPERTY",
  valueSchema: zod.z.number()
});
const hasStringProperty = buildHasProperty({
  name: "HAS_STRING_PROPERTY",
  valueSchema: zod.z.string()
});
function buildHasProperty({
  name,
  valueSchema,
  validateProperty = true
}) {
  return createActionPermissionRule({
    name,
    description: `Allow actions with the specified property`,
    resourceType: alpha.RESOURCE_TYPE_SCAFFOLDER_ACTION,
    paramsSchema: zod.z.object({
      key: zod.z.string().describe(`Property within the action parameters to match on`),
      value: valueSchema.optional().describe(`Value of the given property to match on`)
    }),
    apply: (resource, { key, value }) => {
      const foundValue = lodash.get(resource.input, key);
      if (validateProperty && !valueSchema.safeParse(foundValue).success) {
        return false;
      }
      if (value !== void 0) {
        if (valueSchema.safeParse(value).success) {
          return value === foundValue;
        }
        return false;
      }
      return foundValue !== void 0;
    },
    toQuery: () => ({})
  });
}
const scaffolderTemplateRules = { hasTag };
const scaffolderActionRules = {
  hasActionId,
  hasBooleanProperty,
  hasNumberProperty,
  hasStringProperty
};

exports.createActionPermissionRule = createActionPermissionRule;
exports.createTemplatePermissionRule = createTemplatePermissionRule;
exports.hasActionId = hasActionId;
exports.hasBooleanProperty = hasBooleanProperty;
exports.hasNumberProperty = hasNumberProperty;
exports.hasStringProperty = hasStringProperty;
exports.hasTag = hasTag;
exports.scaffolderActionRules = scaffolderActionRules;
exports.scaffolderTemplateRules = scaffolderTemplateRules;
//# sourceMappingURL=rules.cjs.js.map
