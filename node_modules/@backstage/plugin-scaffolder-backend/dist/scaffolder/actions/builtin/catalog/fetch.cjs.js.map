{"version":3,"file":"fetch.cjs.js","sources":["../../../../../src/scaffolder/actions/builtin/catalog/fetch.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { parseEntityRef, stringifyEntityRef } from '@backstage/catalog-model';\nimport { examples } from './fetch.examples';\nimport { CatalogService } from '@backstage/plugin-catalog-node';\n\nconst id = 'catalog:fetch';\n\n/**\n * Returns entity or entities from the catalog by entity reference(s).\n *\n * @public\n */\nexport function createFetchCatalogEntityAction(options: {\n  catalog: CatalogService;\n}) {\n  const { catalog } = options;\n\n  return createTemplateAction({\n    id,\n    description:\n      'Returns entity or entities from the catalog by entity reference(s)',\n    examples,\n    supportsDryRun: true,\n    schema: {\n      input: {\n        entityRef: z =>\n          z\n            .string({\n              description: 'Entity reference of the entity to get',\n            })\n            .optional(),\n        entityRefs: z =>\n          z\n            .array(z.string(), {\n              description: 'Entity references of the entities to get',\n            })\n            .optional(),\n        optional: z =>\n          z\n            .boolean({\n              description:\n                'Allow the entity or entities to optionally exist. Default: false',\n            })\n            .optional(),\n        defaultKind: z =>\n          z.string({ description: 'The default kind' }).optional(),\n        defaultNamespace: z =>\n          z.string({ description: 'The default namespace' }).optional(),\n      },\n      output: {\n        entity: z =>\n          z\n            .any({\n              description:\n                'Object containing same values used in the Entity schema. Only when used with `entityRef` parameter.',\n            })\n            .optional(),\n        entities: z =>\n          z\n            .array(\n              z.any({\n                description:\n                  'Array containing objects with same values used in the Entity schema. Only when used with `entityRefs` parameter.',\n              }),\n            )\n            .optional(),\n      },\n    },\n    async handler(ctx) {\n      const { entityRef, entityRefs, optional, defaultKind, defaultNamespace } =\n        ctx.input;\n\n      if (!entityRef && !entityRefs) {\n        if (optional) {\n          return;\n        }\n        throw new Error('Missing entity reference or references');\n      }\n\n      if (entityRef) {\n        const entity = await catalog.getEntityByRef(\n          stringifyEntityRef(\n            parseEntityRef(entityRef, { defaultKind, defaultNamespace }),\n          ),\n          {\n            credentials: await ctx.getInitiatorCredentials(),\n          },\n        );\n\n        if (!entity && !optional) {\n          throw new Error(`Entity ${entityRef} not found`);\n        }\n        ctx.output('entity', entity ?? null);\n      }\n\n      if (entityRefs) {\n        const entities = await catalog.getEntitiesByRefs(\n          {\n            entityRefs: entityRefs.map(ref =>\n              stringifyEntityRef(\n                parseEntityRef(ref, { defaultKind, defaultNamespace }),\n              ),\n            ),\n          },\n          { credentials: await ctx.getInitiatorCredentials() },\n        );\n\n        const finalEntities = entities.items.map((e, i) => {\n          if (!e && !optional) {\n            throw new Error(`Entity ${entityRefs[i]} not found`);\n          }\n          return e ?? null;\n        });\n\n        ctx.output('entities', finalEntities);\n      }\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","stringifyEntityRef","parseEntityRef"],"mappings":"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"}