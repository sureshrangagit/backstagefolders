{"version":3,"file":"templateActionHandler.cjs.js","sources":["../../../../../src/scaffolder/actions/builtin/fetch/templateActionHandler.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  isChildPath,\n  resolveSafeChildPath,\n} from '@backstage/backend-plugin-api';\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport {\n  ActionContext,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport fs from 'fs-extra';\nimport globby from 'globby';\nimport { isBinaryFile } from 'isbinaryfile';\nimport { createDefaultFilters } from '../../../../lib/templating/filters/createDefaultFilters';\nimport { convertFiltersToRecord } from '../../../../util/templating';\nimport { SecureTemplater } from '../../../../lib/templating/SecureTemplater';\nimport { extname } from 'path';\n\nexport type TemplateActionInput = {\n  targetPath?: string;\n  values: any;\n  templateFileExtension?: string | boolean;\n  copyWithoutTemplating?: string[];\n  cookiecutterCompat?: boolean;\n  replace?: boolean;\n  trimBlocks?: boolean;\n  lstripBlocks?: boolean;\n};\n\nexport async function createTemplateActionHandler<\n  I extends TemplateActionInput,\n>(options: {\n  ctx: ActionContext<I, any, any>;\n  resolveTemplate: () => Promise<string>;\n  integrations: ScmIntegrations;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n}) {\n  const {\n    resolveTemplate,\n    integrations,\n    additionalTemplateFilters,\n    additionalTemplateGlobals: templateGlobals,\n    ctx,\n  } = options;\n\n  const templateFilters = {\n    ...convertFiltersToRecord(createDefaultFilters({ integrations })),\n    ...additionalTemplateFilters,\n  };\n\n  const { outputDir, copyOnlyPatterns, renderFilename, extension } =\n    resolveTemplateActionSettings(ctx);\n\n  const templateDir = await resolveTemplate();\n\n  if (isChildPath(templateDir, outputDir)) {\n    throw new InputError('targetPath must not be within template path');\n  }\n\n  ctx.logger.info('Listing files and directories in template');\n  const allEntriesInTemplate = await globby(`**/*`, {\n    cwd: templateDir,\n    dot: true,\n    onlyFiles: false,\n    markDirectories: true,\n    followSymbolicLinks: false,\n  });\n\n  const nonTemplatedEntries = new Set(\n    await globby(copyOnlyPatterns || [], {\n      cwd: templateDir,\n      dot: true,\n      onlyFiles: false,\n      markDirectories: true,\n      followSymbolicLinks: false,\n    }),\n  );\n\n  // Cookiecutter prefixes all parameters in templates with\n  // `cookiecutter.`. To replicate this, we wrap our parameters\n  // in an object with a `cookiecutter` property when compat\n  // mode is enabled.\n  const { cookiecutterCompat, values } = ctx.input;\n  const context = {\n    [cookiecutterCompat ? 'cookiecutter' : 'values']: values,\n  };\n\n  ctx.logger.info(\n    `Processing ${allEntriesInTemplate.length} template files/directories with input values`,\n    ctx.input.values,\n  );\n\n  const renderTemplate = await SecureTemplater.loadRenderer({\n    cookiecutterCompat: ctx.input.cookiecutterCompat,\n    templateFilters,\n    templateGlobals,\n    nunjucksConfigs: {\n      trimBlocks: ctx.input.trimBlocks,\n      lstripBlocks: ctx.input.lstripBlocks,\n    },\n  });\n\n  for (const location of allEntriesInTemplate) {\n    let renderContents: boolean;\n\n    let localOutputPath = location;\n    if (extension) {\n      renderContents = extname(localOutputPath) === extension;\n      if (renderContents) {\n        localOutputPath = localOutputPath.slice(0, -extension.length);\n      }\n      // extension is mutual exclusive with copyWithoutRender/copyWithoutTemplating,\n      // therefore the output path is always rendered.\n      localOutputPath = renderTemplate(localOutputPath, context);\n    } else {\n      renderContents = !nonTemplatedEntries.has(location);\n      // The logic here is a bit tangled because it depends on two variables.\n      // If renderFilename is true, which means copyWithoutTemplating is used,\n      // then the path is always rendered.\n      // If renderFilename is false, which means copyWithoutRender is used,\n      // then matched file/directory won't be processed, same as before.\n      if (renderFilename) {\n        localOutputPath = renderTemplate(localOutputPath, context);\n      } else {\n        localOutputPath = renderContents\n          ? renderTemplate(localOutputPath, context)\n          : localOutputPath;\n      }\n    }\n\n    if (containsSkippedContent(localOutputPath)) {\n      continue;\n    }\n\n    const outputPath = resolveSafeChildPath(outputDir, localOutputPath);\n    if (fs.existsSync(outputPath) && !ctx.input.replace) {\n      continue;\n    }\n\n    if (!renderContents && !extension) {\n      ctx.logger.info(`Copying file/directory ${location} without processing.`);\n    }\n\n    if (location.endsWith('/')) {\n      ctx.logger.info(`Writing directory ${location} to template output path.`);\n      await fs.ensureDir(outputPath);\n    } else {\n      const inputFilePath = resolveSafeChildPath(templateDir, location);\n      const stats = await fs.promises.lstat(inputFilePath);\n\n      if (stats.isSymbolicLink() || (await isBinaryFile(inputFilePath))) {\n        ctx.logger.info(\n          `Copying file binary or symbolic link at ${location}, to template output path.`,\n        );\n        await fs.copy(inputFilePath, outputPath);\n      } else {\n        const statsObj = await fs.stat(inputFilePath);\n        ctx.logger.info(\n          `Writing file ${location} to template output path with mode ${statsObj.mode}.`,\n        );\n        const inputFileContents = await fs.readFile(inputFilePath, 'utf-8');\n        await fs.outputFile(\n          outputPath,\n          renderContents\n            ? renderTemplate(inputFileContents, context)\n            : inputFileContents,\n          { mode: statsObj.mode },\n        );\n      }\n    }\n  }\n  ctx.logger.info(`Template result written to ${outputDir}`);\n}\n\nfunction resolveTemplateActionSettings<I extends TemplateActionInput>(\n  ctx: ActionContext<I, any, any>,\n): {\n  outputDir: string;\n  copyOnlyPatterns?: string[];\n  renderFilename: boolean;\n  extension: string | false;\n} {\n  const targetPath = ctx.input.targetPath ?? './';\n  const outputDir = resolveSafeChildPath(ctx.workspacePath, targetPath);\n\n  const copyOnlyPatterns = ctx.input.copyWithoutTemplating;\n  const renderFilename = true;\n\n  if (copyOnlyPatterns && !Array.isArray(copyOnlyPatterns)) {\n    throw new InputError(\n      'Fetch action input copyWithoutTemplating must be an Array',\n    );\n  }\n  if (\n    ctx.input.templateFileExtension &&\n    (copyOnlyPatterns || ctx.input.cookiecutterCompat)\n  ) {\n    throw new InputError(\n      'Fetch action input extension incompatible with copyWithoutTemplating and cookiecutterCompat',\n    );\n  }\n  let extension: string | false = false;\n  if (ctx.input.templateFileExtension) {\n    extension =\n      ctx.input.templateFileExtension === true\n        ? '.njk'\n        : ctx.input.templateFileExtension;\n    if (!extension.startsWith('.')) {\n      extension = `.${extension}`;\n    }\n  }\n  return {\n    outputDir,\n    copyOnlyPatterns,\n    renderFilename,\n    extension,\n  };\n}\n\nfunction containsSkippedContent(localOutputPath: string): boolean {\n  // if the path is empty means that there is a file skipped in the root\n  // if the path starts with a separator it means that the root directory has been skipped\n  // if the path includes // means that there is a subdirectory skipped\n  // All paths returned are considered with / separator because of globby returning the linux separator for all os'.\n  return (\n    localOutputPath === '' ||\n    localOutputPath.startsWith('/') ||\n    localOutputPath.includes('//')\n  );\n}\n"],"names":["convertFiltersToRecord","createDefaultFilters","isChildPath","InputError","globby","SecureTemplater","extname","resolveSafeChildPath","fs","isBinaryFile"],"mappings":"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"}