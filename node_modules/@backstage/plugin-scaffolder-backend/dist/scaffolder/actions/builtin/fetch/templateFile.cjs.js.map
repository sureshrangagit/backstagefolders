{"version":3,"file":"templateFile.cjs.js","sources":["../../../../../src/scaffolder/actions/builtin/fetch/templateFile.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReaderService } from '@backstage/backend-plugin-api';\nimport { ScmIntegrations } from '@backstage/integration';\nimport {\n  createTemplateAction,\n  fetchFile,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport path from 'path';\nimport { examples } from './templateFile.examples';\nimport { createTemplateFileActionHandler } from './templateFileActionHandler';\n\n/**\n * Downloads a single file and templates variables into file.\n * Then places the result in the workspace, or optionally in a subdirectory\n * specified by the 'targetPath' input option.\n * @public\n */\nexport function createFetchTemplateFileAction(options: {\n  reader: UrlReaderService;\n  integrations: ScmIntegrations;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n}) {\n  return createTemplateAction({\n    id: 'fetch:template:file',\n    description: 'Downloads single file and places it in the workspace.',\n    examples,\n    schema: {\n      input: {\n        url: z =>\n          z.string({\n            description:\n              'Relative path or absolute URL pointing to the single file to fetch.',\n          }),\n        targetPath: z =>\n          z.string({\n            description:\n              'Target path within the working directory to download the file as.',\n          }),\n        values: z =>\n          z\n            .record(z.any(), {\n              description: 'Values to pass on to the templating engine',\n            })\n            .optional(),\n        cookiecutterCompat: z =>\n          z\n            .boolean({\n              description:\n                'Enable features to maximise compatibility with templates built for fetch:cookiecutter',\n            })\n            .optional(),\n        replace: z =>\n          z\n            .boolean({\n              description:\n                'If set, replace file in targetPath instead of overwriting existing one.',\n            })\n            .optional(),\n        trimBlocks: z =>\n          z\n            .boolean({\n              description:\n                'If set, the first newline after a block is removed (block, not variable tag).',\n            })\n            .optional(),\n        lstripBlocks: z =>\n          z\n            .boolean({\n              description:\n                'If set, leading spaces and tabs are stripped from the start of a line to a block.',\n            })\n            .optional(),\n        token: z =>\n          z\n            .string({\n              description:\n                'An optional token to use for authentication when reading the resources.',\n            })\n            .optional(),\n      },\n    },\n    supportsDryRun: true,\n    handler: ctx =>\n      createTemplateFileActionHandler({\n        ctx,\n        resolveTemplateFile: async () => {\n          ctx.logger.info('Fetching template file content from remote URL');\n\n          const workDir = await ctx.createTemporaryDirectory();\n          // Write to a tmp file, render the template, then copy to workspace.\n          const tmpFilePath = path.join(workDir, 'tmp');\n\n          await fetchFile({\n            baseUrl: ctx.templateInfo?.baseUrl,\n            fetchUrl: ctx.input.url,\n            outputPath: tmpFilePath,\n            token: ctx.input.token,\n            ...options,\n          });\n          return tmpFilePath;\n        },\n        ...options,\n      }),\n  });\n}\n"],"names":["createTemplateAction","examples","createTemplateFileActionHandler","path","fetchFile"],"mappings":";;;;;;;;;;;AAkCO,SAAS,8BAA8B,OAK3C,EAAA;AACD,EAAA,OAAOA,yCAAqB,CAAA;AAAA,IAC1B,EAAI,EAAA,qBAAA;AAAA,IACJ,WAAa,EAAA,uDAAA;AAAA,cACbC,8BAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,KAAO,EAAA;AAAA,QACL,GAAA,EAAK,CACH,CAAA,KAAA,CAAA,CAAE,MAAO,CAAA;AAAA,UACP,WACE,EAAA;AAAA,SACH,CAAA;AAAA,QACH,UAAA,EAAY,CACV,CAAA,KAAA,CAAA,CAAE,MAAO,CAAA;AAAA,UACP,WACE,EAAA;AAAA,SACH,CAAA;AAAA,QACH,QAAQ,CACN,CAAA,KAAA,CAAA,CACG,MAAO,CAAA,CAAA,CAAE,KAAO,EAAA;AAAA,UACf,WAAa,EAAA;AAAA,SACd,EACA,QAAS,EAAA;AAAA,QACd,kBAAA,EAAoB,CAClB,CAAA,KAAA,CAAA,CACG,OAAQ,CAAA;AAAA,UACP,WACE,EAAA;AAAA,SACH,EACA,QAAS,EAAA;AAAA,QACd,OAAA,EAAS,CACP,CAAA,KAAA,CAAA,CACG,OAAQ,CAAA;AAAA,UACP,WACE,EAAA;AAAA,SACH,EACA,QAAS,EAAA;AAAA,QACd,UAAA,EAAY,CACV,CAAA,KAAA,CAAA,CACG,OAAQ,CAAA;AAAA,UACP,WACE,EAAA;AAAA,SACH,EACA,QAAS,EAAA;AAAA,QACd,YAAA,EAAc,CACZ,CAAA,KAAA,CAAA,CACG,OAAQ,CAAA;AAAA,UACP,WACE,EAAA;AAAA,SACH,EACA,QAAS,EAAA;AAAA,QACd,KAAA,EAAO,CACL,CAAA,KAAA,CAAA,CACG,MAAO,CAAA;AAAA,UACN,WACE,EAAA;AAAA,SACH,EACA,QAAS;AAAA;AAChB,KACF;AAAA,IACA,cAAgB,EAAA,IAAA;AAAA,IAChB,OAAA,EAAS,SACPC,yDAAgC,CAAA;AAAA,MAC9B,GAAA;AAAA,MACA,qBAAqB,YAAY;AAC/B,QAAI,GAAA,CAAA,MAAA,CAAO,KAAK,gDAAgD,CAAA;AAEhE,QAAM,MAAA,OAAA,GAAU,MAAM,GAAA,CAAI,wBAAyB,EAAA;AAEnD,QAAA,MAAM,WAAc,GAAAC,qBAAA,CAAK,IAAK,CAAA,OAAA,EAAS,KAAK,CAAA;AAE5C,QAAA,MAAMC,8BAAU,CAAA;AAAA,UACd,OAAA,EAAS,IAAI,YAAc,EAAA,OAAA;AAAA,UAC3B,QAAA,EAAU,IAAI,KAAM,CAAA,GAAA;AAAA,UACpB,UAAY,EAAA,WAAA;AAAA,UACZ,KAAA,EAAO,IAAI,KAAM,CAAA,KAAA;AAAA,UACjB,GAAG;AAAA,SACJ,CAAA;AACD,QAAO,OAAA,WAAA;AAAA,OACT;AAAA,MACA,GAAG;AAAA,KACJ;AAAA,GACJ,CAAA;AACH;;;;"}