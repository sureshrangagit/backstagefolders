{"version":3,"file":"evictEntitiesFromOrphanedProviders.cjs.js","sources":["../../src/processing/evictEntitiesFromOrphanedProviders.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EntityProvider } from '@backstage/plugin-catalog-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ProviderDatabase } from '../database/types';\n\nasync function getOrphanedEntityProviderNames({\n  db,\n  providers,\n}: {\n  db: ProviderDatabase;\n  providers: EntityProvider[];\n}): Promise<string[]> {\n  const dbProviderNames = await db.transaction(async tx =>\n    db.listReferenceSourceKeys(tx),\n  );\n\n  const providerNames = providers.map(p => p.getProviderName());\n\n  return dbProviderNames.filter(\n    dbProviderName => !providerNames.includes(dbProviderName),\n  );\n}\n\nasync function removeEntitiesForProvider({\n  db,\n  providerName,\n  logger,\n}: {\n  db: ProviderDatabase;\n  providerName: string;\n  logger: LoggerService;\n}) {\n  try {\n    await db.transaction(async tx => {\n      await db.replaceUnprocessedEntities(tx, {\n        sourceKey: providerName,\n        type: 'full',\n        items: [],\n      });\n    });\n    logger.info(`Removed entities for orphaned provider ${providerName}`);\n  } catch (e) {\n    logger.error(\n      `Failed to remove entities for orphaned provider ${providerName}`,\n      e,\n    );\n  }\n}\n\nexport async function evictEntitiesFromOrphanedProviders(options: {\n  db: ProviderDatabase;\n  providers: EntityProvider[];\n  logger: LoggerService;\n}) {\n  for (const providerName of await getOrphanedEntityProviderNames(options)) {\n    await removeEntitiesForProvider({\n      db: options.db,\n      providerName,\n      logger: options.logger,\n    });\n  }\n}\n"],"names":[],"mappings":";;AAoBA,eAAe,8BAA+B,CAAA;AAAA,EAC5C,EAAA;AAAA,EACA;AACF,CAGsB,EAAA;AACpB,EAAM,MAAA,eAAA,GAAkB,MAAM,EAAG,CAAA,WAAA;AAAA,IAAY,OAAM,EAAA,KACjD,EAAG,CAAA,uBAAA,CAAwB,EAAE;AAAA,GAC/B;AAEA,EAAA,MAAM,gBAAgB,SAAU,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,iBAAiB,CAAA;AAE5D,EAAA,OAAO,eAAgB,CAAA,MAAA;AAAA,IACrB,CAAkB,cAAA,KAAA,CAAC,aAAc,CAAA,QAAA,CAAS,cAAc;AAAA,GAC1D;AACF;AAEA,eAAe,yBAA0B,CAAA;AAAA,EACvC,EAAA;AAAA,EACA,YAAA;AAAA,EACA;AACF,CAIG,EAAA;AACD,EAAI,IAAA;AACF,IAAM,MAAA,EAAA,CAAG,WAAY,CAAA,OAAM,EAAM,KAAA;AAC/B,MAAM,MAAA,EAAA,CAAG,2BAA2B,EAAI,EAAA;AAAA,QACtC,SAAW,EAAA,YAAA;AAAA,QACX,IAAM,EAAA,MAAA;AAAA,QACN,OAAO;AAAC,OACT,CAAA;AAAA,KACF,CAAA;AACD,IAAO,MAAA,CAAA,IAAA,CAAK,CAA0C,uCAAA,EAAA,YAAY,CAAE,CAAA,CAAA;AAAA,WAC7D,CAAG,EAAA;AACV,IAAO,MAAA,CAAA,KAAA;AAAA,MACL,mDAAmD,YAAY,CAAA,CAAA;AAAA,MAC/D;AAAA,KACF;AAAA;AAEJ;AAEA,eAAsB,mCAAmC,OAItD,EAAA;AACD,EAAA,KAAA,MAAW,YAAgB,IAAA,MAAM,8BAA+B,CAAA,OAAO,CAAG,EAAA;AACxE,IAAA,MAAM,yBAA0B,CAAA;AAAA,MAC9B,IAAI,OAAQ,CAAA,EAAA;AAAA,MACZ,YAAA;AAAA,MACA,QAAQ,OAAQ,CAAA;AAAA,KACjB,CAAA;AAAA;AAEL;;;;"}