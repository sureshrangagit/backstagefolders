{"version":3,"file":"defaults.esm.js","sources":["../../../src/components/ImportStepper/defaults.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TranslationFunction } from '@backstage/core-plugin-api/alpha';\nimport { catalogImportTranslationRef } from '@backstage/plugin-catalog-import/alpha';\nimport Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { ReactElement } from 'react';\nimport { BackButton } from '../Buttons';\nimport { asInputRef } from '../helpers';\nimport { StepFinishImportLocation } from '../StepFinishImportLocation';\nimport { StepInitAnalyzeUrl } from '../StepInitAnalyzeUrl';\nimport {\n  AutocompleteTextField,\n  StepPrepareCreatePullRequest,\n} from '../StepPrepareCreatePullRequest';\nimport { StepPrepareSelectLocations } from '../StepPrepareSelectLocations';\nimport { StepReviewLocation } from '../StepReviewLocation';\nimport { StepperApis } from '../types';\nimport { ImportFlows, ImportState } from '../useImportState';\n\nexport type StepConfiguration = {\n  stepLabel: ReactElement;\n  content: ReactElement;\n};\n\n/**\n * Defines the details of the stepper.\n *\n * @public\n */\nexport interface StepperProvider {\n  analyze: (\n    s: Extract<ImportState, { activeState: 'analyze' }>,\n    opts: {\n      apis: StepperApis;\n      t: TranslationFunction<typeof catalogImportTranslationRef.T>;\n    },\n  ) => StepConfiguration;\n  prepare: (\n    s: Extract<ImportState, { activeState: 'prepare' }>,\n    opts: {\n      apis: StepperApis;\n      t: TranslationFunction<typeof catalogImportTranslationRef.T>;\n    },\n  ) => StepConfiguration;\n  review: (\n    s: Extract<ImportState, { activeState: 'review' }>,\n    opts: {\n      apis: StepperApis;\n      t: TranslationFunction<typeof catalogImportTranslationRef.T>;\n    },\n  ) => StepConfiguration;\n  finish: (\n    s: Extract<ImportState, { activeState: 'finish' }>,\n    opts: {\n      apis: StepperApis;\n      t: TranslationFunction<typeof catalogImportTranslationRef.T>;\n    },\n  ) => StepConfiguration;\n}\n\n/**\n * The default stepper generation function.\n *\n * Override this function to customize the import flow. Each flow should at\n * least override the prepare operation.\n *\n * @param flow - the name of the active flow\n * @param defaults - the default steps\n * @param t - the translation function\n * @public\n */\nexport function defaultGenerateStepper(\n  flow: ImportFlows,\n  defaults: StepperProvider,\n  t: TranslationFunction<typeof catalogImportTranslationRef.T>,\n): StepperProvider {\n  switch (flow) {\n    // the prepare step is skipped but the label of the step is updated\n    case 'single-location':\n      return {\n        ...defaults,\n        prepare: () => ({\n          stepLabel: (\n            <StepLabel\n              optional={\n                <Typography variant=\"caption\">\n                  {t('importStepper.singleLocation.description')}\n                </Typography>\n              }\n            >\n              {t('importStepper.singleLocation.title')}\n            </StepLabel>\n          ),\n          content: <></>,\n        }),\n      };\n\n    // let the user select one or more of the discovered locations in the prepare step\n    case 'multiple-locations':\n      return {\n        ...defaults,\n        prepare: (state, opts) => {\n          if (state.analyzeResult.type !== 'locations') {\n            return defaults.prepare(state, opts);\n          }\n\n          return {\n            stepLabel: (\n              <StepLabel\n                optional={\n                  <Typography variant=\"caption\">\n                    {t('importStepper.multipleLocations.description', {\n                      length: state.analyzeResult.locations.length,\n                    })}\n                  </Typography>\n                }\n              >\n                {t('importStepper.multipleLocations.title')}\n              </StepLabel>\n            ),\n            content: (\n              <StepPrepareSelectLocations\n                analyzeResult={state.analyzeResult}\n                prepareResult={state.prepareResult}\n                onPrepare={state.onPrepare}\n                onGoBack={state.onGoBack}\n              />\n            ),\n          };\n        },\n      };\n\n    case 'no-location':\n      return {\n        ...defaults,\n        prepare: (state, opts) => {\n          if (state.analyzeResult.type !== 'repository') {\n            return defaults.prepare(state, opts);\n          }\n\n          return {\n            stepLabel: (\n              <StepLabel>{t('importStepper.noLocation.title')}</StepLabel>\n            ),\n            content: (\n              <StepPrepareCreatePullRequest\n                analyzeResult={state.analyzeResult}\n                onPrepare={state.onPrepare}\n                onGoBack={state.onGoBack}\n                renderFormFields={({\n                  values,\n                  setValue,\n                  formState,\n                  groupsLoading,\n                  groups,\n                  register,\n                }) => (\n                  <>\n                    <Box marginTop={2}>\n                      <Typography variant=\"h6\">\n                        {t('importStepper.noLocation.createPr.detailsTitle')}\n                      </Typography>\n                    </Box>\n\n                    <TextField\n                      {...asInputRef(\n                        register('title', {\n                          required: true,\n                        }),\n                      )}\n                      label={t('importStepper.noLocation.createPr.titleLabel')}\n                      placeholder={t(\n                        'importStepper.noLocation.createPr.titlePlaceholder',\n                      )}\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      fullWidth\n                      error={Boolean(formState.errors.title)}\n                      required\n                    />\n\n                    <TextField\n                      {...asInputRef(\n                        register('body', {\n                          required: true,\n                        }),\n                      )}\n                      label={t('importStepper.noLocation.createPr.bodyLabel')}\n                      placeholder={t(\n                        'importStepper.noLocation.createPr.bodyPlaceholder',\n                      )}\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      fullWidth\n                      error={Boolean(formState.errors.body)}\n                      multiline\n                      required\n                    />\n\n                    <Box marginTop={2}>\n                      <Typography variant=\"h6\">\n                        {t(\n                          'importStepper.noLocation.createPr.configurationTitle',\n                        )}\n                      </Typography>\n                    </Box>\n\n                    <TextField\n                      {...asInputRef(\n                        register('componentName', { required: true }),\n                      )}\n                      label={t(\n                        'importStepper.noLocation.createPr.componentNameLabel',\n                      )}\n                      placeholder={t(\n                        'importStepper.noLocation.createPr.componentNamePlaceholder',\n                      )}\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      fullWidth\n                      error={Boolean(formState.errors.componentName)}\n                      required\n                    />\n\n                    {!values.useCodeowners && (\n                      <AutocompleteTextField\n                        name=\"owner\"\n                        errors={formState.errors}\n                        options={groups || []}\n                        loading={groupsLoading}\n                        loadingText={t(\n                          'importStepper.noLocation.createPr.ownerLoadingText',\n                        )}\n                        helperText={t(\n                          'importStepper.noLocation.createPr.ownerHelperText',\n                        )}\n                        errorHelperText={t(\n                          'importStepper.noLocation.createPr.ownerErrorHelperText',\n                        )}\n                        textFieldProps={{\n                          label: t(\n                            'importStepper.noLocation.createPr.ownerLabel',\n                          ),\n                          placeholder: t(\n                            'importStepper.noLocation.createPr.ownerPlaceholder',\n                          ),\n                        }}\n                        rules={{ required: true }}\n                        required\n                      />\n                    )}\n\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          {...asInputRef(register('useCodeowners'))}\n                          onChange={(_, value) => {\n                            if (value) {\n                              setValue('owner', '');\n                            }\n                          }}\n                        />\n                      }\n                      label={\n                        <>\n                          Use <em>CODEOWNERS</em> file as Entity Owner\n                        </>\n                      }\n                    />\n                    <FormHelperText>\n                      {t(\n                        'importStepper.noLocation.createPr.codeownersHelperText',\n                      )}\n                    </FormHelperText>\n                  </>\n                )}\n              />\n            ),\n          };\n        },\n      };\n\n    default:\n      return defaults;\n  }\n}\n\nexport const defaultStepper: StepperProvider = {\n  analyze: (state, { apis, t }) => ({\n    stepLabel: <StepLabel>{t('importStepper.analyze.title')}</StepLabel>,\n    content: (\n      <StepInitAnalyzeUrl\n        key=\"analyze\"\n        analysisUrl={state.analysisUrl}\n        onAnalysis={state.onAnalysis}\n        disablePullRequest={!apis.catalogImportApi.preparePullRequest}\n      />\n    ),\n  }),\n\n  prepare: (state, { t }) => ({\n    stepLabel: (\n      <StepLabel\n        optional={\n          <Typography variant=\"caption\">\n            {t('importStepper.prepare.description')}\n          </Typography>\n        }\n      >\n        {t('importStepper.prepare.title')}\n      </StepLabel>\n    ),\n    content: <BackButton onClick={state.onGoBack} />,\n  }),\n\n  review: (state, { t }) => ({\n    stepLabel: <StepLabel>{t('importStepper.review.title')}</StepLabel>,\n    content: (\n      <StepReviewLocation\n        prepareResult={state.prepareResult}\n        onReview={state.onReview}\n        onGoBack={state.onGoBack}\n      />\n    ),\n  }),\n\n  finish: (state, { t }) => ({\n    stepLabel: <StepLabel>{t('importStepper.finish.title')}</StepLabel>,\n    content: (\n      <StepFinishImportLocation\n        prepareResult={state.prepareResult}\n        onReset={state.onReset}\n      />\n    ),\n  }),\n};\n"],"names":[],"mappings":"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"}